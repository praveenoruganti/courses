(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[55],{624:function(e,t,n){"use strict";n.r(t),t.default=" ## Data Structure\n\n**What is a Datastructure?**\n\nData structure is a way of defining, storing & retriving of data in a structural & systemetic way. A data structure may contain different type of data items.\n\n**The need for Data Structures in Java**\n\nAs the amount of data grows rapidly, applications get more complex, and there may arise the following problems:\n\n- **Processing Speed**: As the data is increasing day by day, high-speed processing is required to handle this massive amount of data, but the processor may fail to deal with that much amount of data.\n- **Searching data**: Consider an inventory with a size of 200 items. If your application needs to search for a particular item, it needs to traverse 200 items in every search. This results in slowing down the search process.\n- **Multiple requests at the same time:** Suppose, millions of users are simultaneously searching the data on a web server, then there is a chance of server failure.\n\n**Advantages of Java Data Structures**\n\n- **Efficiency**: Data Structures are used to increase the efficiency and performance of an application by organizing the data in such a manner that it requires less space with higher processing speed.\n- **Reusability**: Data structures provide reusability of data, that is after implementing a particular data structure once, we can use it many times at any other place. We can compile the implementation of these data structures into libraries and the clients can use these libraries in many ways.\n- **Abstraction**: In Java, the ADT (Abstract Data Types) is used to specify a data structure. The ADT provides a level of abstraction. The client program uses the data structure with the help of the interface only, without having knowledge of the implementation details.\n\n**Types of Data Structure**\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/dsa/ds.jpg)\n\n1. **Linear data structures**\n\n   In linear data structures, the elements are arranged in sequence one after the other. Since elements are arranged in particular order, they are easy to implement.\n\n   However, when the complexity of the program increases, the linear data structures might not be the best choice because of operational complexities.\n\n    - **Array**\n     \n      In an array, elements in memory are arranged in continuous memory. All the elements of an array are of the same type. And, the type of elements that can be stored in the form of arrays is determined by the programming language.\n\n     - **Stack**\n\n      In stack data structure, elements are stored in the LIFO principle. That is, the last element stored in a stack will be removed first.\n      \n      It works just like a pile of plates where the last plate kept on the pile will be removed first.\n\n     - **Queue**\n\n      Unlike stack, the queue data structure works in the FIFO principle where first element stored in the queue will be removed first.\n\n      It works just like a queue of people in the ticket counter where first person on the queue will get the ticket first.\n\n     - **Linked List**\n\n      In linked list data structure, data elements are connected through a series of nodes. And, each node contains the data items and address to the next node.\n\n\n2. **Non Linear data structures**\n\n   Unlike linear data structures, elements in non-linear data structures are not in any sequence. Instead they are arranged in a hierarchical manner where one element will be connected to one or more elements.\n\n   Non-linear data structures are further divided into graph and tree based data structures.\n\n      - **Graph** \n\n       In graph data structure, each node is called vertex and each vertex is connected to other vertices through edges.\n      \n      - **Trees**\n\n       Similar to a graph, a tree is also a collection of vertices and edges. However, in tree data structure, there can only be one edge between two vertices.\n\n\n**Linear Vs Non-linear Data Structures**\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/dsa/lvn.jpg)\n\n**Datastructure Operations**\n\nThe data which is stored in data structure are processed by some set of operations.\n\n- **Insertion** : Add new data in data structure.\n- **Deletion** : Remove a data from data structure. \n- **Sorting** : Arrange data in increasing or decreasing order.\n- **Searching** : Find the location of data in data structure.\n- **Merging** : Combining the data of two different sorted files into a single sorted file.\n- **Traversing** : Accessing each data exactly one in the data structure so that each data item is traversed or visited.\n\n\n## Algorithm\n\n**What is Algorithm?**\n\nAlgorithm is a step by step procedure, which defines a set of instructions to be executed in certain order to get the desired output.\n\n**Why Algorithms**\n\n- Gives an idea of running time.\n- Help us decide on hardware requirements.\n- What is feasible Vs what is impossible.\n- Improvement is never ending process.\n\n**Types of Algorithms**\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/dsa/alg.jpg)\n\n\n- **Brute Force Algorithm**\n\n  A brute force algorithm is essentially trying all possibilities until a result is found. It is the simplest and most basic algorithm. Moreover, these types of algorithms allow for the detection of the ideal or best solution, since they check all possible solutions.\n\n  The method can also be used to find an acceptable solution (not the best). Basically, it stops when an answer to the issue has been found. A clear way to deal with a problem is the first thing that comes to mind after observing a problem. This is the main types of algorithms.\n\n- **Recursive Algorithm**\n\n  Recursion is the key to this type of algorithm. A problem is resolved by breaking it down into subproblems of a similar nature and repeating the process over and over until it is resolved with the help of a base condition.\n\n  Every time it recurs, it solves the base case legitimately and then uses a more straightforward or simpler input. We use it to handle issues that can be broken down into simpler or more modest ones. It is also the main types of algorithms.\n\n- **Dynamic Programming Algorithm**\n\n  Algorithms of this type are also known as memoization techniques. As a result, the thought is to keep track of the recently determined result to avoid calculating it over and over again.\n\n  Using Dynamic Programming, you can break up the unpredictable issue into smaller, more manageable subproblems and put the outcome aside for later. We can say that it remembers previous results and uses them to find new ones. it is the third main types of algorithms.\n\n- **Divide And Conquer Algorithm**\n\n   With the Divide and Conquer algorithm, the aim is to tackle the issue in two sections, the first of which divides the problem into subproblems that are similar in nature. Second, we will approach the more modest issue autonomously and then add the combined outcome to complete our final response.\n\n- **Greedy Algorithm**\n\n  Next, we have a greedy algorithm, which creates the solution portion by portion. In selecting the following role, it is determined by the fact that it provides sudden help and that it never considers the options that had been assumed recently.\n\n- **Backtracking Algorithm**\n\n  This type of algorithm seeks a steady solution to the issue by eliminating solutions that fail to meet the requirements of the issue at any moment. As an example, it is an algorithmic procedure for handling issues recursively by attempting to construct an answer steadily, eliminating solutions that fail to meet the criteria at any moment.\n\n- **Randomized Algorithm**\n\n  During the computations, the algorithm uses a random number at least once for deciding the outcome. So, these are the main types of algorithms.\n\n\n## Mindmap for coding interviews\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/dsa/mindmap.jpg)\n\n\n\n\n  \n "}}]);