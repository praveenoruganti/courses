(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[229],{798:function(e,t,n){"use strict";n.r(t),t.default=' ![screenshot of the app](https://praveenoruganti.github.io/courses/images/springboot/basicauth.jpg)\n\nBasic authentication is a simple authentication scheme built into the HTTP protocol. \n\nThe client sends HTTP requests with the Authorization header that contains the word **Basic** word followed by a space and a base64-encoded string username:password.\n\nFor Basic Authentication, we need to code the below and then restart the app\n\n```jsx\n@Configuration\n@EnableWebSecurity\npublic class ApplicationSecurityConfig extends WebSecurityConfigurerAdapter {\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http.authorizeRequests()\n            .anyRequest()\n            .authenticated()\n            .and()\n            .httpBasic();\n    }\n\n}\n```\nNow instead of form based login you will see a popup for basic authentication in browser asking for userid and password like below.\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/springboot/basicauth1.PNG)\n\nNow lets provide the username as **user** and password fetched from the console **e8203590-5127-4bb5-b308-ef38df2df6ae**.\n\nOnly drawback with this approach is we will not be able to logout as username and password is sent for every request.\n\nNow lets go to postman client\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/springboot/basicauth2.PNG)\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/springboot/basicauth3.PNG)\n\nNow lets see the postman console\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/springboot/basicauth4.PNG)\n\nNow lets see antMatchers which basically tells Spring to only configure HttpSecurity if the path matches this pattern.\n\n```jsx\n@Configuration\n@EnableWebSecurity\npublic class ApplicationSecurityConfig extends WebSecurityConfigurerAdapter {\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n         http.authorizeRequests()\n             .antMatchers("/", "index", "/css/*","/js/*")\n             .permitAll()\n             .anyRequest()\n             .authenticated()\n             .and()\n            .httpBasic();\n    }\n\n}\n\n```\nNow lets restart the app and open [https://localhost:8080](https://localhost:8080) now you will see there is no restriction of access as we have provided permit for those in antMatchers.\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/springboot/basicauth5.PNG) '}}]);