(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[209],{778:function(e,n,a){"use strict";a.r(n),n.default=' Let\u2019s consider the same example which is used in Spring JDBC and implement the same using Spring ORM with hibernate using hsqldb & Hikari connection pool.\n\nPlease refer [Spring JDBC](https://praveenoruganti.github.io/courses/#/spring/springjdbc) section for hsql database setup and table creation.\n\n**pom.xml**\n\n```jsx\n<project\n  xmlns="http://maven.apache.org/POM/4.0.0"\n  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"\n>\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>PraveenSpringORMProject</groupId>\n  <artifactId>PraveenSpringORMProject</artifactId>\n  <version>0.0.1-SNAPSHOT</version>\n  <dependencies>\n    <dependency>\n      <groupId>commons-logging</groupId>\n      <artifactId>commons-logging</artifactId>\n      <version>1.2</version>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-beans</artifactId>\n      <version>5.0.4.RELEASE</version>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-core</artifactId>\n      <version>5.0.4.RELEASE</version>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-context</artifactId>\n      <version>5.0.4.RELEASE</version>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-orm</artifactId>\n      <version>5.0.4.RELEASE</version>\n    </dependency>\n    <dependency>\n      <groupId>org.hibernate</groupId>\n      <artifactId>hibernate-core</artifactId>\n      <version>5.2.16.Final</version>\n    </dependency>\n    <dependency>\n      <groupId>org.hsqldb</groupId>\n      <artifactId>hsqldb</artifactId>\n      <version>2.5.0</version>\n      <scope>runtime</scope>\n    </dependency>\n    <dependency>\n      <groupId>com.zaxxer</groupId>\n      <artifactId>HikariCP</artifactId>\n      <version>3.2.0</version>\n    </dependency>\n  </dependencies>\n  <build>\n    <sourceDirectory>src</sourceDirectory>\n    <plugins>\n      <plugin>\n        <artifactId>maven-compiler-plugin</artifactId>\n        <version>3.8.0</version>\n        <configuration>\n          <source>1.8</source>\n          <target>1.8</target>\n        </configuration>\n      </plugin>\n    </plugins>\n  </build>\n</project>\n```\n\n**database.properties(needs to be placed in src folder)**\n\n```jsx\n\ndb.driver=org.hsqldb.jdbc.JDBCDriver\ndb.url=jdbc:hsqldb:hsql://localhost/testdb\ndb.username=SA\ndb.password=\nspring.datasource.hikari.connectionTimeout=30000\nspring.datasource.hikari.idleTimeout=600000\nspring.datasource.hikari.maxLifetime=1800000\nspring.datasource.hikari.maximumPoolSize=5\n\n```\n\n**Entity class**\n\n```jsx\n@Entity\n@Table(name = \u201cemployee\u201d)\npublic class Employee {\n@Id\nprivate int employee_Id;\nprivate String employee_Name;\nprivate String email;\nprivate Double salary;\nprivate String gender;\npublic int getEmployee_Id() {\nreturn employee_Id;\n}\npublic void setEmployee_Id(int employee_Id) {\nthis.employee_Id = employee_Id;\n}\npublic String getEmployee_Name() {\nreturn employee_Name;\n}\npublic void setEmployee_Name(String employee_Name) {\nthis.employee_Name = employee_Name;\n}\npublic String getEmail() {\nreturn email;\n}\npublic void setEmail(String email) {\nthis.email = email;\n}\npublic Double getSalary() {\nreturn salary;\n}\npublic void setSalary(Double salary) {\nthis.salary = salary;\n}\npublic String getGender() {\nreturn gender;\n}\npublic void setGender(String gender) {\nthis.gender = gender;\n}\n\n}\n```\n\n**DAO class**\n\n```jsx\n@Configuration\npublic class EmployeeDAO {\n@Autowired\nprivate HibernateTemplate hibernateTemplate;\npublic void save(Employee employee) {\nhibernateTemplate.save(employee);\nSystem.out.println(\u201cEmployee is created\u2026\u201d);\n}\npublic void delete(Employee employee) {\nhibernateTemplate.delete(employee);\nSystem.out.println(\u201cEmployee is deleted\u2026\u201d);\n}\npublic void update(Employee employee) {\nhibernateTemplate.update(employee);\nSystem.out.println(\u201cEmployee is deleted\u2026\u201d);\n}\npublic List<Employee> getAll() {\nreturn hibernateTemplate.loadAll(Employee.class);\n}\n}\n\n\n```\n\n**Service class**\n\n```jsx\n@Service\npublic class EmployeeService {\n@Autowired\nprivate EmployeeDAO employeeDAO;\n@Transactional\npublic void save(Employee employee) {\nemployeeDAO.save(employee);\n}\npublic List<Employee> getAll(){\nreturn employeeDAO.getAll();\n}\n}\n```\n\n**Utils class to support Hibernate and set the database properities to HikariDataSource**\n\n**DataSourceUtil.java**\n\n```jsx\n@Configuration\n@ComponentScan(\u201ccom.praveen\u201d)\n@EnableTransactionManagement\n@PropertySource(\u201cclasspath:database.properties\u201d)\npublic class DataSourceUtil {\n@Value(\u201cdb.driver\u201d)\nprivate String DB_DRIVER;\n@Value(\u201cdb.password\u201d)\nprivate String DB_PASSWORD;\n@Value(\u201cdb.url\u201d)\nprivate String DB_URL;\n@Value(\u201cdb.username\u201d)\nprivate String DB_USERNAME;\n@Bean\npublic DataSource datasource() throws PropertyVetoException {\nHikariDataSource datasource = new HikariDataSource();\ndatasource.setDriverClassName(DB_DRIVER);\ndatasource.setJdbcUrl(DB_URL);\ndatasource.setUsername(DB_USERNAME);\ndatasource.setPassword(DB_PASSWORD);\nreturn datasource;\n}\n}\n```\n\n**HibernateTemplateUtil.java**\n\n```jsx\n@Configuration\npublic class HibernateTemplateUtil {\n@Autowired\nprivate SessionFactory sessionFactory;\n@Bean\npublic HibernateTemplate hibernateTemplate() {\nHibernateTemplate hibernateTemplate = new HibernateTemplate();\nhibernateTemplate.setSessionFactory(sessionFactory);\nreturn hibernateTemplate;\n}\n}\n```\n\n**SesionFactoryUtil.java**\n\n```jsx\n@Configuration\npublic class SesionFactoryUtil {\n@Autowired\nprivate DataSource dataSource;\n@Bean\npublic LocalSessionFactoryBean sessionFactory() {\nLocalSessionFactoryBean localSessionFactoryBean = new LocalSessionFactoryBean();\nlocalSessionFactoryBean.setDataSource(dataSource);\nlocalSessionFactoryBean.setHibernateProperties(properties());\nlocalSessionFactoryBean.setAnnotatedClasses(Employee.class);\nreturn localSessionFactoryBean;\n}\nprivate Properties properties() {\nProperties properties = new Properties();\nproperties.setProperty(\u201chibernate.show_sql\u201d, \u201ctrue\u201d);\nreturn properties;\n}\n}\n\n```\n\n**TransactionManagerUtil.java**\n\n```jsx\n\n@Configuration\npublic class TransactionManagerUtil {\n@Autowired\nprivate SessionFactory sessionFactory;\n@Bean\npublic HibernateTransactionManager transactionManager() {\nHibernateTransactionManager hibernateTransactionManager = new HibernateTransactionManager();\nhibernateTransactionManager.setSessionFactory(sessionFactory);\nreturn hibernateTransactionManager;\n}\n}\n\n```\n\n**Test class**\n\n```jsx\npublic class EmployeeTest {\npublic static void main(String[] args) {\nAnnotationConfigApplicationContext container = new AnnotationConfigApplicationContext(DataSourceUtil.class);\nEmployeeService employeeService = container.getBean(EmployeeService.class);\ncreateEmployee(employeeService);\n    fetchAllEmployeesInfo(employeeService);\ncontainer.close();\n}\nprivate static void createEmployee(EmployeeService employeeService) {\nEmployee employee = new Employee();\nemployee.setEmail(\u201cmnp3pk1@gmail.com.com\u201d);\nemployee.setEmployee_Name(\u201cPraveen\u201d);\nemployee.setGender(\u201cMale\u201d);\nemployee.setSalary(190000.00);\nemployeeService.save(employee);\n}\nprivate static void fetchAllEmployeesInfo(EmployeeService employeeService) {\nList<Employee> empList = employeeService.getAll();\nfor (Employee employee : empList) {\nSystem.out.println(employee.getEmployee_Id() + \u201c\t\u201d + employee.getEmployee_Name() + \u201c\t\u201d + employee.getEmail()\n+ \u201c\t\u201d + employee.getGender() + \u201c\t\u201d + employee.getSalary());\n}\n}\n}\n```\n\n**Output**\n\n```jsx\nAug 10, 2019 1:46:58 AM org.springframework.context.annotation.AnnotationConfigApplicationContext prepareRefresh\nINFO: Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@4ee285c6: startup date [Sat Aug 10 01:46:58 IST 2019]; root of context hierarchy\nSLF4J: Failed to load class \u201corg.slf4j.impl.StaticLoggerBinder\u201d.\nSLF4J: Defaulting to no-operation (NOP) logger implementation\nSLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.\nAug 10, 2019 1:46:59 AM org.hibernate.Version logVersion\nINFO: HHH000412: Hibernate Core {5.2.16.Final}\nAug 10, 2019 1:46:59 AM org.hibernate.cfg.Environment <clinit>\nINFO: HHH000206: hibernate.properties not found\nAug 10, 2019 1:46:59 AM org.hibernate.annotations.common.reflection.java.JavaReflectionManager <clinit>\nINFO: HCANN000001: Hibernate Commons Annotations {5.0.1.Final}\nAug 10, 2019 1:47:00 AM org.hibernate.dialect.Dialect <init>\nINFO: HHH000400: Using dialect: org.hibernate.dialect.HSQLDialect\nEmployee is created\u2026\nHibernate: insert into employee (email, employee_Name, gender, salary, employee_Id) values (?, ?, ?, ?, ?)\n2019-08-10T01:47:01.956+0530  WARN  HHH90000022: Hibernate\u2019s legacy org.hibernate.Criteria API is deprecated; use the JPA javax.persistence.criteria.CriteriaQuery instead\nHibernate: select this_.employee_Id as employee1_0_0_, this_.email as email2_0_0_, this_.employee_Name as employee3_0_0_, this_.gender as gender4_0_0_, this_.salary as salary5_0_0_ from employee this_\n0 Praveen mnp3pk1@gmail.com.com Male 190000.0\n```\n\n\n\n '}}]);