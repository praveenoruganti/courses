(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[199],{768:function(e,n,t){"use strict";t.r(n),n.default=' Traditionally, React has been used to build single-page web apps. However, if you insisted on building a React app with multiple pages or routes, the following process had to be done:\n\n- Tell React to render the page according to the route that the user has navigated to.\n- To make this possible, React had to go out and fetch the page from a server.\n\nImplementing these steps in code used to be a bit tedious. This is where React Router starts to shine.\n\nReact Router library allows us to implement dynamic routing in app.\n\nAlso, React router helps to build applications where there is no page refresh happening while loading data so users don\'t need to wait until the page loads while requesting some information or while updating the webpage.\n\nIt\'s a popular way to build single-page applications in React.\n\nNormally, when we visit any URL, the request goes to the server. Then the server responds with the data which we display on the webpage.\n\nBut this takes time and till the response comes, we might see a blank screen or some flash or loading webpage which is not a great user experience as the user has to wait until the page loads.\n\nInstead, using React Router makes the user experience far better where when we visit any URL, the response generation is handled by the client itself so we get faster results and the user doesn\'t need to wait or see a blank screen till the webpage loads.\n\n## React Router library\n\n[React Router](https://reactrouter.com/) is a library that can be used on the web as well as native applications.\n\nSo there are two libraries - one for the web which is react-router-dom and the other is for native which is react-router-native.\n\nNow we will be exploring all about the react-router-dom library which is used for building web applications in React.\n\nNow lets use the react-router-dom library and develop a sample React JS application.\n\n```jsx\nnpm install react-router-dom\n```\n\n## How to use react-router-dom library?\n\nTo use the react-router-dom library we need to provide a separate route for each component.\n\nSo If we have a /about page then we will display the About component and for /contact page, we will display the Contact component.\n\nLet\'s create Home, About and Contact as functional components inside the index.js file.\n\nTo implement routing, react-router-dom provides BrowserRouter and Route components.\n\nImport them at the top of the index.js file like this:\n\n```jsx\nimport { BrowserRouter, Route } from "react-router-dom";\n```\n\nNow lets define our routes inside the BrowserRouter component in App.js\n\n```jsx\nimport { BrowserRouter, Route } from "react-router-dom";\n\nimport Home from "./components/Home";\nimport About from "./components/About";\nimport Contact from "./components/Contact";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Route path="/" component={Home} exact={true} />\n      <Route path="/about" component={About} />\n      <Route path="/contact" component={Contact} />\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n```\n\nThe **exact** is a boolean prop so when we provide exact={true} as a prop to the Route component, it will display that component of the Route, only when the path matches exactly.\n\nNow lets open these routes in browser\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/reactjs/Home.PNG)\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/reactjs/About.PNG)\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/reactjs/Contact.PNG)\n\n## 404 page\n\nNow, we\'re able to correctly render the Home, About and Contact components.\n\nBut what If, we access a route that does not exist?\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/reactjs/Help_Blank.PNG)\n\nAs you can see, when we access the /help route, we get a blank page because such route does not exist and we don\'t get any error in the console also.\n\nSo when there is no matching route available in the BrowserRouter, the React router will display a blank page.\n\nSo to fix this, we can add a component to be displayed for an invalid route and include all routes in Switch component.\n\nAdd a NotFound component after the Contact component(though the order does not matter) in App.js.\n\n```jsx\nimport { BrowserRouter, Route, Switch } from "react-router-dom";\n\nimport Home from "./components/Home";\nimport About from "./components/About";\nimport Contact from "./components/Contact";\nimport NotFound from "./components/NotFound";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route path="/" component={Home} exact={true} />\n        <Route path="/about" component={About} />\n        <Route path="/contact" component={Contact} />\n        <Route component={NotFound} />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n```\n\nSo the Switch component will act similar to the switch case with a break statement where it checks for matching route and If there is a matching route, then it will render that corresponding component and it will not check other routes for matching.\n\nAnd the last NotFound component Route will act as a default case because we have not provided any path for it. If there is no matching route in all the routes mentioned, then the last mentioned route without path will be executed.\n\nIf you try an invalid route now, you will see the NotFound page being displayed.\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/reactjs/Help_NotFound.PNG)\n\n## Adding Navigation\n\nAs you have seen, we\'re directly accessing the /about, /contact routes from the URL but that\'s not a good user experience.\n\nWe can\'t tell the user to directly access the pages by entering URL. So we need to provide a navigation menu so it\'s easy for the user to navigate between various pages.\n\nCreate a new components folder inside the src folder and add Header.js file inside it with the following content:\n\n```jsx\nconst Header = () => {\n  return (\n    <ul className="navigation-menu">\n      <li>\n        <a href="/">Home</a>\n      </li>\n      <li>\n        <a href="/about">About</a>\n      </li>\n      <li>\n        <a href="/contact">Contact</a>\n      </li>\n    </ul>\n  );\n};\n\nexport default Header;\n```\n\nTo get this component to be displayed on every route, we need to add the Header component inside the BrowserRouter but outside the Switch component like this:\n\n```jsx\nimport { BrowserRouter, Route, Switch } from "react-router-dom";\n\nimport Home from "./components/Home";\nimport About from "./components/About";\nimport Contact from "./components/Contact";\nimport NotFound from "./components/NotFound";\nimport Header from "./components/Header";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Header />\n      <Switch>\n        <Route path="/" component={Home} exact={true} />\n        <Route path="/about" component={About} />\n        <Route path="/contact" component={Contact} />\n        <Route component={NotFound} />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n```\n\nTo make the application look good, add the following contents inside the index.css file:\n\n```\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;\n  padding: 1rem;\n}\n\n.navigation-menu {\n  list-style-type: none;\n  margin-bottom: 1rem;\n}\n\n.navigation-menu li {\n  display: inline-block;\n}\n\n.navigation-menu li a {\n  padding: 0.5rem;\n}\n\n\n```\n\nNow you will see the following screen:\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/reactjs/Navigation.PNG)\n\n## Using Link\n\nAs you have seen above, the page is completely refreshed when clicked on any of the navigation links so it\'s not using client-side routing yet.\n\nThis is because we\'re using anchor tag (<a />) for navigation links.\n\n**React router** provides a Link component to fix this.\n\nNow lets add **Link** component in Header.js as shown below.\n\n```jsx\nimport { Link } from "react-router-dom";\n```\n\nThe Link component accepts a to prop where we specify the path like this:\n\n```jsx\n<Link to="/">Home</Link>\n```\n\nSo make this change for all of the links in the Header.js file.\n\n```jsx\nimport { Link } from "react-router-dom";\n\nconst Header = () => {\n  return (\n    <ul className="navigation-menu">\n      <li>\n        <Link to="/">Home</Link>\n      </li>\n      <li>\n        <Link to="/about">About</Link>\n      </li>\n      <li>\n        <Link to="/contact">Contact</Link>\n      </li>\n    </ul>\n  );\n};\n\nexport default Header;\n```\n\nIf you check the application now, you will see that, there is no page refresh happening while using the navigation.\n\nThis looks more natural now and we get an instant response without a flash of the screen.\n\nThe Link component uses HTML5 history API to achieve the client-side routing functionality without a page refresh.\n\nSo you get an instant response and is the preferred way to do client-side routing.\n\n## Using NavLink\n\nThe navigation looks nice but It will be good to highlight a particular link when we\'re on that page.\n\nSo it\'s easy for the user to identify which page he/she is on If the content of the page is different.\n\nTherefore, React router provides a NavLink component which is similar to Link but it can take an additional activeClassName prop where we specify the name of the CSS class to apply for the link when we\'re on that page.\n\nSo open the index.css file and add the following CSS rule at the end of the file:\n\n```\n.active {\n  font-weight: bold;\n  color: red;\n}\n```\n\nand in the Header.js file, change Link to NavLink in the import statement:\n\n```jsx\nimport { NavLink } from "react-router-dom";\n```\n\nThe NavLink component is used like this:\n\n```jsx\n<NavLink to="/" activeClassName="active">\n  Home\n</NavLink>\n```\n\nMake this change for all the links in the file.\n\nSo your changed Header.js file will look like this now:\n\n```jsx\nimport { NavLink } from "react-router-dom";\n\nconst Header = () => {\n  return (\n    <ul className="navigation-menu">\n      <li>\n        <NavLink to="/" activeClassName="active" exact={true}>\n          Home\n        </NavLink>\n      </li>\n      <li>\n        <NavLink to="/about" activeClassName="active">\n          About\n        </NavLink>\n      </li>\n      <li>\n        <NavLink to="/contact" activeClassName="active">\n          Contact\n        </NavLink>\n      </li>\n    </ul>\n  );\n};\n\nexport default Header;\n```\n\nHere, we have given the activeClassName prop to all the links so when we\'re on that route, the React router will automatically add that class to that link.\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/reactjs/NavLink.PNG)\n '}}]);