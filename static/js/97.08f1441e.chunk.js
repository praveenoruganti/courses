(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[97],{666:function(n,e,s){"use strict";s.r(e),e.default=' ![screenshot of the app](https://praveenoruganti.github.io/courses/images/java/innerclass1.PNG)\n\nInner class means one class which is a member of another class.\n\nThere are basically four types of inner classes in java.\n\n1. **Member Inner class**\n\nIn java member inner class is a class which is defined in class but outside of a method is called member inner class.\n\n**Java Member Inner Class Example**\n\nJava member inner class defined in a class but outside of method of that class.\n\nIn this example, we will create outer class(MemberOuter) and inner class(MemberInner) and declare a private data member in outer class and access this private data member in inner class because inner class can access all the data members and methods in inner class, including private data member and methods.\n\n```jsx\nclass MemberOuter {\n    private int salary = 4000;//private data member of outer class\n    class MemberInner {\n        void get() {\n        System.out.println("salary is "+salary);//access in inner class\n        }\n    }\n    public static void main(String args[]) {\n        MemberOuter mo = new MemberOuter();\n        MemberOuter.MemberInner mi = mo.new MemberInner();\n        mi.get();\n    }\n}\n\n```\n\n**Output**\n\nsalary is 4000\n\n**Note**\n\n- In case of java outer and inner class, Here the java compiler creates two .class files the first is MemberOuter.class and MemberOuter$MemberInner.class.\n- If you want to instantiate inner class, you must have to create the instance of outer class and instance of inner class is created inside the instance of outer class.\n\n2. **Anonymous Inner class**\n\nIn java anonymous inner class is a class that have no name is called anonymous inner class. This class can be instantiated only once. It is usually declared inside a method or block.Anonymous inner class can be created by two ways in java using class(abstract or concrete).\n\n**Java Anonymous Inner Class Example**\n\n```jsx\nabstract class AIExample {\n    abstract void show();\n}\n\nclass Test {\n    public static void main(String args[]) {\n        AIExample a = new AIExample(){\n            void show() {\n            System.out.println("Method of anonymous class");\n            }\n        };\n        a.show();\n    }\n}\n\n```\n\n**Output**\n\nMethod of anonymous class\n\nThe above example is performing anonymous by using abstract class.\n\n**Java Anonymous Inner Class Example \u2013 Using Interface**\n\nThis is simple example of anonymous inner class using interface.\n\n```jsx\n\ninterface AnonymousExmple {\n    void show();\n}\n\nclass Test {\n    public static void main(String args[]) {\n        AnonymousExmple ae = new AnonymousExmple() {\n            public void show() {\n                System.out.println("hello java ");\n            }\n        };\n        ae.show();\n    }\n}\n\n```\n\n**Output**\n\nhello java\n\n3. **Local Inner class**\n\nIn java local inner class is a class which is created inside a method is called local inner class in java. If you want to invokes the method of local inner class, you must instantiate this class inside the method.\n\n**Java Local Inner Class Example**\n\n```jsx\n\nclass LICExample {\n    private int a = 40;\n    void show() {\n        class LICExample1 {\n            void get() {\n            System.out.println("value is "+a);\n            }\n        }\n        LICExample1 l = new LICExample1();\n        l.get();\n    }\n    public static void main(String args[]) {\n        LICExample ll = new LICExample();\n        ll.show();\n    }\n}\n\n\n```\n\n**Output**\n\nvalue is 40\n\n**Java static nested class**\n\n- A static class i.e. created inside a class is called static nested class in java.\n- It cannot access non-static data members and methods.\n- It can be accessed by outer class name.\n- It can access static data members of outer class including private.\n- Static nested class cannot access non-static (instance) data member or method.\n\n```jsx\npublic class TestOuter1 {\n    static int data=30;\n        static class Inner{\n            void msg(){\n            System.out.println("data is "+data);\n            }\n    }\n    public static void main(String args[]){\n        TestOuter1.Inner obj=new TestOuter1.Inner();\n        obj.msg();\n    }\n}\n\n```\n\n**Output**\n\ndata is 30\n\nIn this example, you need to create the instance of static nested class because it has instance method msg(). But you don\u2019t need to create the object of Outer class because nested class is static and static properties, methods or classes can be accessed without object.\n\n**Java static nested class example with static method**\n\nIf you have the static member inside static nested class, you don\u2019t need to create instance of static nested class.\n\n```jsx\npublic class TestOuter2{\n    static int data=30;\n    static class Inner{\n    static void msg(){\n        System.out.println("data is "+data);\n    }\n    }\n    public static void main(String args[]){\n        TestOuter2.Inner.msg();//no need to create the instance of static nested class\n    }\n}\n\n```\n\n**Output**\n\ndata is 30\n\nInner classes are used in below two scenarios\n\n- for providing event handling code to AWT and swing components. Here we use non-static inner classes\n- for providing implementation to an interface and passing that implementation as argument to a method or constructor.\n\nHere we use anonymous inner class. Now a days inner classes are rarely using because AWT and Swing are not using.\n\nAfter Java8 anonymous inner classes are also stopped using because of its alternative concept lambda expression In Java API inner classes are heavily used in Collections. If you check source code of elements() and iterator() methods in Vector, ArrayList, LinkedList.add() and HashMap.entrySet() methods.\n\n\n '}}]);