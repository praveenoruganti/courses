(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[171],{740:function(e,t,n){"use strict";n.r(t),t.default=' **Problem Statement**\n\nIn a distributed environment, web client calls to internal and external webservices can fail due to transient faults such as slow network connections, timeouts or the resources being overcommitted or temporarily unavailable.\n\nNormally, these faults should correct themselves, however at times these faults could take a extended period of time to recover say hours.\n\nFurthermore, in a situation in which a downstream microservice is temporary unvailable, it could lead to a cascade failure where all connected upstream services start to fail or be unresponsive.\n\n**Solution**\nThe Circuit Breaker pattern can prevent an application from repeatedly trying to execute an operation that\'s likely to fail. This allows application to fallback to an alternate processing flow(could be simple as returning a canned error message to the caller), without waiting for the fault to be fixed or threads to be stuck awaiting response.\n\nThe Circuit Breaker Pattern also enables an application to detect whether the fault has been resolved. If the problem appears to have been fixed, the application can try to invoke the operation.\n\nThe Circuit Breaker acts as a proxy for operations that might fail. It monitors the number of recent failures or timeouts that have occured, and use this information to decide whether to allow the operation to proceed, or invoke a fallback method which could return back a failure message.\n\nCircuit Breaker is implemented via finite state maching with three normal states i.e.. CLOSED, OPEN and HALF_OPEN.\n\n**CLOSED**: Normal operation. Failure rate below a threshold.\n**OPEN**: Failure rate above a threshold. Fast-Fail all calls.\n**HALF_OPEN**: Retry if service is up.\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/microservice/circuitbreaker.jpg)\n\n**Circuit Breaker Process**\n\n- If a call fails, increment the number of failed calls by one.\n- If the number of failed calls goes above a certain threshold, open the circuit.\n- If the circuit is open, immediately retun with an error or a default response(Fast-Fail).\n- If the circuit is open and some time has passed, half-open the circuit.\n- If the circuit is half-open and the next call fails, open it again.\n- If the circuit is half-open and the next call succeeds, close it.\n\n**What circuit breaker does?**\n\n- Failing fast\n- Fallback functionality\n- Automatic recovery\n\n**Netflix Hystrix ---\x3e The capacity to recover quickly from failures.**\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/microservice/hystrix.png)\n\n- Hystrix came into picture on 2011.\n- Hystrix is a latency and fault tolerance library designed to isolate the point of access to remote systems, services and 3rd party libraries.\n- Stop cascading failures.\n- Enable resiliency in complex distributed systems where failure is inevitable.\n\nNote: Hystrix is no longer in active development and is currently in maintenance mode. The focus has shifted towards more adpative implementations that react to an application\'s real time performance rather than pre-configured settings. Open Source projects like resilence4j are recommended. The final stable release of Hystric is 1.5.18.\n\n**Features**\n\n- Protecting agains latency and failure from dependencies accessed(typically over the network) via third party client libraries.\n- Preventing cascading failures in complex distribution system.\n- Failing fast and recovering rapidly.\n- Fallback and gracefully degrade when possible.\n- Enable near realtime monitoring, alerting and operational control.\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/microservice/circuitbreaker1.jpg)\n\n**Hystrix integration with Spring Cloud**\n\nSpring Cloud, a library build on top of Spring Boot(itself built upon the Spring Framework), offers a great integration of Hystrix with Spring. It lets one just annotate the desired fallback method while handling the instantiation of the Hystrix command object.\n\n- Add below dependencies for Hystrix, Hystric dashboard and Actuator in pom.xml\n\n```jsx\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>\n</dependency>\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-netflix-hystrix-dashboard</artifactId>\n</dependency>\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-actuator</artifactId>\n</dependency>\n```\n\n- Include @EnableCircuitBreaker and @EnableHystrixDashboard in main class.\n\n```jsx\npackage com.praveen.ordermanagement;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.web.client.RestTemplateBuilder;\nimport org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker;\nimport org.springframework.cloud.client.discovery.EnableDiscoveryClient;\nimport org.springframework.cloud.client.loadbalancer.LoadBalanced;\nimport org.springframework.cloud.netflix.hystrix.dashboard.EnableHystrixDashboard;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.core.env.Environment;\nimport org.springframework.web.client.RestTemplate;\n\nimport io.swagger.v3.oas.models.Components;\nimport io.swagger.v3.oas.models.OpenAPI;\nimport io.swagger.v3.oas.models.info.Contact;\nimport io.swagger.v3.oas.models.info.Info;\nimport io.swagger.v3.oas.models.info.License;\n\n@SuppressWarnings("deprecation")\n@EnableDiscoveryClient\n@EnableHystrixDashboard\n@EnableCircuitBreaker\n@SpringBootApplication\npublic class OrderManagementServiceApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(OrderManagementServiceApplication.class);\n\t}\n\t\n\t@Bean\n\tpublic OpenAPI customOpenAPI(Environment env) {\n\n\t\treturn new OpenAPI().components(new Components()).info(new Info()\n\t\t\t\t.title(env.getRequiredProperty("app.openApiTitle"))\n\t\t\t\t.description(env.getRequiredProperty("app.openApiDescription"))\n\t\t\t\t.contact(new Contact().name("Praveen Oruganti").email("praveenoruganti@gmail.com")\n\t\t\t\t\t\t.url("https://praveenoruganti.github.io"))\n\t\t\t\t.termsOfService("https://praveenoruganti.github.io/#/aboutme")\n\t\t\t\t.license(new License().name("GNU General Public License v3.0").url("https://www.gnu.org/licenses")));\n\t}\n\n\t@LoadBalanced\n\t@Bean\n\tRestTemplate restTemplate(RestTemplateBuilder builder){\n\t\treturn builder.build();\n\t}\n\t\n\n}\n\n```\n\n- Add @HystrixCommand to methods that need circuit breakers and also Configure Hystrix behavior (i.e... configuring parameters).\n\n```jsx\n\n\t@HystrixCommand(fallbackMethod = "fallbackCreateOrder", commandProperties = {\n\t\t\t// https://github.com/Netflix/Hystrix/wiki/Configuration\n\t\t\t@HystrixProperty(name = "execution.isolation.thread.timeoutInMilliseconds", value = "5000"),\n\t\t\t@HystrixProperty(name = "circuitBreaker.requestVolumeThreshold", value = "5"),\n\t\t\t@HystrixProperty(name = "circuitBreaker.errorThresholdPercentage", value = "50"),\n\t\t\t@HystrixProperty(name = "circuitBreaker.sleepWindowInMilliseconds", value = "5000") })\n\tpublic String createOrder(String orderid) throws Exception {\n\t\tMap<String, String> map = new HashMap<>();\n\t\tmap.put("id", orderid);\n\t\tHttpHeaders headers = new HttpHeaders();\n\t\theaders.setAccept(Arrays.asList(MediaType.APPLICATION_JSON));\n\t\tHttpEntity<String> entity = new HttpEntity<>(null, headers);\n\t\tString message = restTemplate.exchange(billingURL, HttpMethod.POST, entity, String.class, map).getBody();\n\t\tlog.info("Response Received from Billing Service", message);\n\t\treturn message;\n\t}\n\n\t@SuppressWarnings("unused")\n\tprivate String fallbackCreateOrder(String orderid) {\n\t\tlog.info("Billing Service is down!!! fallback route enabled...");\n\t\treturn "No Response From Billing Service at this moment. " + " Service will be back shortly - " + new Date();\n\t}\n\n\n\n```\n\n**circuitBreaker.requestVolumeThreshold** This property sets the minimum number of requests in a rolling window that will trip the circuit.\n\n**circuitBreaker.sleepWindowInMilliseconds** This property sets the amount of time, after tripping the circuit, to reject requests before allowing attempts again to determine if the circuit should again be closed.\n\n**circuitBreaker.errorThresholdPercentage** This property sets the error percentage at or above which the circuit should trip open and start short-circuiting requests to fallback logic.\n\n**execution.isolation.thread.timeoutInMilliseconds** This property sets the time in milliseconds after which the caller will observe a timeout and walk away from the command execution. Hystrix marks the HystrixCommand and as a TIMEOUT and performs fallback logic.\n\n**How does circuit breaker works?**\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/microservice/hystrix1.png)\n\nWe need to add the below property in application.yml for enabling the hystrix dashboard.\n\nOpen URL [http://localhost:8090/actuator/hystrix.stream](http://localhost:8090/actuator/hystrix.stream)\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/microservice/hystrix2.png)\n\nHit requests POST [http://localhost:8090/api/v1_0/order](http://localhost:8090/api/v1_0/order)\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/microservice/hystrix3.png)\n\nNow bring down the praveenoruganti-billing-service and hit requests POST [http://localhost:8090/api/v1_0/order](http://localhost:8090/api/v1_0/order)\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/microservice/hystrix4.png)\n\nNow bring up the praveenoruganti-billing-service and hit requests POST [http://localhost:8090/api/v1_0/order](http://localhost:8090/api/v1_0/order)\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/microservice/hystrix5.png)\n\n**Resilence4j**\n\nResilence4j is a lightweight, easy to use fault tolerance library inspired by Netflix Hystrix but designed for Java 8 and functional programming. Resilence4j provides higher order functions(decorators) to enhance any functional interface, lambda expression or method reference with a Circuit Breaker, Rate Limiter, Retry or Bulkhead. You can stack more than one decorator on any functional interface, lambda expression or method reference. The advantage is that you have the choice to select the decorators you need and nothing else.\n\n**Note** Resilence4j supports RateLimiter, retry and Bulk head patterns apart from Circuit Breaker.\n\n '}}]);