(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[105],{674:function(e,n,a){"use strict";a.r(n),n.default=' Only one thread to access a resource at once.\n\nFor Example, when a client is accessing a file, no one else should have access the same file at the same time.\n\nMutex is the Semaphore with an access count of 1. Consider a situation of using lockers in the bank. Usually the rule is that only one person is allowed to enter the locker room.\n\n**Code**\n\n```jsx\n\npublic class MutexExample {\n    // max 1 people static Semaphore semaphore = new Semaphore(1);\n    static class MyLockerThread extends Thread {\n        String name = "";\n        MyLockerThread(String name) {\n         this.name = name;\n        }\n        public void run() {\n            try {\n            System.out.println(name + " : acquiring lock\u2026");\n            System.out.println(name + " : available Semaphore permits now: " + semaphore.availablePermits());\n            semaphore.acquire();\n            System.out.println(name + " : got the permit!");\n                try {\n                    for (int i = 1; i <= 5; i++) {\n                    System.out.println(name + " : is performing operation " + i + ", available Semaphore permits : " + semaphore.availablePermits());\n                    // sleep 1 second Thread.sleep(1000);\n                    }\n                } finally {\n                    // calling release() after a successful acquire()\n                    System.out.println(name + " : releasing lock\u2026");\n                    semaphore.release();\n                    System.out.println(name + " : available Semaphore permits now: " + semaphore.availablePermits());\n                }\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    public static void main(String[] args) {\n        System.out.println("Total available Semaphore permits : " + semaphore.availablePermits());\n        MyLockerThread t1 = new MyLockerThread("A"); t1.start();\n        MyLockerThread t2 = new MyLockerThread("B"); t2.start();\n        MyLockerThread t3 = new MyLockerThread("C"); t3.start();\n        MyLockerThread t4 = new MyLockerThread("D"); t4.start();\n        MyLockerThread t5 = new MyLockerThread("E"); t5.start();\n        MyLockerThread t6 = new MyLockerThread("F"); t6.start();\n    }\n\n}\n\n```\n\n\n '}}]);