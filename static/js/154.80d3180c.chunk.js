(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[154],{723:function(e,t,n){"use strict";n.r(t),t.default=" ## Select HTML Elements\n\n- **getElementById('html-element-id')**\n\n  getElementById is a DOM Method. It accepts the HTML element id and returns the HTML element matching that Id.\n  For example, document.getElementById('topbar')\n\n  if no elements matches the id then it returns null.\n\n- **getElementsByClassName('html-class-string')**\n\n  getElementsByClassName is a DOM method. It accepts the HTML class string and returns all the HTML elements matching that class.\n  For example, document.getElementsByClassName('menu-item')\n\n  if no elements match the class then it returns an empty array\n\n- **getElementsByTagName('html-tag-string')**\n\n  getElementsByTagName is a DOM method. It accepts the HTML tag string and returns all the HTML elements matching that tag.\n  For example, document.getElementsByTagName('span')\n\n  if no elements match the tag name then it returns an empty array.\n\n**Query Selectors**\n\nQuery Selectors allow you to use CSS selectors to select HTML elements. It is the new way in JavaScript to select HTML elements.\n\nThere are 2 such selectors:\n- **querySelector('css-selector-string')**\n\n  It accepts the CSS Selector string and returns only the first HTML element matching the query.\n  For example, document.querySelector('#topbar span')\n\n  If no elements match the selector string then it returns null.\n\n- **querySelectorAll('css-selector-string')**\n\n  It accepts the CSS Selector string and returns all the HTML elements matching the query.\n  For example, document.querySelectorAll('#topbar span')\n\n  If no elements match the selector string then it returns an empty array.\n\n**Note**\n\n- Query Selectors are not supported by IE 7 and below version\n- getElementById is faster than querySelector\n\nYou can check out the [Demo](https://praveenoruganti.github.io/courses/demo/js/HTMLElements/Select%20HTML%20Elements)\n\n## Update HTML Content and Attributes using JavaScript\n\nWe can update the content of HTML element by selecting the element with innerHTML property as shown below.\n```jsx\nlet countdownElement = document.getElementById(\"countdown\");\nlet initialCountdownVal = countdownElement.innerHTML;\n```\n\nWe can update the attribute by selecting the HTML element and name of the attribute as shown below\n```jsx\nlet bgImageElement = document.getElementById(\"bg-image\");\nbgImageElement.src = backImgPath;\n```\n\n\n## Update Styles of HTML Elements\n**Syntax**\n\n```jsx\nlet selectedElement = getElementById('selector')// querySelector('selector)\nselectedElement.style.{propertyName}= value;\n```\n**Example**\n\n```jsx\nselectedElement.style.width='300px'\n```\n\nYou can check out the [Demo](https://praveenoruganti.github.io/courses/demo/js/HTMLElements/OOPS)\n\n# Add/Remove Classes using JavaScript\n\nThe modern browsers give us access to a property called 'classList'. This classList holds all the classes of an HTML element.\n\n**Add Class:**\n\nWe can us the method add().\n\nSyntax: selectedElement.classList.add('MyClass');\n\n**Example**\n\n```jsx\nlet selectedElement= getElementById('selector'); // querySelector('selector')\nselectedElement.classList.add('show');\n```\n**Remove Class:**\n\nWe can us the method remove().\n\nSyntax: selectedElement.classList.remove('MyClass');\nFor example,\n```jsx\nlet selectedElement= getElementById('selector'); // querySelector('selector')\nselectedElement.classList.remove('show');\n```\n\n## Get Element styles values using JavaScript\n\nThere are two ways we can get Element style value:\nlet selectedElement= getElementById('selector'); // querySelector('selector')\n**Inline Styles:**\n\nSyntax: selectedElement.style.{inline-style-property}\nFor example,\n```jsx\nselectedElement.style.width\n```\n**CSS File:**\n\nSyntax: window.getComputedStyle(selectedElement).{style-property-name}\nFor example,\n```jsx\nwindow.getComputedStyle(selectedElement).width\n```\n\n## Create HTML Elements\n\nTo add a new element to the HTML DOM, we need to create the element (element node) first, and then append it to an existing element.\n\nFor example,\n\n```HTML\n<ul id=\"todo-list\">\n    <li id=\"item1\">List Item 1</li>\n    <li id=\"item2\">List Item 2</li>\n</ul>\n```\n\n```jsx\nlet list = document.getElementById(\"todo-list\");\nlet newListElement = document.createElement(\"li\");\nlet textNode = document.createTextNode(\"List Item 3\");\nnewListElement.appendChild(textNode);\nnewListElement.id = \"item3\";\nlist.appendChild(newListElement);\n\n```\n\n**Creating HTML Elements using insertBefore()**\n\nThe appendChild() method in the previous example, appended the new element as the last child of the parent.\n\nIf you don't want that you can use the insertBefore() method:\n\nFor example,\n\n\n```HTML\n<ul id=\"todo-list\">\n    <li id=\"item1\">List Item 1</li>\n    <li id=\"item2\">List Item 2</li>\n</ul>\n```\n\n```jsx\nlet list = document.getElementById(\"todo-list\");\nlet firstItem = document.getElementById(\"item1\");\nlet beforeElement = document.createElement(\"li\");\nlet beforeTextNode = document.createTextNode(\"List Item 0\");\nbeforeElement.appendChild(beforeTextNode);\nconsole.log(beforeElement);\nbeforeElement.id = \"item0\";\n// For adding Element before First Item\nlist.insertBefore(beforeElement, firstItem);\n\n```\n**Update HTML Element**\n\nWe need to use replaceChild() method for updating the HTML Element.\nFor example,\n```jsx\n let firstElement = list.firstElementChild;\n  let newListElement = createNewNode();\n  if (firstElement) {\n    list.replaceChild(newListElement, firstElement);\n  } else {\n    alert(\"There is no Todo Item to update\");\n  }\n```\n\n**Delete HTML Element**\n\nWe need to use removeChild() method for deleting the HTML Element.\nFor example,\n```jsx\nlet firstElement = list.firstElementChild;\n  if (firstElement) {\n    list.removeChild(firstElement);\n  } else {\n    alert(\"There is no Todo Item to delete\");\n  }\n```\n\nYou can check out the  Demo for [Todo Items](https://praveenoruganti.github.io/courses/demo/js/HTMLElements/Todo) for Creating, Updating and Deleting HTML elements.\n\nYou can also check out the Demo for [Counter](https://praveenoruganti.github.io/courses/demo/js/HTMLElements/Counter)\n\nYou can also check out the Demo for [Sorting](https://praveenoruganti.github.io/courses/demo/js/HTMLElements/Sorting)\n\n\n "}}]);