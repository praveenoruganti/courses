(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[118],{687:function(e,n,a){"use strict";a.r(n),n.default=" Java 8 changed the way of writing the code i.e.. Functional Programming.\n\nFunctional programming is a way of organizing code that makes applications more scalable and maintainable. By utilizing the core concepts of immutability, data-function separation, and first-class functions, programmers can write better code. \n\n\nHere with the Java 8 Features.\n\n- **Lambda Expressions** - a new language feature allowing us to treat actions as objects\n\n- **Method reference** - enable us to define Lambda Expressions by referring to methods directly using their names\n\n- **Optional** - special wrapper class used for expressing optionality\n\n- **forEach** - iterate collections\n\n- **Function,Predicate, Supplier and Consumer Functional Interface** - an interface which contains only one abstract method but can have multiple default and static method is called Functional Interface.\n\n- **Pipelines and Streams** - Stream API is used to process of collection of objects.\n\n- **Date and Time API** - an improved, immutable JodaTime-inspired Date API\n\n  New date-time API is introduced in Java 8 to overcome the following drawbacks of old date-time API :\n\n  1. Not thread safe : Unlike old java.util.Date which is not thread safe the new date-time API is immutable and doesn\u2019t have setter methods.\n\n  2. Less operations : In old API there are only few date operations but the new API provides us with many date operations.\n\n- **Default and static Methods in interface**\n\n\n "}}]);