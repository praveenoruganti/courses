(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[51],{620:function(t,e,n){"use strict";n.r(e),e.default=' It is a type of Creational Design Pattern.\n\nPrototype pattern is used when the Object creation is a costly affair and requires a lot of time and resources and you have a similar object already existing. So this pattern provides a mechanism to copy the original object to a new object and then modify it according to our needs. This pattern uses java cloning to copy the object.\n\nIt would be easy to understand this pattern with an example, suppose we have an Object that loads data from database. Now we need to modify this data in our program multiple\ntimes, so it\'s not a good idea to create the Object using new keyword and load all the data again from database. So the better approach is to clone the existing object into a new object and then do the data manipulation.\n\nPrototype design pattern mandates that the Object which you are copying should provide the copying feature. It should not be done by any other class. However whether to use\nshallow or deep copy of the Object properties depends on the requirements and it\'s a design decision.\n\nOne example of how this can be useful is if an original object is created with a resource such as a data stream that may not be available at the time that a clone of the object is needed. Another example is if the original object creation involves a significant time commitment, such as reading data from a database or over a network.\n\nNormally in Java, if you\'d like to use cloning (i.e., the prototype pattern), you can utilize the clone() method and the Cloneable interface. By default, clone() performs a shallow copy. Serializable can be used to simplify deep copying.\n\nHowever, we can implement our own prototype pattern. To do so, we\'ll create a Prototype interface that features a doClone() method.\n\n\n```jsx\npackage com.praveen.designpatterns.creational.prototype;\n\npublic class Car implements Cloneable {\n\n\tprivate String type;\n\tprivate String model;\n\tprivate String color;\n\tprivate int speed;\n\n\tpublic Car() {\n\n\t}\n\n\tpublic Car clone() {\n\t\treturn new Car(type, model, color, speed);\n\t}\n\n\tpublic Car(String type, String model, String color, int speed) {\n\t\tsuper();\n\t\tthis.type = type;\n\t\tthis.model = model;\n\t\tthis.color = color;\n\t\tthis.speed = speed;\n\t}\n\n\tpublic String getType() {\n\t\treturn type;\n\t}\n\n\tpublic void setType(String type) {\n\t\tthis.type = type;\n\t}\n\n\tpublic String getModel() {\n\t\treturn model;\n\t}\n\n\tpublic void setModel(String model) {\n\t\tthis.model = model;\n\t}\n\n\tpublic String getColor() {\n\t\treturn color;\n\t}\n\n\tpublic void setColor(String color) {\n\t\tthis.color = color;\n\t}\n\n\tpublic int getSpeed() {\n\t\treturn speed;\n\t}\n\n\tpublic void setSpeed(int speed) {\n\t\tthis.speed = speed;\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn "Car [type=" + type + ", model=" + model + ", color=" + color + ", speed=" + speed + "]";\n\t}\n\n}\n\n```\n\n```jsx\npackage com.praveen.designpatterns.creational.prototype;\n\npublic class ProtoTypeTest {\n\n\tpublic static void main(String[] args) {\n\n\t\tCar c1 = new Car("Ford", "Focus", "red", 100);\n\t\tCar c2 = c1.clone();\n\t\tc2.setSpeed(200); // speed changed to 200\n\t\tSystem.out.println(c1);\n\t\tSystem.out.println(c2);\n\n\t}\n\n}\n\n```\n\n**Output**\n\n```jsx\nCar [type=Ford, model=Focus, color=red, speed=100]\nCar [type=Ford, model=Focus, color=red, speed=200]\n```\n\n### When to Use\n\n- When the classes to instantiate are specified at run-time, for example, by dynamic loading; or\n- To avoid building a class hierarchy of factories that parallels the class hierarchy of products; or\n- When instances of a class can have one of only a few different combinations of state. It may be more convenient to install a corresponding number of prototypes and clone them\nrather than instantiating the class manually, each time with the appropriate state. \n\n\n### Prototype Design Pattern Example in JDK\n\n- java.lang.Object#clone() '}}]);