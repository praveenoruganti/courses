(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[158],{727:function(e,n,t){"use strict";t.r(n),n.default=' A\xa0JSP life cycle\xa0can be defined as the entire process from its creation till the destruction which is similar to a Servlet life cycle with an additional step which is required to translate a JSP into Servlet.\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/jsp/jsplifecycle.jpg)\n\n`1. Translation of the JSP Page`\n\nDemo.jsp\n\n\n```jsx\n<%@ page language="java" contentType="text/html; charset=ISO-8859-1"\n    pageEncoding="ISO-8859-1"%>\n<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">\n<html>\n<head>\n<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">\n<title>Demo JSP</title>\n</head>\n<body>\n<%!\nint demovar=0;%>\nCount is:\n<% out.println(++demovar); %>\n</body>\n</html>\n```\n\nJSP converted to demo_jsp.java Servlet\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/jsp/demojspservlet.jpg)\n\n`2.Compilation of the JSP Page`\n\n- The generated java servlet file is compiled into java servlet class\n- The translation of java source page to its implementation class can happen at any time between the deployment of JSP page into the container and processing of the JSP page.\n- In the above pictorial description demo_jsp.java is compiled to a class file demo_jsp.class\n\n`3.Classloading`\n\n- Servlet class that has been loaded from JSP source is now loaded into the container\n\n`4.Instantiation`\n\n- In this step the object i.e. the instance of the class is generated.\n- The container manages one or more instances of this class in the response to requests and other events. Typically, a JSP container is built using a servlet container. A JSP container is an extension of servlet container as both the container support JSP and servlet.\n- A JSPPage interface which is provided by container provides init() and destroy () methods.\n- There is an interface HttpJSPPage which serves HTTP requests, and it also contains the service method.\n\n`5.Initialization`\n\n```jsx\npublic void jspInit(){\n//initializing the code\n}\n```\n\n- _jspinit() method will initiate the servlet instance which was generated from JSP and will be invoked by the container in this phase.\n- Once the instance gets created, init method will be invoked immediately after that\n- It is only called once during a JSP life cycle, the method for initialization is declared as shown above\n\n`6.Request processing`\n\n```jsx\nvoid _jspservice(HttpServletRequest request HttpServletResponse response){\n\t//handling all request and responses\n}\n```\n\n- _jspservice() method is invoked by the container for all the requests raised by the JSP page during its life cycle\n- For this phase, it has to go through all the above phases and then only service method can be invoked.\n- It passes request and response objects\n- This method cannot be overridden\n- The method is shown above: It is responsible for generating of all HTTP methods i.e GET, POST, etc.\n\n`7.Destroy`\n\n```jsx\npublic void _jspdestroy(){\n//all clean up code\n}\n```\n\n- _jspdestroy() method is also invoked by the container\n- This method is called when container decides it no longer needs the servlet instance to service requests.\n- When the call to destroy method is made then, the servlet is ready for a garbage collection\n- This is the end of the life cycle.\n- We can override jspdestroy() method when we perform any cleanup such as releasing database connections or closing open files.\n\n\n`Running JSP file in Tomcat webserver`\n\nPlace the above demo.jsp in WebContent folder and in web.xml(present in WEB-INF) make the below changes.\n\n```jsx\n<?xml version="1.0" encoding="UTF-8"?>\n<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n\txmlns="http://xmlns.jcp.org/xml/ns/javaee"\n\txsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"\n\tid="WebApp_ID" version="3.1">\n\t<display-name>praveenjspsamples</display-name>\n\t<servlet>\n\t\t<servlet-name>DemoJSP</servlet-name>\n\t\t<jsp-file>/demo.jsp</jsp-file>\n\t</servlet>\n\t<servlet-mapping>\n\t\t<servlet-name>DemoJSP</servlet-name>\n\t\t<url-pattern>/demo</url-pattern>\n\t</servlet-mapping>\n</web-app>\n```\n\nNow open [http://localhost:8080/praveenjspsamples/demo](http://localhost:8080/praveenjspsamples/demo)\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/jsp/jspdemo.jpg)\n\n '}}]);