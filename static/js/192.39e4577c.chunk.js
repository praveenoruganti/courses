(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[192],{761:function(t,e,n){"use strict";n.r(e),e.default=' React useState() hook manages the state in functional React components. In class components this.state holds the state, and you invoke the special method this.setState() to update the state.\n\n- It declares a state variable.\n- It is a function that accepts a single argument, initial state for the instance of the component.\n- returns a pair of values, First is the state and the second is a function we call to update the state.\n\nFor example,\n\n```jsx\nimport React, { useState } from "react";\n\nfunction Example() {\n  // Declare a new state variable, which we\'ll call "count"\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>Click me</button>\n    </div>\n  );\n}\n```\n\n**Note**:\n\n- The state variable is immutable and readonly.\n- useState() hook and this.setState() (inside class components) update the state variable and the component output asynchronously.\n- Calling the setter function setValue(newValue) of useState() hook (or this.setState() of class components) doesn\'t exactly update the state, but rather schedules a state update.\n '}}]);