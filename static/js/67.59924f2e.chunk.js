(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[67],{636:function(t,n,i){"use strict";i.r(n),n.default=" Quicksort is a sorting algorithm, which is leveraging the divide-and-conquer principle. It has an average O(n log n) complexity and it\u2019s one of the most used sorting algorithms, especially for big data volumes.\n\nIt's important to remember that Quicksort isn't a stable algorithm. A stable sorting algorithm is an algorithm where the elements with the same values appear in the same order in the sorted output as they appear in the input list.\n\n- We choose an element from the list, called the pivot. We'll use it to divide the list into two sub-lists.\n- We reorder all the elements around the pivot \u2013 the ones with smaller value are placed before it, and all the elements greater than the pivot after it. After this step, the pivot is in its final position. This is the important partition step.\n- We apply the above steps recursively to both sub-lists on the left and right of the pivot.\n\nLet's start coding for quick sort,\n\n```jsx\npackage com.praveen.sort;\n\npublic class QuickSort {\n\tpublic static void main(String[] args) {\n\t\tint[] num = { 90, 24, 46, 35, 32 };\n\t\tquickSort(num, 0, num.length-1);\n\t\t// After sorting\n\t\tfor (int i : num) {\n\t\t\tSystem.out.print(i + \" \");\n\t\t}\n\t}\n\n\tpublic static void quickSort(int arr[], int begin, int end) {\n\t    if (begin < end) {\n\t        int partitionIndex = partition(arr, begin, end);\n\n\t        quickSort(arr, begin, partitionIndex-1);\n\t        quickSort(arr, partitionIndex+1, end);\n\t    }\n\t}\n\n\tprivate static int partition(int arr[], int begin, int end) {\n\t    int pivot = arr[end];\n\t    int i = (begin-1);\n\n\t    for (int j = begin; j < end; j++) {\n\t        if (arr[j] <= pivot) {\n\t            i++;\n\n\t            int swapTemp = arr[i];\n\t            arr[i] = arr[j];\n\t            arr[j] = swapTemp;\n\t        }\n\t    }\n\n\t    int swapTemp = arr[i+1];\n\t    arr[i+1] = arr[end];\n\t    arr[end] = swapTemp;\n\n\t    return i+1;\n\t}\n}\n\n```\n\n**Output**\n```jsx\n24 32 35 46 90\n``` "}}]);