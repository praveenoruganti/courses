(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[130],{699:function(e,t,n){"use strict";n.r(t),t.default=' New date time API is introduced in Java 8 to overcome the following drawbacks of old date-time API :\n\n- Not thread safe : Unlike old java.util.Date which is not thread safe the new date-time API is immutable and doesn\u2019t have setter methods.\n- Less operations : In old API there are only few date operations but the new API provides us with many date operations.\n\nJava 8 under the package java.time introduced a new date-time API, most important classes among them are\n\n- Local : Simplified date-time API with no complexity of timezone handling.\n- Zoned : Specialized date-time API to deal with various timezones.\n- LocalDate/LocalTime: LocalDate and LocalTime Classes is introduce where timezones are not required.\n- Zone DateTime API: It is used when time zone is to be\n- ChronoUnit Enum: ChronoUnit enum is added in the new Java 8 API which is Used to represent day, month, etc and it is available in java.time.temporal package.\n\n```jsx\n\npublic class NewDateTimeApiExamples {\n\n    public static void main(String args[]) {\n\n        // current date and time\n        LocalDateTime currentTime = LocalDateTime.now();\n        System.out.println("Current DateTime: " + currentTime);\n\n        LocalDate date1 = currentTime.toLocalDate();\n        System.out.println("date1: " + date1);\n\n        Month month = currentTime.getMonth();\n        int day = currentTime.getDayOfMonth();\n        int seconds = currentTime.getSecond();\n\n        System.out.println("Month: " + month + " day: " + day + " seconds: " + seconds);\n\n        // current date and time\n        ZonedDateTime date = ZonedDateTime.parse("2019-07-28T10:14:20+06:30[Asia/Kolkata]");\n        System.out.println("date: " + date);\n\n        // Get the current date\n        LocalDate currentDate = LocalDate.now();\n        System.out.println("Current date: " + currentDate);\n\n        // add 1 week to the current date\n        LocalDate nextWeek = currentDate.plus(1, ChronoUnit.WEEKS);\n        System.out.println("Next week: " + nextWeek);\n\n        // add 2 month to the current date\n        LocalDate nextMonth = currentDate.plus(2, ChronoUnit.MONTHS);\n        System.out.println("Next month: " + nextMonth);\n\n        // add 3 year to the current date\n        LocalDate nextYear = currentDate.plus(3, ChronoUnit.YEARS);\n        System.out.println("Next year: " + nextYear);\n\n        // add 10 years to the current date\n        LocalDate nextDecade = currentDate.plus(1, ChronoUnit.DECADES);\n        System.out.println("Next ten year: " + nextDecade);\n\n        // comparing dates\n        LocalDate date2 = LocalDate.of(2014, 1, 15);\n        LocalDate date3 = LocalDate.of(2019, 7, 28);\n\n        if (date2.isAfter(date3)) {\n        System.out.println("date2 comes after date3");\n        } else {\n        System.out.println("date2 comes before date3");\n        }\n\n        // check Leap year\n        if (date1.isLeapYear()) {\n        System.out.println("This year is Leap year");\n        } else {\n        System.out.println(date1.getYear() + " is not a Leap year");\n        }\n\n        //How many days, month between two dates\n        LocalDate newDate = LocalDate.of(2019, Month.DECEMBER, 14);\n        Period periodTonewDate = Period.between(date1, newDate);\n        System.out.println("Months left between today and newDate : " + periodTonewDate.getMonths() );\n\n    }\n\n}\n\n```\n\n**Output**\n\n```jsx\nCurrent DateTime: 2019-07-28T02:26:31.367\ndate1: 2019-07-28\nMonth: JULY\nday: 28\nseconds: 31\ndate: 2019-07-28T10:14:20+05:30[Asia/Kolkata]\nCurrent date: 2019-07-28\nNext week: 2019-08-04\nNext month: 2019-09-28\nNext year: 2022-07-28\nNext ten year: 2029-07-28\ndate2 comes before date3\n2019 is not a Leap yearMonths left between today and newDate : 4\n```\n\n '}}]);