(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[155],{724:function(e,n,t){"use strict";t.r(n),n.default=' When some action happens in the webpage, that action is called event.\n\nFor example,\n- The user clicking the mouse over a certain element.\n- The user hovering the cursor over a certain element.\n- The user pressing a key on the keyboard.\n- The user resizing or closing the browser window.\n- A webpage finished loading.\n- A form being submitted.\n- A video played, or paused, or finishing play.\n\n## How to handle events in JavaScript?\n\nThere are two ways we can handle events:\n\n```jsx\nlet selectedElement= getElementById(\'selector\'); // querySelector(\'selector)\n```\n**Method1: Using Event Properties**\n\nSyntax: selectedElement.{eventProperty}= function(){}\n\nFor example,\n```jsx\nselectedElement.onclick= function(){}\n```\n**Method2: Using addEventListener()**\n\nSyntax: selectedElement.addEventListener({eventName}, function(){})\n\nFor example,\n```jsx\nselectedElement.addEventListener(\'click\',function(){})\n```\nYou can check out the Demo for [Color Flipper](https://praveenoruganti.github.io/courses/demo/js/Events/Color%20Flipper) based on button click event.\n\n**Different phases of events - capture, target, bubble**\n\nWhen an event moves through the DOM - whether bubbling up or trickling down - it is called event propagation. The event propagates through the DOM tree.\n\nEvents happen in two phases: the bubbling phase and the capturing phase.\n\nIn capture phase, also called the trickling phase, the event "trickles down" to the element that caused the event.\n\nIt starts from the root level element and handler, and then propagates down to the element. The capture phase is completed when the event reaches the target.\n\nIn the bubble phase, the event is "bubbled" up to the DOM tree. It is first captured and handled by the innermost handler (the one that is closest to the element on which the event occurred). It then bubbles up (or propagates up) to the higher levels of DOM tree, further up to its parents, and then finally to its root.\n\nOne thing to note is that, whether you register an event handler in either phase, both phases ALWAYS happen. All events bubble by default.\n\nYou can register event handlers for either phase, bubbling or capturing, by using the function addEventListener(type, listener, useCapture). If useCapture is set to false, the event handler is in the bubbling phase. Otherwise it\'s in the capture phase.\n\nThe order of the phases of the event depends on the browser.\n\nLets see Form, Keyboard and Mouse Events now.\n## Form Events\n\nHere with the Form Events\n- change: The change event is triggered when the content of an input field is changed or when the user selects a value from the dropdown etc.\n- focus: The focus event is triggered when the input field is focused by the user\n- blur: The blue event is triggered when the input field loses focus.\n- submit: The submit event is triggered when the submit button is clicked by the user.\n\nFor example,\n\n```jsx\n\nlet username = document.getElementById("username");\nlet loginForm = document.getElementById("login-form");\nusername.addEventListener("input", (event) => {\n  let currentValue = event.target.value;\n  currentValue = currentValue.toUpperCase();\n  console.log(currentValue);\n  username.value = currentValue;\n});\n\nusername.addEventListener("focus", () => {\n  console.log("Element Focussed");\n});\n\nusername.addEventListener("blur", () => {\n    console.log("Element Lost Focus");\n  });\n\n  loginForm.addEventListener("submit", (event) => {\n    alert("Submit Button Clicked");\n    event.preventDefault();\n  });\n\n```\n\nYou can check out the Demo for [Form Events](https://praveenoruganti.github.io/courses/demo/js/Events/Form%20Events)\n\n\n## Keyboard Events\n\nThe keyboard events are triggered when the user clicks a key from the keyboard.\n\nThere are 3 keyboard events:\n- keydown: It is triggered when any key pressed on the keyboard.\n- keyup: It is triggered when any key is released after it\'s keydown event.\n- keypress: It is triggered when any key except Shift, Function, capsLock is in pressed position.\n\nYou can check out the Demo for [Form Events](https://praveenoruganti.github.io/courses/demo/js/Events/Keyboard%20Events)\n\nYou can also check out Demo for [Drum Kit](https://praveenoruganti.github.io/js/praveenoruganti-drum-kit-js/Demo/)\n\n## Mouse Events\n\nThe Mouse events are triggered when the different mouse keys are pressed and/or released.\n\nThese are the mouse events available:\n- mousedown: Mousedown event is triggered when either the left or right(or middle) mouse key is pressed on the HTML element.\n- mouseup: Mouseup event is triggered when either the left or right(or middle) mouse key is released after the mousedown event.\n- click: Click event is triggered when the left mouse button is pressed and released on the same HTML element, it requires the mousedown and mouseup event to happen before click event.\n- dblclick: DoubleClick event is triggered when the left mouse button is clicked twice on the same HTML element.\n- mouseover: Mouse over event is triggered when the mouse pointer enters the HTML element, and its child elements.\n- mouseenter: Mouse enter event is triggered when the mouse pointer enters the HTML element.\n- mousemove: Mouse move event is triggered every time the mouse pointer is moved over the HTML element.\n\nFor example,\n\n```jsx\nlet btn = document.getElementById("top-btn");\n\nbtn.addEventListener("mousedown", () => {\n  console.log("Mouse Down Event");\n});\n\nbtn.addEventListener("mouseup", () => {\n  console.log("Mouse Up Event");\n});\n\nbtn.addEventListener("click", () => {\n  console.log("Click Event");\n});\n\nbtn.addEventListener("dblclick", () => {\n  console.log("Double Click Event");\n});\n\nbtn.addEventListener("mouseover", () => {\n  console.log("Mouse Over Event");\n});\n\nbtn.addEventListener("mousemove", () => {\n  console.log("Mouse Move Event");\n});\n\n```\n\nYou can check out the Demo for [Mouse Events](https://praveenoruganti.github.io/courses/demo/js/Events/Mouse%20Events)\n\nYou can also check out the Demo for [Magic Color Changer](https://praveenoruganti.github.io/courses/demo/js/Events/Magic%20Color%20Changer)\n\n**Note**\n\nYou can also refer the [documentation](https://developer.mozilla.org/en-US/docs/Web/Events) to learn more about events.\n\n\n '}}]);