(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[120],{689:function(e,n,t){"use strict";t.r(n),n.default=' - Functional Interface method can be mapped to our specified method by using :: (double colon) operator. This is called method reference.\n- Our specified method can be either static method or instance method.\n- Functional Interface method and our specified method should have same argument types, except this the remaining things like returntype, methodname, modifiersetc are not required to match.\n\nSyntax:\n\nif our specified method is static method, Classname::methodName\n\nif the method is instance method, Objref::methodName\n\n\nFunctional Interface can refer lambda expression and Functional Interface can also refer method reference. Hence lambda expression can be replaced with method reference. Hence method reference is alternative syntax to lambda expression.\n\n\nLet\'s see an example,\n\n\n```jsx\n\n@FunctionalInterface\ninterface MethodReference {\n    void display();\n}\n\npublic class StaticMethodReferenceDemo {\n\nstatic void display() {\n    System.out.println("display");\n}\n\npublic static void main(String args[]) {\n\n    /* With Methodreference */\n    MethodReference methodReference = StaticMethodReferenceDemo::display;\n    methodReference.display();\n\n    /* With Lambda */\n    MethodReference methodReferenceLambda = () -> StaticMethodReferenceDemo.display();\n    methodReferenceLambda.display();\n}\n\n}\n\n```\n\nRule1: Method names can be different.\n\nRule2: Parameter should be same in both methods.\n\nRule3: Method reference can be used in functional interface only.\n\nRule4: Return type of both methods can be different.\n\n\nWe can say  MethodReference is alternative syntax for Lambda Expression.\n\n```jsx\n@FunctionalInterface\ninterface MethodReferenceNS {\n    void display();\n}\n\npublic class NonStaticMethodReferenceDemo {\n\nvoid display() {\n    System.out.println("display");\n}\n\npublic static void main(String args[]) {\n\n    NonStaticMethodReferenceDemo obj = new NonStaticMethodReferenceDemo();\n\n    /* With Methodreference */\n    MethodReferenceNS methodReference = obj::display;\n    methodReference.display();\n\n    /* With Lambda */\n    MethodReferenceNS methodReferenceLambda = () -> obj.display();\n    methodReferenceLambda.display();\n}\n\n}\n\n```\n\nFor non-static method reference we just need to create an object and call the method where as for static method reference you  can use Class Name directly.\n\n\nWe can use :: ( double colon )operator to refer constructors also.\n\nSyntax: classname :: new\n\n '}}]);