(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[110],{679:function(e,t,n){"use strict";n.r(t),t.default=' If we want to represent a group of individual object as a single entities then we should go for collection.\n\n**Difference between Array and Collection**\n\n**Array**\n\n- Array are fixed in size.\n- Not have proper memory management.\n- Performance is relatively good.\n- No underlying data structure.\n- Readymade method support not available.\n- Primitive and object bot type available.\n- Only Homogeneous object.\n\n**Collection**\n\n- Collection are growable in size.\n- Good memory management.\n- Collection are not good in performance.\n- Both Homogeneous and Heterogeneous object allowed.\n- Readymade method available.\n- Only objects are allowed.\n- Standard data structure.\n\n**Difference between Collection and Collections**\n\nCollection is an interface, if we want to represent a group of individual object as a single entity then we should go for Collection.\n\nCollections is an utility class present in java.util package. It defines several utility method for collection object like\na) sort b) EMPTY_LIST c) binarySearch d) reverse e) shuffle f) swap g) copy h) min i) max j) replaceAll h) unmodifiableCollection i) forEach j) removeIf k) stream l) parallelstream m) synchronizedCollection\n\n**Collection Hierarchy**\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/java/collection.png)\n\n**Interfaces in Collections**\n\n- **Collection:** the foundational interface of the Collections Framework.\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/java/CollectionI.jpg)\n\n- **List:** extends Collection. Defines a collection that stores an ordered sequence of elements.\n- **Queue:** extends Collection. Defines a collection where insertion and removal each occur only at a single end. Typically elements are ordered as a FIFO queue, although this can be altered to accommodate priority queues or LIFO stacks.\n- **Deque:** extends Queue. Short for "double ended queue", it defines a queue where insertion and removal can occur at either end.\n- **Set:** extends Collection. Defines a collection that does not allow duplicate elements.\n- **SortedSet:** extends Set. Defines a set in which elements are sorted either according to their natural ascending order or by the use of a Comparator.\n- **NavigableSet:** extends SortedSet. Defines a sorted set which supports searching for elements based on closest matches. For instance, this interface defines the higher(E e) method, which returns the smallest element larger than the argument e.\n\n**Non-Abstract Classes in Collections**\n\n- **ArrayList:** extends AbstractList, and implements the List interface. Similar to the Vector class described above, it offers a more fully featured, resizable alternative to Java\u2019s native arrays.\n- **LinkedList:** extends AbstractSequentialList, and implements the Deque interface. Creates a doubly Linked list. Linked lists are somewhat akin to arrays, but don\u2019t require continuous blocks of memory. This is the class you\u2019ll most likely want to use\xa0for stacks.\n- **ArrayDeque:** extends AbstractCollection, and implements the Deque interface. This is the class you\u2019ll most likely want to use for queues, double-ended or otherwise, though it can also be used for stacks.\n- **PriorityQueue:** extends AbstractQueue, and implements the Queue interface. As the name implies, you\u2019ll want to use it for queues that are ordered according to priority.\n- **HashSet:** extends AbstractSet, and implements the Set interface. It is a set whose elements are backed by a HashMap under the hood. Due to the unpredictable nature of hashing, its elements are not reliably ordered \u2014 thus, it is useful primarily for sets which do not need to be sorted.\n- **LinkedHashSet:** extends HashSet, and implements the Set interface. It is similar to HashSet, but also maintains a linked list of the entries in the order in which they were inserted, allowing you to iterate through them thusly.\n- **TreeSet:** extends AbstractSet, and implements the NavigableSet interface. It is similar to HashSet, but is backed by a TreeMap. This allows allows the set to be sorted, either in natural ascending ordering or by use of a Comparator.\n- **EnumSet:** extends AbstractSet. It is a set which is specially designed to work with enum types, and where all members of the set must come from the same enum.\n\n**Abstract Classes in Collections**\n\n- **AbstractCollection:** Implements most of the Collection interface.\n- **AbstractList:** Extends AbstractCollection and implements most of the List interface.\n- **AbstractSequentialList:** Extends AbstractList. As the name implies, it is meant to facilitate sequential, rather than random, access of its elements.\n- **AbstractQueue:** Extends AbstractCollection and implements some of the Queue interface.\n- **AbstractSet:** Extends AbstractCollection and implements most of the Set interface.\n\n\n '}}]);