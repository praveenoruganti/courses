(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[168],{737:function(n,e,i){"use strict";i.r(e),e.default=' Spring Cloud heavily integrates with Netflix open source projects.\n\nWhile the Netflix Ribbon project simplifies integrating with service discovery agents such as Eureka, it also provides client-side load-balancing of service calls from a\nservice consumer. This makes it possible for a client to continue making service calls even if the service discovery agent is temporarily unavailable.\n\nTo handle multiple requests made by HTTP client (or consumer) in less time, the provider should run in multiple instances and handle requests in parallel such concept is called as Load Balancing.\n\nSpring RestTemplate can be used for client side load balancing.\n\n**Client side vs server side load balancing**\n\nThe multiple instances of the same microservice is run on different computers for high reliability and availability.\n\nServer side load balancing is distributing the incoming requests towards multiple instances of the service.\n\nClient side load balancing is distributing the outgoing request from the client itself.\n\nNetflix provided Ribbon for Client Load Balancing and Ribbon clients are typically created and configured for each of the target services. Ribbon\u2019s Client component offers a good set of configuration options such as connection timeouts, retries, retry algorithm (exponential, bounded backoff) etc.\n\nNetflix Ribbon can be easily integrated with a Service Discovery component such as Netflix\u2019s Eureka\n\nRibbon chooses one Provider URI,based on InstanceId with the help of LBSRegister which maintains request count.\n\n**Let\u2019s start coding ribbon using Eureka server.**\n\nRibbon can automatically be configured by registering RestTemplate as a bean and annotating it with @LoadBalanced.\n\n```jsx\n@Bean\n@LoadBalanced\nRestTemplate restTemplate(RestTemplateBuilder builder){\n    return builder.build();\n}\n```\n\nRun the eureka server and run the praveenoruganti-billing-service with multiple ports i.e.. 8091 and 8092 by setting the vm arguments -Dserver.port=8091 and -Dserver.port=8092.\n\n**Now let\'s see how we can use Ribbon client without Eureka server.**\n\nFirst configure the below dependency in application.yml of praveenoruganti-ordermanagement-service.\n\n```jsx\n<dependency>\n  <groupId>org.springframework.cloud</groupId>\n  <artifactId>spring-cloud-starter-netflix-ribbon</artifactId>\n</dependency>\n```\n\nYou need to have the below ribbon configuration for list of servers and disable the eureka configuration as well.\n\n```jsx\nbillingservice:\n ribbon:\n   eureka: disable\n   listOfServers: localhost:8091,localhost:8092\n   ServerListRefreshInterval: 2000\n```\n\nThen you need to create RibbonConfiguration.\n\n```jsx\npublic class RibbonConfiguration {\n\n\t@Autowired\n\tIClientConfig ribbonclinet;\n\n\t@Bean\n\tpublic IPing ribbonPing(IClientConfig config) {\n\t\treturn new PingUrl();\n\t}\n\n\t@Bean\n\tpublic IRule ribbonRule(IClientConfig config) {\n\t\treturn new AvailabilityFilteringRule();\n\t}\n\n}\n\n```\n\nInclude @RibbonClient annotation on top of main class.\n\n```jsx\n@SpringBootApplication\n@RibbonClient(name = "billingservice", configuration = RibbonConfiguration.class)\npublic class OrderManagementServiceApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(OrderManagementServiceApplication.class);\n\t}\n\n\t@Bean\n\t@LoadBalanced\n\tRestTemplate restTemplate(RestTemplateBuilder builder){\n\t\treturn builder.build();\n\t}\n}\n```\nPlease note there is no need to include ribbon configuration if you are using FeignClient as it has inbuilt ribbon configuration. '}}]);