(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[203],{772:function(n,e,t){"use strict";t.r(e),e.default=" **History of Spring**\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/spring/springhistory.PNG)\n\n- Previous name of Spring is Interface 21 and this was introduced by Rod Johnson.\n- Previously maintained by spring org but now it is Pivotal.\n- Spring is an alternative for EJB as EJB depends on application servers and it is tightly coupled.\n- Spring is a loosely coupled and it\u2019s lightweight as it doesn\u2019t depend on OS where as it just uses JDK.\n- Spring is a noninvasive, opensource and lightweight framework.\n- Spring is implemented based on runtime polymorphism and Has-A relationship.\n\n**Framework** is an installable software that provides abstraction on one or more technologies to simplify the application development process.\n\n**Invasive framework** will force a developer to extend a framework or implement a framework interface while creating projects.\n\nFor example, Struts framework is invasive.\n\n**Non-invasive framework** does not force developers to extend a framework class or implement a framework interface.\n\nFor example, Hibernate and spring are non-invasive framework.\n\nEJB promised scalability,security and high availability.\n\n**EJB on paper looks good but**\n\n- Its takes time to configure\n- Error prone\n- Tightly coupled to the application server, making it difficult to test\n\n**Advantages of Spring**\n\n- Lightweight \u2013 We can pick and use the necessary modules required for our project.\n- Flexible \u2013 Use DI and configured by XML or Annotation based style.\n- Loosely coupled \u2013 Use DI\n- Easy to test \u2013 provides testing modules that makes testing easier.\n\n**What is Spring IOC Container?**\n\nSpring IOC container is used for creating and injecting dependencies automatically.\n\n**Spring IOC**\n\n- creates the objects\n- wire them together\n- configure them\n- Manage their complete lifecycle from creation till destruction\n- Uses dependency injection to manage the components that make up an application\n\n**In Spring we have the below containers**\n\n- IOC- BeanFactory and ApplicationContext.\n- MVC Web container developed on top of IOC \u2013 WebApplicationContext.\n\n- BeanFactory(I)\n\n  - XMLBeanFactory(C)\n\n- ApplicationContext(I)\n\n  - ConfigurableApplicationContext(I)\n  - ClasspathXMLApplicationContext(C)\n  - FileSystemXMLApplicationContext(C)\n  - AnnotationConfigApplicationContext(C)\n\n- WebApplicationContext(I)\n\n  - WebApplicationContextUtilFactory(C)\n  - AnnotationConfigWebApplicationContext(C)\n\n**Points to remember**\n\n- By default bean is singleton i.e.. single object is created even though we call getBean() multiple times.\n- If we declare scope as prototype for every request we will get new object.\n- Spring can access private constructor also\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/spring/beanapplication.png)\n\n**IOC vs DI**\n\n**IOC(Inversion of Control)** -> Giving control to the container to get an instance of the object means instead you creating an object using new operator, let the controller do it for you.\n\n**DI(Dependency Injection)** -> It is a form of IOC where implementations are passed into an object through constructors/setters which the object will depend on in order to behave correctly.\n\n\n**Spring modules**\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/spring/spring-components.png)\n\n "}}]);