(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[62],{631:function(t,n,e){"use strict";e.r(n),n.default=" It compares the adjacent elements and swaps until the sorting is achieved.\n\nFor example,\n\n```jsx\nint[] num= {90,24,46,35,32};\n```\n\nLets see how bubble sort works\n\n```jsx\n\nFirst round:\n\n90,24,46,35,32\n24,90,46,35,32\n24,46,90,35,32\n24,46,35,90,32\n24,46,35,32,90\n\nSecond round:\n\n24,46,35,32,90\n24,35,46,32,90\n24,35,32,46,90\n\nThird round:\n\n24,35,32,46,90\n24,32,35,46,90\n\n```\n\nThat's it after 3 rounds of adjacent element comparison we have achieved the sorted order using Bubble sort.\n\nLet's start coding for bubble sort,\n\n```jsx\npackage com.praveen.sort;\n\nimport java.util.Arrays;\n\npublic class BubbleSort {\n\n\tpublic static void main(String[] args) {\n\t\tint[] arr = { 90, 24, 46, 35, 32 };\n\t\tbubble(arr);\n\t\tSystem.out.println(Arrays.toString(arr));\n\t}\n\n\tprivate static void bubble(int[] arr) {\n\t\tboolean swapped;\n\t\t// run the steps n-1 times\n\t\tfor (int i = 0; i < arr.length; i++) {\n\t\t\tswapped = false;\n\t\t\t// for each step, max item will come at the last respective index\n\t\t\tfor (int j = 1; j < arr.length - i; j++) {\n\t\t\t\t// swap if the item is smaller than the previous item\n\t\t\t\tif (arr[j] < arr[j - 1]) {\n\t\t\t\t\t// swap\n\t\t\t\t\tint temp = arr[j];\n\t\t\t\t\tarr[j] = arr[j - 1];\n\t\t\t\t\tarr[j - 1] = temp;\n\t\t\t\t\tswapped = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// if you did not swap for a particular value of i, it means the array is sorted\n\t\t\t// hence stop the program\n\t\t\tif (!swapped) { // !false = true\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n}\n\n\n```\n\n**Output**\n```jsx\n[24, 32, 35, 46, 90]\n``` "}}]);