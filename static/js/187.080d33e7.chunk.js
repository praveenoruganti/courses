(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[187],{756:function(e,n,t){"use strict";t.r(n),n.default=" Elements are the smallest building blocks of React apps.\n\nAn element describes what you want to see on the screen:\n```jsx\nconst element = <h1>Hello, world</h1>;\n```\nUnlike browser DOM elements, React elements are plain objects, and are cheap to create. React DOM takes care of updating the DOM to match the React elements.\n\n## Rendering an Element into the DOM\nLets say there is a <div> somewhere in your HTML file:\n```HTML\n<div id=\"root\"></div>\n```\nWe call this a **root** DOM node because everything inside it will be managed by React DOM.\n\nApplications built with just React usually have a single root DOM node. If you are integrating React into an existing app, you may have as many isolated root DOM nodes as you like.\n\nTo render a React element into a root DOM node, pass both to ReactDOM.render():\n\n```jsx\nconst element = <h1>Hello, world</h1>;\nReactDOM.render(element, document.getElementById('root'));\n```\nIt displays **Hello, world** on the page.\n\n## Updating Rendering Element\nReact elements are immutable. Once you create an element, you can\u2019t change its children or attributes. An element is like a single frame in a movie: it represents the UI at a certain point in time.\n\nWith our knowledge so far, the only way to update the UI is to create a new element, and pass it to ReactDOM.render().\n\nConsider this ticking clock example:\n\n```jsx\nfunction tick() {\n    const element = (\n        <div>\n            <h1>Hello, world!</h1>\n            <h2>It is {new Date().toLocaleTimeString()}.</h2>\n        </div>\n    );\n    ReactDOM.render(element, document.getElementById('root'));\n}\nsetInterval(tick, 1000);\n```\nIt calls ReactDOM.render() every second from a setInterval() callback.\n\nIn practice, most React apps only call ReactDOM.render() once.\n\n## React Only Updates What's Necessary\nReact DOM compares the element and its children to the previous one, and only applies the DOM updates necessary to bring the DOM to the desired state.\n\nEven though we create an element describing the whole UI tree on every tick, only the text node whose contents have changed gets updated by React DOM.\n\nIn our experience, thinking about how the UI should look at any given moment, rather than how to change it over time, eliminates a whole class of bugs.\n\n\n\n\n\n "}}]);