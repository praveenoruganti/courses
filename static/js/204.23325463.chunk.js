(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[204],{773:function(e,n,t){"use strict";t.r(n),n.default=' **What is AOP(Aspect Oriented Programming)?**\n\nAOP is a programming methodology which helps to manage cross cutting concern like transaction management, logging,security etc.\n\n**Why AOP?**\n\nIt provides the pluggable way to dynamically add the additional concern before,after or around the actual business logic.\n\nAspects enable modularization of concerns.\n\n**Uses of Spring AOP**\n\n- Remove tight coupling between cross cutting concerns and business logic\n- Easy to maintain code in present and future.\n\n**AOP Core Concepts**\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/spring/aop.png)\n\n**Aspect**\n\nAn Aspect is a class that implements the Java Enterprise application concerns which cuts through multiple classes like transaction management,logging,security etc.An aspect will be configured using annotation @Aspect.\n\nTo enable AspectJ annotations in Spring projects, we need to configure @EnableAspectJAutoProxy in the aspect class and incase of spring boot project we need to configure @EnableAspectJAutoProxy in main class.\n\n**Advice**\n\nAdvice represents an action taken by an aspect at a particular join point.\n\n- @Before \u2013 Adviced to execute before the joint point.\n- @AfterReturning \u2013 Adviced to execute after the joint point complete.\n- @After \u2013 Adviced to execute after the joint point.\n- @AfterThrowing- Adviced to execute after the joint point exists by throwing an exception\n- @Around \u2013 Advice that surrounds a joint point like method invocation\n\n**Joinpoint**\n\nA point in a program such as method execution,exception handling etc.\n\n**Pointcut**\n\nA pointcut is an expression language of AOP that matches joint points which determines whether Advice needs to be executed or not.\n\n- Execution\n- This\n- Target\n- Args\n- @target\n- @args\n- @within\n- @annotation\n\n**Advisor**\n\nAn advisor is a combination of a pointcut and an advice.\n\nAn advisor knows about what advices are needed for what joinpoints identified by a pointcut.\n\n**Target & Proxy**\n\nTarget is a business class object, before AOP feature is applied for it.\n\nProxy is also a business class object, after AOP feature is applied to it.\n\n**Weaving**\n\nLinking aspects with other application types or objects to create an advised object. This can be done at compile time (using the\nAspectJ compiler, for example), load time, or at runtime. Spring AOP, like other pure Java AOP frameworks, performs weaving at runtime.\n\nWeaving is a process of converting a target object into a proxy object by adding advices to it.\nFor example, a web-container converts a jsp into equivalent servlet. Here jsp is a target and servlet is a proxy. This process is called weaving.\n\n**Annotations Allowed Attributes**\n\n- @Pointcut value\n- @Before value\n- @AfterReturning pointcut, value, returning\n- @After value\n- @AfterThrowing pointcut, value, throwing\n- @Around value\n\n**Dependencies**\n\n```jsx\n<dependency>\n   <groupId>org.springframework</groupId>\n   <artifactId>spring-aop</artifactId>\n   <version>5.0.7.RELEASE</version>\n  </dependency>\n  <dependency>\n   <groupId>org.aspectj</groupId>\n   <artifactId>aspectjtools</artifactId>\n   <version>1.9.2</version>\n  </dependency>\n  <dependency>\n   <groupId>org.aspectj</groupId>\n   <artifactId>aspectjrt</artifactId>\n   <version>1.9.2</version>\n  </dependency>\n  <dependency>\n   <groupId>org.aspectj</groupId>\n   <artifactId>aspectjweaver</artifactId>\n   <version>1.9.2</version>\n  </dependency>\n```\n\nLet\'s see another example,\n\n```jsx\n@Service\npublic class EmployeeService {\n public String addEmployee() {\n  System.out.println("Add Employee ");\n  return "Employee Peter information is added successfully";\n }\n\n public void modifyEmployee() {\n  System.out.println("Modify Employee");\n }\n\n public void deleteEmployee() {\n  System.out.println("Delete Employee");\n }\n\n}\n```\n\n```jsx\n@Configuration\n@ComponentScan(basePackages = "com.praveen.aop")\npublic class EmployeeConfig {\n @Bean(name="employeeService")\n public EmployeeService getBean() {\n  return new EmployeeService();\n }\n\n}\n\n```\n\n```jsx\n@Aspect\n@Component\n@EnableAspectJAutoProxy\npublic class LoggingAspect\n{\n\n    @Before("addEmployee()")\n    public void logBefore(JoinPoint joinPoint)\n    {\n\n        System.out.print("logBefore() is running!");\n        System.out.println(", before "\n                + joinPoint.getSignature().getName() + " method");\n\n    }\n\n    @After("addEmployee()")\n    public void logAfter(JoinPoint joinPoint)\n    {\n\n        System.out.print("logAfter() is running!");\n        System.out.println(", after "\n                + joinPoint.getSignature().getName() + " method");\n\n    }\n\n    @AfterReturning(\n            pointcut = "addEmployee()",\n            returning = "result")\n    public void logAfterReturning(JoinPoint joinPoint, Object result)\n    {\n\n        System.out.print("logAfterReturning() is running!");\n        System.out.println(", after "\n                + joinPoint.getSignature().getName() + " method");\n        System.out.println("Method returned value is = " + result);\n\n    }\n\n    @AfterThrowing(\n            pointcut = "addEmployee()",\n            throwing = "exception")\n    public void logAfterThrowing(JoinPoint joinPoint,\n            Throwable exception)\n    {\n\n        System.out.print("logAfterThrowing() is running!");\n        System.out.println(\n                ", after " + joinPoint.getSignature().getName()\n                        + " method throwing exception");\n        System.out.println("exception = " + exception);\n\n    }\n\n    @Pointcut("execution(* com.praveen.aop.service.EmployeeService.addEmployee())")\n    public void addEmployee() {}\n\n    @Around("execution(* com.praveen.aop.service.EmployeeService.modifyEmployee())")\n    public void aroundAdvice(ProceedingJoinPoint pjp) throws Throwable {\n     System.out.println("Around Advice Initial message");\n     pjp.proceed();\n     System.out.println("Around Advice later message");\n\n    }\n\n}\n\n```\n\n```jsx\npublic class EmployeeTest {\n\n private static ApplicationContext context;\n\n public static void main(String args[]) {\n\n  context = new AnnotationConfigApplicationContext(EmployeeConfig.class);\n\n        EmployeeService employeeService = context\n                .getBean(EmployeeService.class);\n\n        employeeService.addEmployee();\n\n        employeeService.modifyEmployee();\n\n        employeeService.deleteEmployee();\n }\n\n}\n\n```\n\n**Output**\n\n```jsx\n\nSep 08, 2019 2:52:48 PM org.springframework.context.support.AbstractApplicationContext prepareRefresh\nINFO: Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@14514713: startup date [Sun Sep 08 14:52:48 IST 2019]; root of context hierarchy\n\nSep 08, 2019 2:52:49 PM org.springframework.beans.factory.support.DefaultListableBeanFactory registerBeanDefinition\nINFO: Overriding bean definition for bean \'employeeService\' with a different definition: replacing [Generic bean: class [com.praveen.aop.service.EmployeeService]; scope=singleton; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in file [D:PraveenworkspacePraveenSpringAOPProject\targetclassescompraveenaopserviceEmployeeService.class]] with [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=employeeConfig; factoryMethodName=getBean; initMethodName=null; destroyMethodName=(inferred); defined in com.praveen.aop.config.EmployeeConfig]\n\nlogBefore() is running!, before addEmployee method\n\nAdd Employee\n\nlogAfter() is running!, after addEmployee method\n\nlogAfterReturning() is running!, after addEmployee method\n\nMethod returned value is = Employee Praveen information is added successfully\n\nAround Advice Initial message\n\nModify Employee\n\nAround Advice later message\n\nDelete Employee\n\n```\n\n**Example for @Around for ExecutionTimeTrackerAdvice in Spring MVC project**\n\n```jsx\n@EnableAspectJAutoProxy\n@Aspect\n@Component\npublic class ExecutionTimeTrackerAdvice {\n\n Logger logger = Logger.getLogger(ExecutionTimeTrackerAdvice.class);\n\n @Around("@annotation(com.praveen.aop.advice.TrackExecutionTime)")\n public Object trackTime(ProceedingJoinPoint pjp) throws Throwable {\n  long stratTime = System.currentTimeMillis();\n  Object obj = pjp.proceed();\n  long endTime = System.currentTimeMillis();\n  logger.info("Method name" + pjp.getSignature() + " time taken to execute : " + (endTime - stratTime));\n  return obj;\n }\n\n}\n```\n\n```jsx\n\n@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface TrackExecutionTime {\n\n}\n\n\n```\n\n```jsx\npublic class User {\n\n private String password;\n private String userName;\n private int ssoId;\n public String getPassword() {\n  return password;\n }\n public void setPassword(String password) {\n  this.password = password;\n }\n public String getUserName() {\n  return userName;\n }\n public void setUserName(String userName) {\n  this.userName = userName;\n }\n public int getSsoId() {\n  return ssoId;\n }\n public void setSsoId(int ssoId) {\n  this.ssoId = ssoId;\n }\n\n\n\n}\n```\n\n```jsx\n@Repository\npublic class UserDAO {\n\n private List<User> userList;\n\n public UserDAO() {\n  userList = new ArrayList<User>();\n }\n\n public List<User> getAllUsers() {\n  return userList;\n }\n\n public User createUser(User user) {\n  userList.add(user);\n  return user;\n\n }\n\n}\n```\n\n```jsx\n@Service\npublic class UserService {\n\n @Autowired\n private UserDAO userDao;\n\n    public List<User> getUsers() {\n        return userDao.getAllUsers();\n    }\n\n public User createUser(User user) {\n  return userDao.createUser(user);\n }\n}\n\n```\n\n```jsx\n@RestController\n@RequestMapping("/users")\npublic class UserController {\n\n @Autowired\n private UserService userService;\n\n\n @GetMapping\n @RequestMapping("/getUser")\n @TrackExecutionTime\n public List<User> getUsers() {\n  return userService.getUsers();\n }\n\n @PostMapping(value ="/createUser", consumes = MediaType.APPLICATION_JSON_VALUE,\n         produces = MediaType.APPLICATION_JSON_VALUE)\n @TrackExecutionTime\n public User createUser(@RequestBody User user) {\n  return userService.createUser(user);\n }\n\n\n}\n```\n\nNow perform POST request as shown below in postman\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/spring/post.PNG)\n\nNow perform GET request as shown below in postman\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/spring/Get.PNG)\n\n**Now check the console for the ExecutionTimeTrackerAdvice AOP statements**\n\n```jsx\n\nSep 08, 2019 8:35:34 PM org.apache.catalina.startup.Catalina load\nINFO: Initialization processed in 2581 ms\n\nSep 08, 2019 8:35:41 PM org.apache.catalina.startup.Catalina start\nINFO: Server startup in 6916 ms\n\n2019-09-08 20:35:49 INFO ExecutionTimeTrackerAdvice:22 - Method nameUser com.praveen.controller.UserController.createUser(User) time taken to execute : 41\n\n2019-09-08 20:37:17 INFO ExecutionTimeTrackerAdvice:22 - Method nameList com.praveen.controller.UserController.getUsers() time taken to execute : 1\n\n```\n\n '}}]);