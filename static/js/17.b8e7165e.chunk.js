(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[17],{586:function(e,n,a){"use strict";a.r(n),n.default=" ## Container Basics\n\n\n**What is a Container?**\n\nContainers provide a standard way to package your application's code, configurations, and dependencies into a single object. Containers share an operating system installed on the server and run as resource-isolated processes, ensuring quick, reliable, and consistent deployments, regardless of environment.\n\n**Why use containers?**\n\nContainers are a powerful way for developers to package and deploy their applications. They are lightweight and provide a consistent, portable software environment for applications to easily run and scale anywhere. Building and deploying microservices, running batch jobs, for machine learning applications, and moving existing applications into the cloud are just some of the popular use cases for containers.\n\n**Benefits of containers**\n\n- **Optimization of resource utilization**  \n  \n  You can fit multiple, lightweight containers on a single virtual machine, and increase the efficiency and density of your resources.\n\n- **Automation** \n  \n  The standard packaging and interaction with containers can make it easier to automate software development lifecycle tasks, such as building, deploying, and scaling applications.\n\n- **Speed** \n  \n  Containers are quick to run. You can start, scale, or delete containers in seconds.\n\n- **Scalability**\n  \n   Because containers facilitate microservices architectures, you can meet demand by using containers to scale out horizontally both quickly and efficiently.\n\n- **Increased developer productivity** \n\n   Developers can spend less time on operations and environment debugging, and spend more time on application development.\n\n- **Code portability**\n  \n   Having confidence that your workload will behave consistently across environments is one of the major benefits of containers.\n\n\n## Docker Basics\n\n**What is Docker?**\n\nDocker is a software platform that allows you to build, test, and deploy applications quickly. Docker packages software into standardized units called containers that have everything the software needs to run including libraries, system tools, code, and runtime.\n\n**What is the Docker daemon?**\n\nThe Docker daemon runs on a host and listens for API calls to manage Docker objects. For example, if you want to build an image, run a container, or create a volume, you can use the Docker command line interface (CLI) to create the request. The request will then be submitted to the Docker daemon to be managed.\n\n**What is the Docker CLI?**\n\nThe Docker command line interface (CLI) is the client interface for interacting with Docker objects. The Docker CLI is how you issue commands to Docker to build your containers, run your containers, or stop your containers.\n\n\n**What is a Dockerfile?**\n\nA Dockerfile is a text document that contains instructions on how to build your container image. A Dockerfile includes instructions for what base layer to use (for example, whether you want to use a minimal version of Linux or use an image that has preinstalled software, such as a database engine). Other instructions include running commands in the container, or copying your application data, dependencies, and configurations into the container.\n\n**What is a Docker image?**\n\nA container image is created when you run the build command from the Docker CLI and it follows the instructions in a Dockerfile. A container image is made up of a series of read-only layers, with one writable layer on top where files can be added, modified, or deleted. Each layer is created from an instruction in the Dockerfile. \n\n**What is an image registry?**\n\nAn image registry is a repository where you can store container images. You can store the images either publicly or privately. From the repository, images can be pulled and deployed, or used by other developers. \n\n\n\n "}}]);