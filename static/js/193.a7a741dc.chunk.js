(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[193],{762:function(e,n,t){"use strict";t.r(n),n.default=' - By using useEffect, you tell React that your component needs to do something after render.\n- declare count state variable, then tell React to use an effect, pass a function to the useEffect. function we pass is our effect. Inside our effect set the document.title.\n\nFor example,\n\n```jsx\nimport React, { useState, useEffect } from "react";\n\nfunction Example() {\n  const [count, setCount] = useState(0);\n\n  // Similar to componentDidMount and componentDidUpdate:\n  useEffect(() => {\n    // Update the document title using the browser API\n    document.title = `You clicked count times`;\n  });\n\n  return (\n    <div>\n      <p>You clicked count times</p>\n      <button onClick={() => setCount(count + 1)}>Click me</button>\n    </div>\n  );\n}\n```\n\nGenerally when we want to fetch data from backend api we do that in useEffect for example,\n\n```jsx\nimport React, { useState, useEffect } from "react";\nimport axios from "axios";\n\nconst HooksExample = () => {\n  const [data, setData] = useState();\n\n  useEffect(() => {\n    const fetchGithubData = async () => {\n      const result = await axios(`https://api.github.com/users/orugantipraveen/repos`);\n      setData(result.data);\n    };   \n  }, [data]);\n\n  return (\n    <div className="App">{data && data.map((item) => <p>{item.name}</p>)}</div>\n  );\n};\n\nexport default HooksExample;\n```\n\n**Points to be noted**\n\n- Runs on every update\n  ```jsx\n  useEffect(() => {});\n  ```\n- Runs ONCE after initial rendering\n  ```jsx\n  useEffect(() => {}, []);\n  ```\n- Runs ONCE after initial rendering and after every rendering ONLY if dependency changes.\n  ```jsx\n  useEffect(() => {}, [Dependencies]);\n  ```\n '}}]);