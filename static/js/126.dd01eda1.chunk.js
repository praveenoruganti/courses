(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[126],{695:function(n,e,t){"use strict";t.r(e),e.default=' \n- A predicate is a function with a single argument and returns boolean value.\n- To implement predicate functions in Java, Oracle people introduced Predicate interface in 1.8 version (i.e.,Predicate<T>).\n- Predicate interface present in Java.util.function package.\n- It\u2019s a functional interface and it contains only one method i.e., test()\n\n```jsx\ninterface Predicate<T> {\n    public boolean test(T t);\n}\n```\n\nAs predicate is a functional interface and hence it can refers lambda expression\n\nAlmost all java applications has a requirement of checking whether condition is true or false, this is a common requirement. For this we can use Predicate function provided by Java.\n\n```jsx\npublic class PredicateDemo {\n\n    public static void main(String args[]) {\n        withoutPredicate();\n        withPredicate();\n    }\n\n    private static void withoutPredicate() {\n        System.out.println("From withoutPredicate");\n        Integer transactionAmount = 20000;\n        if (isGreater(transactionAmount)) {\n            System.out.println("Transaction Amount can\'t be greater than 10000");\n        } else {\n            System.out.println("Transaction Amount is less than 10000, please proceed");\n        }\n    }\n\n    public static Boolean isGreater(Integer i) {\n        if (i > 10000) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    private static void withPredicate() {\n        System.out.println("From withPredicate!");\n        Integer amount = 20000;\n        Predicate<Integer> p = transactionAmount -> transactionAmount > 10000;\n        if (p.test(amount)) {\n            System.out.println("Transaction Amount can\'t be greater than 10000");\n        } else {\n            System.out.println("Transaction Amount is less than 10000, please proceed");\n        }\n    }\n}\n\n```\n\n**Output**\n\n```jsx\nFrom withoutPredicate\nTransaction Amount can\'t be greater than 10000\nFrom withPredicate!\nTransaction Amount can\'t be greater than 10000\n```\n\n**Predicate joining**\n\nIt\u2019s possible to join predicates into a single predicate by using the following methods.\n\nand()\n\nor()\n\nnegate()\n\nthese are exactly same as logical AND ,OR complement operators\n\n\nFor example,\n\n```jsx\npublic class PredicateJoiningTest {\n\n\tpublic static void main(String[] args) {\n\t\tint[] x = { 0, 5, 10, 15, 20, 25, 30 };\n\t\tPredicate<Integer> p1 = i -> i > 10;\n\t\tPredicate<Integer> p2 = i -> i % 2 == 0;\n\t\tSystem.out.println("The Numbers Greater Than 10:");\n\t\tm1(p1, x);\n\t\tSystem.out.println("The Even Numbers Are:");\n\t\tm1(p2, x);\n\t\tSystem.out.println("The Numbers Not Greater Than 10:");\n\t\tm1(p1.negate(), x);\n\t\tSystem.out.println("The Numbers Greater Than 10 And Even Are:");\n\n\t\tm1(p1.and(p2), x);\n\t\tSystem.out.println("The Numbers Greater Than 10 OR Even:");\n\t\tm1(p1.or(p2), x);\n\t}\n\n\tpublic static void m1(Predicate<Integer> p, int[] x) {\n\t\tfor (int x1 : x) {\n\t\t\tif (p.test(x1))\n\t\t\t\tSystem.out.println(x1);\n\t\t}\n\t}\n\n}\n\n```\n\n**Output**\n\n```jsx\nThe Numbers Greater Than 10:\n15\n20\n25\n30\nThe Even Numbers Are:\n0\n10\n20\n30\nThe Numbers Not Greater Than 10:\n0\n5\n10\nThe Numbers Greater Than 10 And Even Are:\n20\n30\nThe Numbers Greater Than 10 OR Even:\n0\n10\n15\n20\n25\n30\n```\n\n**Differences between Predicate and Function**\n\n- **Predicate** is to implement conditional checks We should go for predicate where as **Function** is to perform certain operation And to return some result we Should go for function.\n- **Predicate** can take one type Parameter which represents Input argument type. Predicate<T> where as **Function** can take 2 type Parameters. First one represent Input argument type and Second one represent return Type. Function<T,R>\n- **Predicate** interface defines only one method called test() where as **Function** interface defines only one Method called apply().\n- **Predicate** can return only boolean value where as **Function** can return any type of value.\n\nNote: Predicate is a boolean valued function and(), or(), negate() are default methods present inside Predicate interface.\n\n\n '}}]);