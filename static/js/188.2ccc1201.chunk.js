(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[188],{757:function(n,e,t){"use strict";t.r(e),e.default=" Components let you split the UI into independent, reusable pieces, and think about each piece in isolation.\n\nA component is a JavaScript class or function that optionally accepts some data and returns a React elements that describes how a section of the UI should appear.\n\nComponents can be:\n\n- Functional Component / Presentational Component / Stateless Component / Dumb Component\n- Class Component / Container Component/ Statefull Component / Smart Component\n\n## Class Components\n\n- Class components make use of ES6 class and extend the Component class in React.\n- Sometimes called **smart** or **stateful** components as they tend to implement logic and state.\n- React lifecycle methods can be used inside class components (for example, componentDidMount).\n- You pass props down to class components and access them with **this.props**.\n\nYou can also use an ES6 class to define a component\n\n```jsx\nclass App extends React.Component {\n  render() {\n    return <h1>This is a Class Component!!</h1>;\n  }\n}\n```\n\nYou can also check out the [Demo](https://praveenoruganti.github.io/courses/demo/reactjs/ClassComponent.html).\n\n## Function Components\n\n- Function components are basic JavaScript functions. These are typically arrow functions but can also be created with the regular function keyword.\n- Sometimes referred to as **dumb** or **stateless** components as they simply accept data and display them in some form; that is they are mainly responsible for rendering UI.\n- React lifecycle methods (for example, componentDidMount) cannot be used in function components.\n- There is no render method used in functional components.\n- These are mainly responsible for UI and are typically presentational only (For example, a Button component).\n- Functional components can accept and use props.\n- Functional components should be favored if you do not need to make use of React state.\n\nThe simplest way to define a component is to write a JavaScript function.\n\n```jsx\nconst App = () => {\n  return <h1>This is a Functional Component!!</h1>;\n};\n```\n\nYou can also check out the [Demo](https://praveenoruganti.github.io/courses/demo/reactjs/FunctionComponent.html).\n\nThe above two components are equivalent from React's point of view.\n\n**Note**: Always start component names with a capital letter.\n\nReact treats components starting with lowercase letters as DOM tags. For example, <div /> represents an HTML div tag, but <App /> represents a component and requires App to be in scope.\n\n## Difference between Functional and Class components\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/reactjs/components.PNG)\n\n\n**Functional components after Hooks Introduction**\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/reactjs/components_comparision.PNG) "}}]);