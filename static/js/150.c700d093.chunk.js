(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[150],{719:function(n,e,t){"use strict";t.r(e),e.default=" The control flow within JavaScript allow the program flow to change within a unit of code or function. These statements can determine whether or not given statements are executed\u2014and provide the basis for the repeated execution of a block of code.\n\nThe flow of control through any given function is implemented with three basic types of control flow:\n- Sequential: default mode\n- Selection: used for decisions, branching\u2014choosing between two or more alternative paths\n- Repetition: used for looping (i.e., repeating a piece of code multiple times in a row)\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/js/controlflow.jpg)\n\n\n# Conditional control statements\n\n## JavaScript if...else Statement\n\nif...else statement is to create decision making.\n\nIn JavaScript, there are three forms of the if...else statement.\n\n- if statement\n- if...else statement\n- if...else if...else statement\n\nJavaScript if Statement\n\n```jsx\n// check if the number is positive\n\nconst number = prompt(\"Enter a number: \");\n\n// check if number is greater than 0\nif (number > 0) {\n // the body of the if statement\n}\n\n\n```\n\nJavaScript if...else statement\n\n\n```jsx\n// check is the number is positive or negative/zero\n\nconst number = prompt(\"Enter a number: \");\n\n// check if number is greater than 0\nif (number > 0) {\n}\n// if number is not greater than 0\nelse {\n}\n\n\n```\n\nJavaScript if...else if statement\n\n```jsx\n// check if the number if positive, negative or zero\nconst number = prompt(\"Enter a number: \");\n\n\n// check if number is greater than 0\nif (number > 0) {\n}\n// check if number is 0\nelse if (number == 0) {\n}\n// if number is neither greater than 0, nor zero\nelse {\n}\n\n```\n\nNested if...else Statement\n\n```jsx\n// check if the number is positive, negative or zero\nconst number = prompt(\"Enter a number: \");\n\nif (number >= 0) {\n    if (number == 0) {\n    } else {\n    }\n} else {\n}\n```\n\n## JavaScript Switch Statement\nThe JavaScript switch statement is used in decision making.\n\nThe switch statement evaluates an expression and executes the corresponding body that matches the expression's result.\n\n```jsx\n// program using switch statement\nlet a = 2;\n\nswitch (a) {\n\n    case 1:\n        a = 'one';\n        break;\n    case 2:\n        a = 'two';\n        break;\n    default:\n        a = 'not found';\n        break;\n}\n```\n```jsx\n// program using switch statement\nlet a = 1;\n\nswitch (a) {\n    case \"1\":\n        a = 1;\n        break;\n    case 1:\n        a = 'one';\n        break;\n    case 2:\n        a = 'two';\n        break;\n\n    default:\n        a = 'not found';\n        break;\n}\n```\n\n```jsx\n\n// program for a simple calculator\nlet result;\n\n// take the operator input\nconst operator = prompt('Enter operator ( either +, -, * or / ): ');\n\n// take the operand input\nconst number1 = parseFloat(prompt('Enter first number: '));\nconst number2 = parseFloat(prompt('Enter second number: '));\n\nswitch(operator) {\n    case '+':\n        result = number1 + number2;\n        break;\n    case '-':\n        result = number1 - number2;\n        break;\n    case '*':\n        result = number1 * number2;\n        break;\n    case '/':\n        result = number1 / number2;\n        break;\n\n    default:\n        break;\n}\n```\n```jsx\n// multiple case switch program\nlet fruit = 'apple';\nswitch(fruit) {\n    case 'apple':\n    case 'mango':\n    case 'pineapple':\n        break;\n    default:\n        break;\n}\n```\n\n\n# Looping/iterative control statements\n\n## JavaScript for loop\n\nIn programming, loops are used to repeat a block of code.\n\nFor example, if you want to show a message 100 times, then you can use a loop. It's just a simple example; you can achieve much more with loops.\n\n```jsx\n\n// program to display text 100 times\nconst n = 100;\n\n// looping from i = 1 to 5\nfor (let i = 1; i <= 100; i++) {\n}\n\n```\n\n```jsx\n\n// program to display numbers from 1 to 5\nconst n = 5;\n\n// looping from i = 1 to 5\n// in each iteration, i is increased by 1\nfor (let i = 1; i <= n; i++) {\n}\n\n```\n\n```jsx\n// program to display the sum of natural numbers\nlet sum = 0;\nconst n = 100\n\n// looping from i = 1 to n\n// in each iteration, i is increased by 1\nfor (let i = 1; i <= n; i++) {\n    sum += i;  // sum = sum + i\n}\n\n\n```\n```jsx\n\n// program to display the sum of n natural numbers\nlet sum = 0;\nconst n = 100;\n\n// looping from i = n to 1\n// in each iteration, i is decreased by 1\nfor(let i = n; i >= 1; i-- ) {\n    // adding i to sum in each iteration\n    sum += i; // sum = sum + i\n}\n\n```\n\n```jsx\n// infinite for loop\nfor(let i = 1; i > 0; i++) {\n    // block of code\n}\n\n```\n\n## JavaScript while and do...while Loop\n\nIn programming, loops are used to repeat a block of code. For example, if you want to show a message 100 times, then you can use a loop. It's just a simple example; you can achieve much more with loops.\n\n```jsx\n// program to display numbers from 1 to 5\n// initialize the variable\nlet i = 1, n = 5;\n\n// while loop from i = 1 to 5\nwhile (i <= n) {\n    i += 1;\n}\n```\n\n```jsx\n// program to find the sum of positive numbers\n// if the user enters a negative numbers, the loop ends\n// the negative number entered is not added to sum\n\nlet sum = 0;\n\n// take input from the user\nlet number = parseInt(prompt('Enter a number: '));\n\nwhile(number >= 0) {\n\n    // add all positive numbers\n    sum += number;\n\n    // take input again if the number is positive\n    number = parseInt(prompt('Enter a number: '));\n}\n\n// display the sum\n\n```\n\n```jsx\n// program to display numbers\nlet i = 1;\nconst n = 5;\n\n// do...while loop from 1 to 5\ndo {\n    i++;\n} while(i <= n);\n\n```\n```jsx\n// to find the sum of positive numbers\n// if the user enters negative number, the loop terminates\n// negative number is not added to sum\n\nlet sum = 0;\nlet number = 0;\n\ndo {\n    sum += number;\n    number = parseInt(prompt('Enter a number: '));\n} while(number >= 0)\n\n```\n```jsx\n// infinite do...while loop\nconst count = 1;\ndo {\n   // body of loop\n} while(count == 1)\n```\n\n## for Vs while Loop\nA for loop is usually used when the number of iterations is known.\n```jsx\n// this loop is iterated 5 times\nfor (let i = 1; i <=5; ++i) {\n   // body of loop\n}\n```\n\nAnd while and do...while loops are usually used when the number of iterations are unknown.\n```jsx\nwhile (condition) {\n    // body of loop\n}\n```\n\n# JavaScript break Statement\nThe break statement is used to terminate the loop immediately when it is encountered.\n\n```jsx\n// program to print the value of i\nfor (let i = 1; i <= 5; i++) {\n    // break condition\n    if (i == 3) {\n        break;\n    }\n}\n```\n```jsx\n// program to find the sum of positive numbers\n// if the user enters a negative numbers, break ends the loop\n// the negative number entered is not added to sum\n\nlet sum = 0, number;\n\nwhile(true) {\n\n    // take input again if the number is positive\n    number = parseInt(prompt('Enter a number: '));\n\n    // break condition\n    if(number < 0) {\n        break;\n    }\n\n    // add all positive numbers\n    sum += number;\n\n}\n\n// display the sum\n```\n\nbreak with Nested Loop\n\n```jsx\n\n// nested for loops\n\n// first loop\nfor (let i = 1; i <= 3; i++) {\n\n    // second loop\n    for (let j = 1; j <= 3; j++) {\n        if (i == 2) {\n          break;\n        }\n    }\n}\n\n```\n\n# JavaScript continue Statement\nThe continue statement is used to skip the current iteration of the loop and the control flow of the program goes to the next iteration.\n\n```jsx\n// program to print the value of i\nfor (let i = 1; i <= 5; i++) {\n\n    // condition to continue\n    if (i == 3) {\n        continue;\n    }\n\n}\n```\n```jsx\n// program to calculate positive numbers only\n// if the user enters a negative number, that number is skipped from calculation\n\n// negative number -> loop terminate\n// non-numeric character -> skip iteration\n\nlet sum = 0;\nlet number = 0;\n\nwhile (number >= 0) {\n\n    // add all positive numbers\n    sum += number;\n\n    // take input from the user\n    number = parseInt(prompt('Enter a number: '));\n\n    // continue condition\n    if (isNaN(number)) {\n        number = 0; // the value of number is made 0 again\n        continue;\n    }\n\n}\n\n// display the sum\n```\n```jsx\n// nested for loops\n\n// first loop\nfor (let i = 1; i <= 3; i++) {\n\n    // second loop\n    for (let j = 1; j <= 3; j++) {\n        if (j == 2) {\n          continue;\n        }\n    }\n}\n```\n\n# JavaScript try...catch...finally Statement\n\nThe try, catch and finally blocks are used to handle exceptions (a type of an error). Before you learn about them, you need to know about the types of errors in programming.\n\nTypes of Errors\nIn programming, there can be two types of errors in the code:\n\nSyntax Error: Error in the syntax. For example, if you write consol.log('your result');, the above program throws a syntax error. The spelling of the console is a mistake in the above code.\n\nRuntime Error: This type of error occurs during the execution of the program. For example,\ncalling an invalid function or a variable.\n\nThese errors that occur during runtime are called exceptions. Now, let's see how you can handle these exceptions.\n\nJavaScript try...catch Statement\nThe try...catch statement is used to handle the exceptions.\n\n```jsx\n// program to show try...catch in a program\n\nconst numerator= 100, denominator = 'a';\n\ntry {\n\n    // forgot to define variable a\n}\ncatch(error) {\n}\n```\n\nJavaScript try...catch...finally Statement\nYou can also use the try...catch...finally statement to handle exceptions. The finally block executes both when the code runs successfully or if an error occurs.\n\n```jsx\nconst numerator= 100, denominator = 'a';\n\ntry {\n}\ncatch(error) {\n}\nfinally {\n}\n```\n\n```jsx\nsetTimeout(function() {\n    try {\n        // error in the code\n    } catch {\n    }\n}, 3000);\n```\nYou can also use the throw statement with the try...catch statement to use user-defined exceptions. For example, a certain number is divided by 0. If you want to consider Infinity as an error in the program, then you can throw a user-defined exception using the throw statement to handle that condition.\n\n## JavaScript throw Statement\nIn JavaScript, the throw statement handles user-defined exceptions. For example, if a certain number is divided by 0, and if you need to consider Infinity as an exception, you can use the throw statement to handle that exception.\n\n```jsx\nconst number = 40;\ntry {\n    if(number > 50) {\n    }\n    else {\n\n        // user-defined throw statement\n        throw new Error('The number is low');\n    }\n\n    // if throw executes, the below code does not execute\n}\ncatch(error) {\n}\n```\nRethrow an Exception\nYou can also use a throw statement inside the catch block to rethrow an exception. For example,\n\n```jsx\nconst number = 5;\ntry {\n     // user-defined throw statement\n     throw new Error('This is the throw');\n\n}\ncatch(error) {\n    if( number + 8 > 10) {\n\n        // statements to handle exceptions\n    }\n    else {\n        // cannot handle the exception\n        // rethrow the exception\n        throw new Error('The value is low');\n    }\n}\n```\nIn the above program, the throw statement is used within the try block to catch an exception. And the throw statement is re-thrown in the catch block which gets executed if the catch block cannot handle the exception.\n\nHere, the catch block handles the exception and no error occurs. Hence, the throw statement is not re-thrown.\n\nIf the error was not handled by the catch block, the throw statement would be re-thrown with error message Uncaught Error: The value is low\n\nYou can check out the [Demo](https://praveenoruganti.github.io/courses/demo/js/ControlFlow)\n\n "}}]);