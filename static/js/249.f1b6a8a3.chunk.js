(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[249],{818:function(e,n,a){"use strict";a.r(n),n.default=' **SQL commands are segregated into the following types**\n\n- **DDL** \u2013 Data Definition Language\n- **DML** \u2013 Data Manipulation Language\n- **DQL** \u2013 Data Query Language\n- **DCL** \u2013 Data Control Language\n- **TCL** \u2013 Transaction Control Language\n\n**What are the different DDL commands in SQL?**\n\nDDL commands are used to define or alter the structure of the database.\n\n- **CREATE**: To create databases and database objects\n- **ALTER**: To alter existing database objects\n- **DROP**: To drop databases and databases objects\n- **TRUNCATE**: To remove all records from a table but not its database structure\n- **RENAME**: To rename database objects\n\n**What are the different DML commands in SQL?**\n\nDML commands are used for managing data present in the database.\n\n- **SELECT**: To select specific data from a database\n- **INSERT**: To insert new records into a table\n- **UPDATE**: To update existing records\n- **DELETE**: To delete existing records from a table\n\n**What are the different DCL commands in SQL?**\n\nDCL commands are used to create roles, grant permission and control access to the database objects.\n\n- **GRANT**: To provide user access\n- **DENY**: To deny permissions to users\n- **REVOKE**: To remove user access\n\n**What are the different TCL commands in SQL?**\n\nTCL commands are used to manage the changes made by DML statements.\n\n- **COMMIT**: To write and store the changes to the database\n- **ROLLBACK**: To restore the database since the last commit\n\n**What is the need of MERGE statement?**\n\nThis statement allows conditional update or insertion of data into a table. It performs an UPDATE if a row exists, or an INSERT if the row does not exist.\n\n\n**Let\u2019s see some basic Queries**\n\n**Creating a table and inserting data**\n\nSQL: CREATE table with multiple data types\n\n```jsx\nCREATE TABLE friends (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    age INTEGER,\n    weight REAL);\n\nINSERT INTO friends VALUES (1, "Praveen", 34, 80);\n```\n\nSQL: CREATE table with a primary key\n```jsx\nCREATE TABLE customers (\n    id INTEGER PRIMARY KEY,\n    phone TEXT);\nINSERT INTO customers VALUES (1, "555-222-3333");\n```\n\nSQL: CREATE table with a primary key and autoincrement\n```jsx\nCREATE TABLE customers_orders (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    customer_id INTEGER,\n    item TEXT);\n/* It will automatically pick an id that\'s different from other ones. */\nINSERT INTO customers_orders (customer_id, item) VALUES (1, "Hot Air Balloon");\n```\nSQL: Specifying DEFAULT values in CREATE TABLE\n```jsx\nCREATE TABLE courses\n    (id INTEGER PRIMARY KEY,\n    name TEXT,\n    prereqs TEXT DEFAULT "None",\n    num_hours INTEGER DEFAULT 15);    \nINSERT INTO courses (name, num_hours) VALUES\n    ("Intro to JS", 25);\n```\nSQL: CREATE TABLE with foreign key reference\n\n```jsx\n\nCREATE TABLE artists (\n  id    INTEGER PRIMARY KEY, \n  name  TEXT\n);\nCREATE TABLE tracks (\n  traid     INTEGER, \n  title   TEXT, \n  artist INTEGER,\n  FOREIGN KEY(artist) REFERENCES artists(id)\n);\nINSERT INTO artists VALUES (1, "Tom Chapin");\nINSERT INTO tracks VALUES (1, "Great Big Words", 1);\n\n```\n\nSQL: INSERTing values in tables\n\n```jsx\nCREATE TABLE us_states (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    flower TEXT);\nINSERT INTO us_states VALUES (1, "California", "California Poppy");\n/* Or you can only specify some columns */\nINSERT INTO us_states (name, flower) VALUES ("Alaska", "Forget-me-not");\n```\n\nSQL: SELECTing with WHERE conditions\n\n```jsx\nCREATE TABLE fruits (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    price INTEGER,\n    season TEXT);\n/* What are the cheap fruits? */\nSELECT * FROM fruits WHERE price < 4;\n/* What are the expensive fruits? */\nSELECT * FROM fruits WHERE price > 5;\n/* What are the cheap fruits in the summer? */\nSELECT * FROM fruits WHERE price < 4 AND season = "summer";\n/* What fruits can I get in fall or winter? */\nSELECT * FROM fruits WHERE season = "summer" OR season = "winter";\n```\n\nSQL: SELECTing with WHERE conditions\n\n```jsx\nCREATE TABLE fruits (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    price INTEGER,\n    season TEXT);\n/* What are the cheap fruits? */\nSELECT * FROM fruits WHERE price < 4;\n/* What are the expensive fruits? */\nSELECT * FROM fruits WHERE price > 5;\n/* What are the cheap fruits in the summer? */\nSELECT * FROM fruits WHERE price < 4 AND season = "summer";\n/* What fruits can I get in fall or winter? */\nSELECT * FROM fruits WHERE season = "summer" OR season = "winter";\n```\n\nSQL: Filter with IN\n\n```jsx\n\nCREATE TABLE shoes (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    price REAL,\n    type TEXT);\n/* Which shoes will make me taller? */\nSELECT * FROM shoes WHERE type IN ("heel", "wedge");\n/* This is equivalent to: */\nSELECT * FROM shoes WHERE type = "heel" OR type = "wedge";\n/* Which shoes *won\'t* make me taller? */\nSELECT * FROM shoes WHERE type NOT IN ("heel", "wedge");\n\n```\n\nSQL: SELECTing rows\n\n```jsx\nCREATE TABLE veggies (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    season TEXT);\n/* Which of your vegetables should you eat? */\nSELECT * FROM veggies;\n/* Just show the names and seasons, we don\'t need to see ids */\nSELECT name, season FROM veggies;\n```\n\nSQL: SELECT with ORDER BY\n\n```jsx\nCREATE TABLE skyscrapers (id INTEGER PRIMARY KEY,\n    name TEXT,\n    country TEXT,\n    height_meters INTEGER,\n    floors INTEGER\n);\n/* Sort by their height in meters */\nSELECT * FROM skyscrapers ORDER BY height_meters;\n/* Reverse that sort (highest to lowest) */\nSELECT * FROM skyscrapers ORDER BY height_meters DESC;\n/* Sort by their floors, lowest to highest */\nSELECT * FROM skyscrapers ORDER BY floors ASC;\n```\n\nSQL: Transform SELECT results with CASE\n\n```jsx\nCREATE table species (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    appeared INTEGER /* mya, millions of years ago */,\n    phylum TEXT\n    );\nSELECT name, CASE \n    WHEN appeared < 540 AND appeared >= 245 THEN "Paleozoic"\n    WHEN appeared < 245 AND appeared >= 65 THEN "Mesozoic"\n    WHEN appeared < 65 THEN "Cenozoic"\n    END "era"\n    FROM species\n    ORDER BY era;\n```\n\nSQL: Filtering with LIKE\n\n```jsx\nCREATE TABLE dresses (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    description TEXT,\n    price REAL);\n/* Which ones have floral patterns? */\nSELECT  * FROM dresses WHERE description LIKE "%floral%";\n/* Which ones are blue? */\nSELECT  * FROM dresses WHERE description LIKE "%blue%";\n```\n\nSQL: Using SELECT with LIMIT\n\n```jsx\n\nCREATE TABLE top_programs(id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    creator TEXT,\n    votes INTEGER);\n/* But let\'s just show the top 3! */\nSELECT * FROM top_programs ORDER BY votes DESC LIMIT 3;\n```\n\nSQL: ROUND and other core functions\n\n```jsx\nCREATE TABLE organs (id INTEGER PRIMARY KEY,\n    name TEXT,\n    weight INTEGER,\n    important_functions TEXT);\nSELECT LOWER(name) AS name,\n    ROUND(weight) AS rounded_weight,\n    LOWER(TRIM(important_functions, ".")) AS desc\n    FROM organs WHERE weight > 1;\n```\n\nSQL: SELECT with aggregate functions\n\n```jsx\nCREATE TABLE paintings\n    (id INTEGER PRIMARY KEY,\n    name TEXT,\n    artist TEXT,\n    year INTEGER,\n    price REAL);\n/* What\'s the most expensive price for a painting? */\nSELECT MAX(price) as most_dollars_paid\n    FROM paintings;\n/* What\'s the average year these were painted? */\nSELECT AVG(year) \n    FROM paintings;\n/* How much money was paid for these paintings total? */\nSELECT SUM(price) AS total_dollars_paid\n    FROM paintings;\n/* How many cost more than 2 million? */\nSELECT COUNT(*) AS greater_than_2mil\n    FROM paintings WHERE price > 200000000;\n/* How many unique years are there? */\nSELECT COUNT(DISTINCT year) AS years_represented\n    FROM paintings;\n```\n\nSQL: Grouping SELECT results with GROUP BY\n\n```jsx\n\nCREATE TABLE bridges (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    length INTEGER, /* meters */\n    country TEXT);\nSELECT country, COUNT(*)\n    FROM bridges GROUP BY country;  \nSELECT country, SUM(length)\n    FROM bridges GROUP BY country;\n```\n\nSQL: Using HAVING with GROUPED BY\n\n```jsx\nCREATE TABLE nobel_prizes (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    field TEXT,\n    country TEXT,\n    year INTEGER\n    );\n/* Which countries had more than 1 person win? */\nSELECT country, COUNT(*) as num_won FROM nobel_prizes\n    GROUP BY country \n    HAVING num_won > 1;\n```\n\nSQL: JOIN on tables\n\n```jsx\nCREATE TABLE students (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT,\n    teacher_id INTEGER);    \nCREATE TABLE teachers (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    email TEXT);\n/* Show students next to their teachers */\nSELECT students.name, teachers.name AS teacher_name\n    FROM students\n    JOIN teachers\n    ON students.teacher_id = teachers.id;\n/* Show students next to their teachers,\n   even if they don\'t have a teacher assigned\n*/ \nSELECT students.name, teachers.name AS teacher_name\n    FROM students\n    LEFT OUTER JOIN teachers\n    ON students.teacher_id = teachers.id;\n```\n\nSQL: UPDATE and DELETE\n\n```jsx\nCREATE TABLE inventory (\n    id INTEGER PRIMARY KEY,\n    item TEXT,\n    price REAL);\n/* It\'s sale time for Halloween merchandise! */\nUPDATE inventory SET price = 20.00 WHERE id = 4;\nSELECT * FROM inventory;\n/* Woo, it got sold! */\nDELETE FROM inventory WHERE id = 4;\nSELECT * FROM inventory;\n```\n\nMore complex queries with AND/OR\n```jsx\nCREATE TABLE exercise_logs\n    (id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT,\n    minutes INTEGER, \n    calories INTEGER,\n    heart_rate INTEGER);\nSELECT * FROM exercise_logs WHERE calories > 50 ORDER BY calories;\n/* AND */\nSELECT * FROM exercise_logs WHERE calories > 50 AND minutes < 30;\n/* OR */\nSELECT * FROM exercise_logs WHERE calories > 50 OR heart_rate > 100;\n```\n\nQuerying IN subqueries\n\n```jsx\nCREATE TABLE exercise_logs\n    (id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT,\n    minutes INTEGER, \n    calories INTEGER,\n    heart_rate INTEGER);\nSELECT * FROM exercise_logs WHERE type = "biking" OR type = "hiking" OR type = "tree climbing" OR type = "rowing";\n/* IN */\nSELECT * FROM exercise_logs WHERE type IN ("biking", "hiking", "tree climbing", "rowing");\nCREATE TABLE drs_favorites\n    (id INTEGER PRIMARY KEY,\n    type TEXT,\n    reason TEXT);\nSELECT type FROM drs_favorites;\nSELECT * FROM exercise_logs WHERE type IN (\n    SELECT type FROM drs_favorites);    \nSELECT * FROM exercise_logs WHERE type IN (\n    SELECT type FROM drs_favorites WHERE reason = "Increases cardiovascular health");    \n/* LIKE */\nSELECT * FROM exercise_logs WHERE type IN (\n    SELECT type FROM drs_favorites WHERE reason LIKE "%cardiovascular%");\n```\n\nRestricting grouped results with HAVING\n\n```jsx\nCREATE TABLE exercise_logs\n    (id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT,\n    minutes INTEGER, \n    calories INTEGER,\n    heart_rate INTEGER);\nSELECT * FROM exercise_logs;\nSELECT type, SUM(calories) AS total_calories FROM exercise_logs GROUP BY type;\nSELECT type, SUM(calories) AS total_calories FROM exercise_logs\n    GROUP BY type\n    HAVING total_calories > 150;\nSELECT type, AVG(calories) AS avg_calories FROM exercise_logs\n    GROUP BY type\n    HAVING avg_calories > 70;     \nSELECT type FROM exercise_logs GROUP BY type HAVING COUNT(*) >= 2;\n```\nCalculating results with CASE\n\n```jsx\nCREATE TABLE exercise_logs\n    (id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type TEXT,\n    minutes INTEGER, \n    calories INTEGER,\n    heart_rate INTEGER);\nSELECT * FROM exercise_logs;\nSELECT COUNT(*) FROM exercise_logs WHERE heart_rate > 220 - 30;\n/* 50-90% of max*/\nSELECT COUNT(*) FROM exercise_logs WHERE\n    heart_rate >= ROUND(0.50 * (220-30)) \n    AND  heart_rate <= ROUND(0.90 * (220-30)); \n/* CASE */\nSELECT type, heart_rate,\n    CASE \n        WHEN heart_rate > 220-30 THEN "above max"\n        WHEN heart_rate > ROUND(0.90 * (220-30)) THEN "above target"\n        WHEN heart_rate > ROUND(0.50 * (220-30)) THEN "within target"\n        ELSE "below target"\n    END as "hr_zone"\nFROM exercise_logs;\nSELECT COUNT(*),\n    CASE \n        WHEN heart_rate > 220-30 THEN "above max"\n        WHEN heart_rate > ROUND(0.90 * (220-30)) THEN "above target"\n        WHEN heart_rate > ROUND(0.50 * (220-30)) THEN "within target"\n        ELSE "below target"\n    END as "hr_zone"\nFROM exercise_logs\nGROUP BY hr_zone;\n```\n\n**Difference between WHERE and HAVING clause**\n\n- WHERE clause can be used with a Select, Update and Delete Statement Clause but the HAVING clause can be used only with a Select statement.\n- We can\'t use an aggregate functions in the WHERE clause unless it is in a sub-query contained in a HAVING clause whereas we can use an aggregate function in the HAVING clause. We can use a column name in the HAVING clause but the column must be contained in the group by clause.\n- WHERE is used before the GROUP BY clause whereas a HAVING clause is used to impose a condition on the GROUP Function and is used after the GROUP BY clause in the query.\n- A WHERE clause applies to each and every row whereas a HAVING clause applies to summarized rows (summarized with GROUP BY).\n- In the WHERE clause the data that is fetched from memory depending on a condition whereas in HAVING the completed data is first fetched and then separated depending on the condition.\n\n\n**Mathematical functions in MySQL**\n\n- **COUNT()**\n```jsx\nSELECT COUNT(salary)\nFROM employees\nWHERE salary >= 40000;\n```\n- **AVG()**\n```jsx\nSELECT AVG(salary)\nFROM employees;\n```\n- **SUM()**\n```jsx\nSELECT SUM(Price)\nFROM Products;\n```\n- **MIN()**\n```jsx\nSELECT MIN(column_name)\nFROM table_name;\n```\n- **MAX()**\n```jsx\nSELECT MAX(column_name)\nFROM table_name;\n```\n\n**What is the order of SQL SELECT?**\n\nOrder of SQL SELECT statement is as follows SELECT, FROM, WHERE, GROUP BY, HAVING, ORDER BY.\n\n**What is a Composite PRIMARY KEY?**\n\nComposite PRIMARY KEY is a primary key created on more than one column (combination of multiple fields) in a table.\n\n**What do you mean by foreign key?**\n\nA Foreign key is a field which can uniquely identify each row in another table. And this constraint is used to specify a field as Foreign key. That is, this field points to primary key of another table. This usually creates a kind of link between the two tables.\n\n```jsx\nCREATE TABLE Orders\n(\nO_ID int NOT NULL,\nORDER_NO int NOT NULL,\nC_ID int,\nPRIMARY KEY (O_ID),\nFOREIGN KEY (C_ID) REFERENCES Customers(C_ID)\n)\n```\n\n\n**What is a primary key?**\n\nA primary key is a column whose values uniquely identify every row in a table. Primary key values can never be reused. If a row is deleted from the table, its primary key may not be assigned to any new rows in the future. To define a field as primary key, following conditions had to be met :\n- No two rows can have the same primary key value.\n- Every row must have a primary key value\n- Primary key field cannot be null\n- Values in primary key columns can never be modified or updated\n\n**What is a Composite Key ?**\n\nA Composite primary key is a type of candidate key, which represents a set of columns whose values uniquely identify every row in a table. \n\nFor example - if "Employee_ID" and "Employee Name" in a table is combined to uniquely identifies a row its called a Composite Key.\n\n**What is a Composite Primary Key ?**\n\nA Composite primary key is a set of columns whose values uniquely identify every row in a table. What it means is that, table which contains composite primary key will be indexed based on columns specified in the primary key. This key will be referred in Foreign Key tables.\n\nFor example - if combined effect of columns, "Employee_ID" and "Employee Name" in a table is required to uniquely identifies a row, its called a Composite Primary Key. In this\ncase, both the columns will be represented as primary key.\n\n**What is a Foreign Key ?**\n\nWhen a "one" table\'s primary key field is added to a related "many" table in order to create the common field which relates the two tables, it is called a foreign key in the "many" table. \n\nFor example, salary of an employee is stored in salary table. Relation is established via foreign key column \u201cEmployee_ID_Ref\u201d which refers \u201cEmployee_ID\u201d field in Employee table\n\n\n**What is a Unique Key ?**\n\nUnique key is same as primary with difference being existence of null. Unique key field allows one value as NULL value.\n\n**What is the difference between Primary Key and Unique Key?**\n\n- We can have only one Primary Key in a table whereas we can have more than one Unique Key in a table.\n- The Primary Key cannot have a NULL value whereas a Unique Key may have only one null value.\n- By default, a Primary Key is a Clustered Index whereas by default, a Unique Key is a unique non-clustered index.\n- A Primary Key supports an Auto Increment value whereas a Unique Key doesn\'t support an Auto Increment value.\n\n**What is the difference between primary key and unique constraints?**\n\nPrimary key cannot have NULL value, the unique constraints can have NULL values.\n\nThere is only one primary key in a table, but there can be multiple unique constrains.\n\n\n**What is a primary key, a foreign key and unique key?**\n\nPrimary key is a field in the table which uniquely identifies a row. It cannot be NULL\n\nForeign key is a field in one table which is a primary key in another table. A relationship is created between the two tables by referencing the foreign key of one table with the primary key of another table.\n\nUnique Key uniquely identifies a record in a table. There can be many unique key constraints defined on a table.\n\n\n**What is the difference between BETWEEN and IN condition operators?**\n\nThe BETWEEN operator is used to display rows based on a range of values. The values can be numbers, text, and dates as well. BETWEEN operator gives us the count of all the values occurs between a particular range.\n\nThe IN condition operator is used to check for values contained in a specific set of values. IN operator is used when we have more than one value to choose.\n\n\n**Which are the different character-manipulation functions in SQL?**\n\n- **CONCAT**: join two or more values together.\n- **SUBSTR**: used to extract the string of specific length.\n- **LENGTH**: return the length of the string in numerical value.\n- **INSTR**: find the exact numeric position of a specified character.\n- **LPAD**: padding of the left-side character value for right-justified value.\n- **RPAD**: padding of right-side character value for left-justified value.\n- **TRIM**: remove all the defined character from the beginning, end or both beginning and end.\n- **REPLACE**: replace a specific sequence of character with other sequences of character.\n\n\n**What is the difference between TRUNCATE and DELETE commands?** \n\n- The DELETE command is used to remove rows from a table based on a WHERE condition whereas TRUNCATE removes all rows from a table.\n- So we can use a where clause with DELETE to filter and delete specific records whereas we cannot use a Where clause with TRUNCATE.\n- DELETE is executed using a row lock, each row in the table is locked for deletion whereas TRUNCATE is executed using a table lock and the entire table is locked for\nremoval of all records.\n- DELETE is a DML command whereas TRUNCATE is a DDL command.\n- DELETE retains the identity of the column value whereas in TRUNCATE, the Identify column is reset to its seed value if the table contains any identity column.\n- To use Delete you need DELETE permission on the table whereas to use Truncate on a table you need at least ALTER permission on the table.\n- DELETE uses more transaction space than the TRUNCATE statement whereas Truncate uses less transaction space than DELETE statement.\n- DELETE can be used with indexed views whereas TRUNCATE cannot be used with indexed views.\n- The DELETE statement removes rows one at a time and records an entry in the transaction log for each deleted row whereas TRUNCATE TABLE removes the data\nby deallocating the data pages used to store the table data and records only the page deallocations in the transaction log.\n- Delete activates a trigger because the operation is logged individually whereas TRUNCATE TABLE can\'t activate a trigger because the operation does not log\nindividual row deletions.\n\n\n\n '}}]);