(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[200],{769:function(e,n,t){"use strict";t.r(n),n.default=" Redux is a tool to help you manage global state. Redux is built around the concept of actions and reducers.\n\nThe advantages of Redux are\n\n- Centralizes application's state\n- Makes data flow transparent and predictable\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/reactjs/1.PNG)\n\n## Redux Architecture\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/reactjs/2.PNG)\n\nWe need to follow the below steps in building a redux app.\n\n- Design the store\n- Define the actions\n- Create a reducer\n- Setup the store\n\n1. **Action**\n\nActions are just objects with a type and a payload(optional). Each action has a case correlated in the reducer file.\nActions only tell what to do, but they don't tell how to do.\n\n\n\nFor example,\n\n```jsx\nreturn {\ntype: ADD_EMPLOYEE,\npayload: employee\n}\n```\n\n**Action Creator**\n\nPure function which creates an action\n\nFor example,\n\n```jsx\nconst addEmployee = employee => {\nreturn {\ntype: ADD_EMPLOYEE,\npayload: employee\n}\n}\n```\n\nThis is Reusable, Portable and Easy To Test.\n\n2. **Reducer**\n\nReducers are the functions that take the current state and an action as arguments, and return a new state result.\n\nFor example,\n\n```jsx\nconst intialState = {\nemployees: [],\n}\n\nconst reducer = (state = intialState, action) => {\nswitch (action.type) {\ncase FETCH_EMPLOYEES:\nreturn {\nemployees: action.payload,\n}\ncase ADD_EMPLOYEE:\nreturn {\n...state,\nemployees: [...state.employees, action.payload],\n}\ncase DELETE_EMPLOYEE:\nreturn {\nemployees: [\n...state.employees.filter(employee => employee !== action.payload)\n]\n}\ncase UPDATE_EMPLOYEE:\nreturn {\nemployees: [\n\n                    ...state.employees.map(emp =>\n                        emp.emailId === action.payload.emailId ?\n                            { ...state.employees, ...action.payload } : emp)\n                ]\n            }\n\n\n        default: return state\n    }\n\n}\n```\n\n3. **Store**\n\nThe Redux store brings together the state, actions and reducers that make up your app.\n\nIt's important to note that you will only have a single store in a Redux application.\n\nEvery Redux store has a single root reducer function.\n\n\nFor example,\n\n```jsx\n\nconst rootReducer = combineReducers({\nemployee: employeeReducer\n})\n\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nconst store = createStore(rootReducer, applyMiddleware(thunk))\n\n```\n\n**In redux, you need to dispatch your action. You can perform logic and asynchronous calls here. After your action is dispatched, redux will look for a case in reducer that matches the type. The reduceris where state update happen. Combine all this together and you will have powerful global state management.**\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/reactjs/redux.png)\n\n## Redux Principles\n\n1. Single source of Truth\n\nThe global state of your application is stored as an object inside a single store.\n\n2. State is Read-Only\n\nThe only way to change the state is to dispatch an action.\n\n3. Immutability, One-way data flow, Predictability of outcome\n\n4. Changes are Made with Pure Reducer Functions "}}]);