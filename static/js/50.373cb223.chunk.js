(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[50],{619:function(n,t,e){"use strict";e.r(t),t.default=' It is a type of Creational Design Pattern.\n\nAbstract factory design pattern is used to manage different object types of same family. All the object should belong to same family but they are of different categories.\n\n```jsx\npublic interface Animal {\n\n\tpublic void display();\n}\n```\n\n```jsx\npublic class Cat implements Animal{\n\n\t@Override\n\tpublic void display() {\n\t\tSystem.out.println("I\'m the Cat");\n\t}\n\n}\n```\n\n```jsx\npublic class Fox implements Animal{\n\t@Override\n\tpublic void display() {\n\t\tSystem.out.println("I\'m the Fox");\n\t}\n\n}\n```\n\n```jsx\npublic class Owl implements Animal{\n\n\tpublic void display() {\n\t\tSystem.out.println("I\'m the Owl");\n\t}\n\n}\n```\n\n```jsx\npublic abstract class AnimalFactory {\n\tpublic abstract Animal create(String animal);\n\n}\n```\n\n```jsx\npublic class BirdsFactory extends AnimalFactory{\n\n\t@Override\n\tpublic Animal create(String animal) {\n\t\tanimal = animal.toUpperCase();\n\t\tif(animal.equals("OWL")){\n\t\t\treturn new Owl();\n\t\t}\n\t\treturn null;\n\t}\n\n}\n```\n\n```jsx\npublic class MammalsFactory extends AnimalFactory {\n\n\t@Override\n\tpublic Animal create(String animal) {\n\t\tanimal = animal.toUpperCase();\n\t\tswitch (animal) {\n\t\tcase "CAT":\n\t\t\treturn new Cat();\n\t\tcase "FOX":\n\t\t\treturn new Fox();\n\t\tdefault:\n\t\t\treturn null;\n\t\t}\n\n\t}\n\n}\n```\n\n```jsx\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tAnimalFactory factory = new BirdsFactory();\n\t\tAnimal owl = factory.create("Owl");\n\t\towl.display();\n\t\tfactory = new MammalsFactory();\n\t\tAnimal fox = factory.create("Fox");\n\t\tfox.display();\n\n\t}\n\n}\n```\n\n**Output**\n\n```jsx\nI\'m the Owl\nI\'m the Fox\n```\n\n### Benefits\n\n- It helps to group related objects or functions.\n- Also, reduces errors of mixing of objects or functions from different groups.\n- Helps to abstract code so that user don\u2019t need to worry about object creations.\n\n### Limitations\n\n- Only useful when we have to group processes or objects.\n- Before getting object or calling the function we need to get the factory which adds one more processes.\n- Adds more classes and abstraction hence code could become complex.\n\n### Abstract Factory Design Pattern Example in JDK\n\nSome of the Abstract factory pattern example in Java classes are;\n\n- DocumentBuilderFactory\n- TransformerFactory\n- XPathFactory '}}]);