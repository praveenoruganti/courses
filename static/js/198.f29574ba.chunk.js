(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[198],{767:function(n,t,e){"use strict";e.r(t),t.default=" There might be instances where you have been using the same repetitive and redundant stateful logic inside multiple components. We were able to handle this situation by relying on Render props and Higher Order Components. But with hooks, we can do it in a much simpler and cleaner way, Thanks to the Custom hooks.\n\n**Okay, But what are they?**\nThese are normal javascript functions which can use other hooks inside of it and contain a common stateful logic that can be reused within multiple components. These functions are prefixed with the word use.\n\nLets say you have 2 functions (components) which implement some common logic. You can create a third function with this common logic and implement it in the other two functions. After all, hooks are just functions.\n\n**Custom hooks means fewer keystrokes and less repetitive code.**\n\nFor Example,\n\n**useDocumentTitle hook**\nSay we have to build a component which on every click increases the count and updates the title of the page with the count value using hooks.\n\n```jsx\nimport React, { useState, useEffect } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  const increment = () => setCount(count + 1);\n\n  useEffect(() => {\n    document.title = `You clicked count times`;\n  },[count]);\n\n  return (\n    <div>\n      <h3>{count}</h3>\n      <button onClick={increment}>Increment</button>\n    </div>\n  );\n}\n\n```\n\nIt works well. I always prefer creating the component first and then extracting out the stateful logic from that function(component) and then putting it into another function(custom hook) and then just doing some refactoring so the component works well with our hook.\n\nLets take the useEffect section out of the component and put it inside our new function useDocumentTitle.\n\n```jsx\nimport React, { useState, useEffect } from 'react';\n\nconst useDocumentTitle = title =>{\n    useEffect(\n        () =>{\n            document.title = title;\n        },\n        [title]\n    );\n};\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  const increment = () => setCount(count + 1);\n  const title = `You clicked count times`;\n  useDocumentTitle(title);\n  return (\n    <div>\n      <h3>{count}</h3>\n      <button onClick={increment}>Increment</button>\n    </div>\n  );\n}\n\n```\n\n\n\n\n\n\n "}}]);