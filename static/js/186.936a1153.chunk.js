(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[186],{755:function(e,n,t){"use strict";t.r(n),n.default=" ## What is JSX?\n\n```jsx\n<div>\n<h1>Main Heading</h1>\n<img src=\"PraveenOruganti.jpg\" alt=\"Praveen Oruganti\"/>\n<p>{imageDescription}</p>\n</div>\n\n```\nJSX is a syntax extension to JavaScript. It allows us to define React elements using syntax that looks very similar to HTML. It is used to define the look of the UI. In other words, it is used to define the structure of React Components.\n\n**HTML vs JSX**\n\nUnlike HTML, JSX couples the rendering logic with other UI logic such as event handling, state changing, data displaying etc..\n\n```jsx\nconst imageDescription= \"This is Praveen Oruganti\";\n<div>\n<h1>Main Heading</h1>\n<img src=\"PraveenOruganti.jpg\" alt=\"Praveen Oruganti\"/>\n<p>{imageDescription}</p>\n</div>\n\n```\n## Why JSX?\n\nReact embraces the fact that rendering logic is inherently coupled with other UI logic: how events are handled, how the state changes over time, and how the data is prepared for display.\n\nInstead of artificially separating technologies by putting markup and logic in separate files, React separates concerns with loosely coupled units called **components** that contain both. We will come back to components in upcoming topics, but if you\u2019re not yet comfortable putting markup in JS, this talk might convince you otherwise.\n\nReact doesn't require using JSX, but most people find it helpful as a visual aid when working with UI inside the JavaScript code. It also allows React to show more useful error and warning messages.\n\n## Embedding Expressions in JSX\nIn the example below, we declare a variable called name and then use it inside JSX by wrapping it in curly braces:\n\n```jsx\nconst name = 'Praveen Oruganti';\nconst element = <h1>Hello, {name}</h1>;\nReactDOM.render(element, document.getElementById('root'));\n```\nYou can put any valid JavaScript expression inside the curly braces in JSX. For example, 2 + 2, user.firstName, or formatName(user) are all valid JavaScript expressions.\n\nIn the example below, we embed the result of calling a JavaScript function, formatName(user), into an <h1> element.\n\n```jsx\nfunction formatName(user) {\n    return user.firstName + ' ' + user.lastName;\n}\nconst user = {\n    firstName: 'Praveen',\n    lastName: 'Oruganti'\n};\nconst element = (\n    <h1>\n        Hello, {formatName(user)}!\n    </h1>\n);\nReactDOM.render(element, document.getElementById('root'));\n\n```\n\n**JSX is an Expression Too**\n\nAfter compilation, JSX expressions become regular JavaScript function calls and evaluate to JavaScript objects.\n\nThis means that you can use JSX inside of if statements and for loops, assign it to variables, accept it as arguments, and return it from functions:\n\n```jsx\nfunction getGreeting(user) {\n    if (user) {\n        return <h1>Hello, {formatName(user)}!</h1>;\n    }\n    return <h1>Hello, Stranger.</h1>;\n}\n```\n\n## Specifying Attributes with JSX\nYou may use quotes to specify string literals as attributes:\n```jsx\nconst element = <div tabIndex=\"0\"></div>;\n```\n\nYou may also use curly braces to embed a JavaScript expression in an attribute:\n\n```jsx\nconst element = <img src={user.avatarUrl}></img>;\n```\nDon't put quotes around curly braces when embedding a JavaScript expression in an attribute. You should either use quotes (for string values) or curly braces (for expressions), but not both in the same attribute.\n\n**Warning:**\n\nSince JSX is closer to JavaScript than to HTML, React DOM uses camelCase property naming convention instead of HTML attribute names.\n\nFor example, class becomes className in JSX, and tabindex becomes tabIndex.\n\n## Specifying Children with JSX\nIf a tag is empty, you may close it immediately with />, like XML:\n\n```jsx\nconst element = <img src={user.avatarUrl} />;\n```\nJSX tags may contain children:\n```jsx\nconst element = (\n    <div>\n        <h1>Hello!</h1>\n        <h2>Good to see you here.</h2>\n    </div>\n);\n```\n## JSX Prevents Injection Attacks\nIt is safe to embed user input in JSX:\n```jsx\nconst title = response.potentiallyMaliciousInput;\n// This is safe:\nconst element = <h1>{title}</h1>;\n```\nBy default, React DOM escapes any values embedded in JSX before rendering them. Thus it ensures that you can never inject anything that's not explicitly written in your application. Everything is converted to a string before being rendered. This helps prevent XSS (cross-site-scripting) attacks.\n\n## JSX Represents Objects\nBabel compiles JSX down to React.createElement() calls.\n\nThese two examples are identical:\n\n```jsx\nconst element = (\n    <h1 className=\"greeting\">\n        Hello, world!\n    </h1>\n);\n```\n\n```jsx\nconst element = React.createElement(\n    'h1',\n    { className: 'greeting' },\n    'Hello, world!'\n);\n```\nReact.createElement() performs a few checks to help you write bug-free code but essentially it creates an object like this:\n\n```jsx\n// Note: this structure is simplified\nconst element = {\n    type: 'h1',\n    props: {\n        className: 'greeting',\n        children: 'Hello, world!'\n    }\n};\n```\nThese objects are called **React elements**. You can think of them as descriptions of what you want to see on the screen. React reads these objects and uses them to construct the DOM and keep it up to date.\n\n## How to use styles in React?\nThe style attribute accepts a JavaScript object with camelCased properties rather than a CSS string. This is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS security holes.\n\n```jsx\nconst divStyle = {\n  color: 'blue',\n  backgroundImage: 'url(' + imgUrl + ')'\n};\n\nfunction HelloWorldComponent() {\n  return <div style={divStyle}>Hello World!</div>\n}\n```\nStyle keys are camelCased in order to be consistent with accessing the properties on DOM nodes in JavaScript (e.g. node.style.backgroundImage).\n\n\n\n\n\n "}}]);