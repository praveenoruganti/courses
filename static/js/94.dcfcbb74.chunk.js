(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[94],{663:function(e,a,n){"use strict";n.r(a),a.default=' James Gosling introduced Java on 1991 but it was released on 1995.\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/java/james.jpg)\n\nJava is a object oriented programming language and it is platform independent.\n\n**Features of Java**\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/java/java_features.jpg)\n\n**Platform Independence**\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/java/platform.jpg)\n\nPlatform Independence is also called build once, run anywhere. Java is one of the most popular platform independent languages. Once we compile a java program and build a jar, we can run the jar (compiled java program) in any Operating System - where a JVM is installed.\n\nJava achieves Platform Independence in a beautiful way. On compiling a java file the output is a class file - which contains an internal java representation called bytecode. \n\nJVM converts bytecode to executable instructions. The executable instructions are different in different operating systems. So, there are different JVM\'s for different operating systems. A JVM for windows is different from a JVM for mac.\n\nHowever, both the JVM\'s understand the bytecode and convert it to the executable code for the respective operating system.\n\n\n**What is ByteCode?**\n\nJava bytecode is the instruction set of the Java virtual machine. Each bytecode is composed of one, or in some cases two bytes that represent the instruction (opcode), along with zero or more bytes for passing parameters.\n\n\n**JDK (Java Development Kit)**\n\nJDK stands for Java Development Kit. It contains the tools and libraries for development of Java programs. It also contains compilers and debuggers needed to compile Java program.\n\nsetx path %path%:; c:/Java/jdk/bin\n\nJava code(.java) -> compiler -> Byte code(.class)\n\n**JRE(Java Runtime Environment)**\n\nJRE stands for Java Runtime Environment. This is included in JDK. JRE provides libraries and JVM that is required to run a Java program.\n\nJRE -> JVM + Libraries.\n\nIt is runtime environment and required to run a .class file. JRE is platform dependent.\n\n**JVM(Java Virtual Machine)**\n\nJava Virtual Machine (JVM) is an abstract machine that executes Java Bytecode. There are different JVM for different hardware and software platforms. So JVM is platform dependent. \n\nJVM performs following operations\n\n- Loads the code\n- Verifies the code\n- Executes the code\n- Provides the runtime environment\n\nclass file (Runtime) -> classloader -> byte code verifier -> Interpeter ->runtime -> Hardware\n\n**JDK v JRE vs JVM**\n\nJRE is subset of JDK while JVM is an abstract computing machine.\n\nJVM, JRE and JDK are platform dependent because configuration of each OS differs but java is platform independent.\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/java/jdk.jpg)\n\n\n**Environment Variables**\n\n**Path**: Path variable is set for providing path for all java tools like java, javac, javap, javah, jar,applet viewer.\n\nset PATH="C:/Java/jdk/bin"\n\n**Classpath**: classpath variable is set for providing path for all java classes which is used in our application.\n\nset CLASSPATH="C:/Java/jre/lib/rt.jar"\n\nset JAVA_HOME="c:/Java/jdk"\n\n\n\n '}}]);