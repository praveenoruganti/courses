(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[221],{790:function(e,n,t){"use strict";t.r(n),n.default=' Application Listener can generically declare the event type that it is interested in. When registered with a Spring Application Context, events will be filtered accordingly, with the listener getting invoked for matching event objects only.\n\nApplication events are available since the very beginning of the Spring framework as a mean for loosely coupled components to exchange information.\n\nTypes of event are available\n\n- Start \u2013 ContextStartedEvent\n- Stop \u2013 ContextStoppedEvent\n- Refresh \u2013 ContextRefreshedEvent\n- Close \u2013 ContextClosedEvent\n\nLets start creating a listener now.\n\n```jsx\n@Component\npublic class ContextRefreshHandler implements ApplicationListener<ContextRefreshedEvent>{\n\n @Override\n public void onApplicationEvent(ContextRefreshedEvent event) {\n     System.out.println("Context Refreshed Event Received "+ event.toString());\n }\n\n}\n```\n\n```jsx\npublic class ContextStartHandler implements ApplicationListener<ContextStartedEvent> {\n    @Override\n    public void onApplicationEvent(ContextStartedEvent event) {\n        System.out.println("Context Started Event Received " +event.toString());\n    }\n\n}\n\n```\n\n```jsx\n\npublic class ContextStopHandler implements ApplicationListener<ContextStoppedEvent> {\n    @Override\n    public void onApplicationEvent(ContextStoppedEvent event) {\n        System.out.println("Context Stopped Event Received "+ event.toString());\n    }\n\n}\n\n```\n\n```jsx\npublic class ContextCloseHandler implements ApplicationListener<ContextClosedEvent> {\n    @Override\n    public void onApplicationEvent(ContextClosedEvent event) {\n        System.out.println("Context Closed Event Received " +event.toString());\n    }\n\n}\n\n\n```\n\nLet\'s create a customized listener now.\n\n```jsx\n\npublic class CreateLogEvent extends ApplicationEvent {\n\n private static final long serialVersionUID = 391259937537604095L;\n\n private String message;\n\n    public CreateLogEvent(Object source, String message) {\n        super(source);\n        this.message = message;\n    }\n    public String getMessage() {\n        return message;\n    }\n\n}\n\n```\n\n```jsx\n@Repository\npublic class PraveenLogDAOImpl implements PraveenLogDAO {\n\n private JdbcTemplate jdbcTemplate;\n @Autowired\n PraveenLogDAOImpl(DataSource dataSource1) {\n  this.jdbcTemplate = new JdbcTemplate(dataSource1);\n }\n\n @Autowired\n ApplicationEventPublisher publisher;\n\n @Override\n public PraveenLog createLog(PraveenLog praveenLog) throws Exception {\n  final String sql = "insert into PRAVEENLOG(PRAVEENLOG_MESSAGE,PRAVEENLOG_DATE) values(?,?)";\n  KeyHolder holder = new GeneratedKeyHolder();\n  jdbcTemplate.update(new PreparedStatementCreator() {\n   @Override\n   public PreparedStatement createPreparedStatement(Connection connection) throws SQLException {\n    PreparedStatement ps = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);\n    ps.setString(1, praveenLog.getLogMessage());\n    ps.setDate(2, praveenLog.getLogDate());\n    return ps;\n   }\n  }, holder);\n  int praveenLogId = holder.getKey().intValue();\n  System.out.println("Publishing Create Log Event");\n  praveenLog.setLogId(praveenLogId);\n  CreateLogEvent cle= new CreateLogEvent(this,"Praveen");\n  publisher.publishEvent(cle);\n  return praveenLog;\n }\n\n\n @Override\n public List<PraveenLog> getAllLogs() {\n  return jdbcTemplate.query("select * from PRAVEENLOG", new PraveenLogRowMapper());\n }\n\n}\n\n```\n\n```jsx\n@Component\npublic class CreateLogHandler implements ApplicationListener<CreateLogEvent> {\n\n @Override\n public void onApplicationEvent(CreateLogEvent event) {\n  System.out.println("Received Create Log Event  " + event.getMessage());\n\n }\n\n}\n```\n\n**Output**\n\n```jsx\n\nPublishing Create Log Event\n\nReceived Create Log Event Praveen\n\n```\n '}}]);