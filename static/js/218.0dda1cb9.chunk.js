(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[218],{787:function(n,e,t){"use strict";t.r(e),e.default=' Autowiring is a concept of injecting a spring bean automatically without writing <ref/> tag by programmer. Programmer does not required to write explicitly Dependency Injection.\n\n**Autowiring can be configured in 2 ways**\n\n- XML based\n- Annotation Based\n\n@Autowired by default operate byType and if its type is not available then it checks the name.If name and type not available then it checks if there are any qualifier for that bean using annotation @Qualifier("praveen")\n\nAll these processing will be done by BeanPostProcessor for each annotation.\n\n**XML Based**\n\nXML based autowiring can be classified as\n\n- byName : compares the spring bean (java code) filed name (variable name) and configuration code (XML file) bean name (bean tag name) , if they are matched then automatically those objects will be bonded with each other using setter injection.\n- byType: It compares bean class variable Data type and spring bean class type. If both are matched then it will do setter injection.\n- constructor: It check for parameterized constructor for creating object with reference type as parameter. If not found then uses default constructor at last. Always checks More number of parameters first, if not matched then next level less no of parameters constructor will be compared, and then goes on up to default constructor.\n- no : it will not do any auto wiring. It is disabled by default.\n- autodetect (works only in older versions like 2.X) : It works like byType if default constructor is available in spring bean, if not works like constructor if parameterized constructor is available.\n  ex: consider the below example for above concept. Employee class has a Address class Dependency.\n\nFor example,\n\n```jsx\npublic class Address {\nprivate int addrId;\nprivate String loc;\npublic int getAddrId() {\nreturn addrId;\n}\npublic void setAddrId(int addrId) {\nthis.addrId = addrId;\n}\npublic String getLoc() {\nreturn loc;\n}\npublic void setLoc(String loc) {\nthis.loc = loc;\n}\n@Override\npublic String toString() {\nreturn \u201cAddress [addrId=\u201d + addrId + \u201c, loc=\u201d + loc + \u201c]\u201d;\n}\n}\n\n```\n\n```jsx\npublic class Employee {\nprivate Address address;\npublic Employee() {\nsuper();\nSystem.out.println(\u201cIn default\u201d);\n}\npublic Employee(Address address) {\nsuper();\nthis.address = address;\nSystem.out.println(\u201cin Param\u201d);\n}\npublic Address getAddress() {\nreturn address;\n}\npublic void setAddress(Address address) {\nthis.address = address;\n}\n@Override\npublic String toString() {\nreturn \u201cEmployee [addr=\u201d + address + \u201c]\u201d;\n}\n}\n\n```\n\n**beans.xml**\n\n```jsx\n<?xml version=\u201d1.0\u2033 encoding=\u201dUTF-8\u2033?>\n<beans xmlns=\u201dhttp://www.springframework.org/schema/beans&#8221;\nxmlns:xsi=\u201dhttp://www.w3.org/2001/XMLSchema-instance&#8221;\nxmlns:util=\u201dhttp://www.springframework.org/schema/util&#8221;\nxmlns:context=\u201dhttp://www.springframework.org/schema/context&#8221;\nxsi:schemaLocation=\u201dhttp://www.springframework.org/schema/beans\nhttp://www.springframework.org/schema/beans/spring-beans.xsd\nhttp://www.springframework.org/schema/util\nhttp://www.springframework.org/schema/util/spring-util.xsd\nhttp://www.springframework.org/schema/context\nhttp://www.springframework.org/schema/context/spring-context.xsd\n\u201c>\n<bean class=\u201dcom.praveen.autowire.bean.Address\u201d id=\u201daddress\u201d>\n<property name=\u201daddrId\u201d value=\u201d102\u2033 />\n<property name=\u201dloc\u201d value=\u201dHYD\u201d />\n</bean>\n<!\u2013 <bean class=\u201dcom.praveen.autowire.bean.Employee\u201d id=\u201dempObj\u201d autowire=\u201dbyType\u201d>\u2013>\n<bean class=\u201dcom.praveen.autowire.bean.Employee\u201d id=\u201demployee\u201d autowire=\u201dbyName\u201d>\n<!\u2013<bean class=\u201dcom.praveen.autowire.bean.Employee\u201d id=\u201dempObj\u201d autowire=\u201dconstructor\u201d> \u2013>\n</bean>\n</beans>\n\n```\n\n```jsx\npublic class EmployeeTest {\nprivate static ApplicationContext context;\npublic static void main(String[] args) {\ncontext = new ClassPathXmlApplicationContext(\u201cbeans.xml\u201d);\nEmployee obj = (Employee)context.getBean(\u201cemployee\u201d);\nSystem.out.println(obj);\n}\n}\n\n\n```\n\n**Output for byName and byType**\n\n```jsx\n\nAug 02, 2019 12:05:12 AM org.springframework.context.support.ClassPathXmlApplicationContext prepareRefresh\n\nINFO: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@4ccabbaa: startup date [Fri Aug 02 00:05:12 IST 2019]; root of context hierarchy\n\nAug 02, 2019 12:05:12 AM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions\n\nINFO: Loading XML bean definitions from class path resource [bean.xml]\n\nIn default\n\nEmployee [addr=Address [addrId=102, loc=HYD]]\n\n```\n\nOutput for constructor\n\n```jsx\n\nAug 02, 2019 12:07:09 AM org.springframework.context.support.ClassPathXmlApplicationContext prepareRefresh\n\nINFO: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@4ccabbaa: startup date [Fri Aug 02 00:07:09 IST 2019]; root of context hierarchy\n\nAug 02, 2019 12:07:09 AM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions\n\nINFO: Loading XML bean definitions from class path resource [bean.xml]\n\nin Param\n\nEmployee [addr=Address [addrId=102, loc=HYD]]\n```\n\n**Using Annotation approach**\n\n```jsx\npublic class Address {\nprivate int addrId;\nprivate String loc;\npublic int getAddrId() {\nreturn addrId;\n}\npublic void setAddrId(int addrId) {\nthis.addrId = addrId;\n}\npublic String getLoc() {\nreturn loc;\n}\npublic void setLoc(String loc) {\nthis.loc = loc;\n}\n@Override\npublic String toString() {\nreturn \u201cAddress [addrId=\u201d + addrId + \u201c, loc=\u201d + loc + \u201c]\u201d;\n}\n}\n\n```\n\n```jsx\npublic class Employee {\nprivate Address address;\npublic Employee() {\nsuper();\nSystem.out.println(\u201cIn default\u201d);\n}\n@Autowired\npublic Employee(Address address) {\nsuper();\nthis.address = address;\nSystem.out.println(\u201cin Param\u201d);\n}\npublic Address getAddress() {\nreturn address;\n}\npublic void setAddress(Address address) {\nthis.address = address;\n}\n@Override\npublic String toString() {\nreturn \u201cEmployee [addr=\u201d + address + \u201c]\u201d;\n}\n}\n```\n\n```jsx\n@Configuration\n@ComponentScan(basePackages = \u201ccom.praveen.autowire.annotations\u201d)\npublic class EmployeeConfig {\n@Bean(name=\u201dmyEmployee\u201d)\npublic Employee getBean() {\nEmployee emp= new Employee();\nAddress addr= new Address();\naddr.setAddrId(102);\naddr.setLoc(\u201cHYD\u201d);\nemp.setAddress(addr);\nreturn emp;\n}\n}\n```\n\n```jsx\npublic class EmployeeTest {\nprivate static ApplicationContext context;\npublic static void main(String[] args) {\ncontext = new AnnotationConfigApplicationContext(EmployeeConfig.class);\nEmployee obj = (Employee)context.getBean(Employee.class);\nSystem.out.println(obj);\n}\n}\n```\n\n**Output**\n\n```jsx\n\nAug 02, 2019 9:47:12 AM org.springframework.context.annotation.AnnotationConfigApplicationContext prepareRefresh\n\nINFO: Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@2077d4de: startup date [Fri Aug 02 09:47:12 IST 2019]; root of context hierarchy\n\nIn default\n\nEmployee [addr=Address [addrId=102, loc=HYD]]\n\n```\n\n\n '}}]);