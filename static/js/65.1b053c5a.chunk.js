(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[65],{634:function(t,n,i){"use strict";i.r(n),n.default=" Cycle sort is a comparison sorting algorithm which forces array to be factored into the number of cycles where each of them can be rotated to produce a sorted array. It is theoretically optimal in the sense that it reduces the number of writes to the original array.\n\nIt is an in-place and unstable sorting algorithm.\n\nIt is optimal in terms of number of memory writes. It minimizes the number of memory writes to sort. Each value is either written zero times, if it\u2019s already in its correct position, or written one time to its correct position.\n\n\nConsider an array of n distinct elements. An element a is given, index of a can be calculated by counting the number of elements that are smaller than a.\n\n- If the element is found to be at its correct position, simply leave it as it is.\n- Otherwise, find the correct position of a by counting the total number of elements that are less than a . where it must be present in the sorted array. The other element b which is replaced is to be moved to its correct position. This process continues until we got an element at the original position of a.\n\n\nLet's start coding for cyclic sort\n\n```jsx\npackage com.praveen.sort;\n\nimport java.util.Arrays;\n\npublic class CyclicSort {\n\n\tpublic static void main(String[] args) {\n\t\tint[] arr = { 5, 4, 3, 2, 1};\n\t\tcyclic(arr);\n\t\tSystem.out.println(Arrays.toString(arr));\n\n\t}\n\n\tprivate static void cyclic(int[] arr) {\n\t\tint i = 0;\n\t\twhile (i < arr.length) {\n\t\t\tint correct = arr[i] - 1;\n\t\t\tif (arr[i] != arr[correct]) {\n\t\t\t\tswap(arr, i, correct);\n\t\t\t} else {\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate static void swap(int[] arr, int first, int second) {\n\t\tint temp = arr[first];\n\t\tarr[first] = arr[second];\n\t\tarr[second] = temp;\n\t}\n\n}\n\n```\n\n**Output**\n\n```jsx\n[1, 2, 3, 4, 5]\n\n```\n\n`Let's see some programs`\n\n`1.Missing Number`\n\n```jsx\npackage com.praveen.sort.cyclic;\n\npublic class MissingNumber {\n\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(missingNumber(new int[] { 4, 0, 2, 1 }));\n\t\tSystem.out.println(missingNumber(new int[] { 9, 6, 4, 2, 3, 5, 7, 0, 1 }));\n\n\t}\n\n\tprivate static int missingNumber(int[] arr) {\n\t\tint i = 0;\n\t\twhile (i < arr.length) {\n\t\t\tint correct = arr[i];\n\t\t\tif (arr[i] < arr.length && arr[i] != arr[correct]) {\n\t\t\t\tswap(arr, i, correct);\n\t\t\t} else {\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\n\t\t// search for first missing number\n\t\tfor (int index = 0; index < arr.length; index++) {\n\t\t\tif (arr[index] != index) {\n\t\t\t\treturn index;\n\t\t\t}\n\t\t}\n\n\t\t// case 2\n\t\treturn arr.length;\n\t}\n\n\tprivate static void swap(int[] arr, int first, int second) {\n\t\tint temp = arr[first];\n\t\tarr[first] = arr[second];\n\t\tarr[second] = temp;\n\t}\n\n}\n\n```\n\n**Output**\n\n```jsx\n3\n8\n\n```\n\n`2.Find All Numbers Disappeared in an Array`\n\n```jsx\npackage com.praveen.sort.cyclic;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindAllMissing {\n\n\tpublic static void main(String[] args) {\n\n\t\tSystem.out.println(findDisappearedNumbers(new int[] { 4, 3, 2, 7, 8, 2, 3, 1 }));\n\n\t}\n\n\tprivate static List<Integer> findDisappearedNumbers(int[] nums) {\n\t\tint i = 0;\n\t\twhile (i < nums.length) {\n\t\t\tint correct = nums[i] - 1;\n\t\t\tif (nums[i] != nums[correct]) {\n\t\t\t\tswap(nums, i, correct);\n\t\t\t} else {\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\n\t\t// just find missing numbers\n\t\tList<Integer> ans = new ArrayList<>();\n\t\tfor (int index = 0; index < nums.length; index++) {\n\t\t\tif (nums[index] != index + 1) {\n\t\t\t\tans.add(index + 1);\n\t\t\t}\n\t\t}\n\n\t\treturn ans;\n\t}\n\n\tprivate static void swap(int[] arr, int first, int second) {\n\t\tint temp = arr[first];\n\t\tarr[first] = arr[second];\n\t\tarr[second] = temp;\n\t}\n\n}\n\n```\n\n**Output**\n\n```jsx\n[5, 6]\n```\n\n`3.Find the Duplicate Number`\n\n```jsx\npackage com.praveen.sort.cyclic;\n\npublic class FindDuplicate {\n\n\tpublic static void main(String[] args) {\n\n\t\tSystem.out.println(findDuplicate(new int[] { 1, 3, 4, 2, 2 }));\n\t\tSystem.out.println(findDuplicate(new int[] { 3, 1, 3, 4, 2 }));\n\t}\n\n\tprivate static int findDuplicate(int[] arr) {\n\t\tint i = 0;\n\t\twhile (i < arr.length) {\n\n\t\t\tif (arr[i] != i + 1) {\n\t\t\t\tint correct = arr[i] - 1;\n\t\t\t\tif (arr[i] != arr[correct]) {\n\t\t\t\t\tswap(arr, i, correct);\n\t\t\t\t} else {\n\t\t\t\t\treturn arr[i];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\tprivate static void swap(int[] arr, int first, int second) {\n\t\tint temp = arr[first];\n\t\tarr[first] = arr[second];\n\t\tarr[second] = temp;\n\t}\n\n}\n\n```\n\n\n**Output**\n\n```jsx\n2\n3\n\n```\n\n`4.Find All Duplicates in an Array`\n\n```jsx\npackage com.praveen.sort.cyclic;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FindAllDuplicates {\n\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(findDuplicates(new int[] { 4, 3, 2, 7, 8, 2, 3, 1 }));\n\t\tSystem.out.println(findDuplicates(new int[] { 1, 1, 2 }));\n\t\tSystem.out.println(findDuplicates(new int[] { 1 }));\n\t}\n\n\tprivate static List<Integer> findDuplicates(int[] arr) {\n\t\tint i = 0;\n\t\twhile (i < arr.length) {\n\t\t\tint correct = arr[i] - 1;\n\t\t\tif (arr[i] != arr[correct]) {\n\t\t\t\tswap(arr, i, correct);\n\t\t\t} else {\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\n\t\tList<Integer> ans = new ArrayList<>();\n\t\tfor (int index = 0; index < arr.length; index++) {\n\t\t\tif (arr[index] != index + 1) {\n\t\t\t\tans.add(arr[index]);\n\t\t\t}\n\t\t}\n\n\t\treturn ans;\n\t}\n\n\tprivate static void swap(int[] arr, int first, int second) {\n\t\tint temp = arr[first];\n\t\tarr[first] = arr[second];\n\t\tarr[second] = temp;\n\t}\n\n}\n\n\n```\n\n**Output**\n\n```jsx\n[3, 2]\n[1]\n[]\n\n```\n\n`5.Set Mismatch`\n\n```jsx\npackage com.praveen.sort.cyclic;\n\nimport java.util.Arrays;\n\npublic class SetMismatch {\n\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(Arrays.toString(findErrorNums(new int[] { 1, 2, 2, 4 })));\n\t\tSystem.out.println(Arrays.toString(findErrorNums(new int[] { 1, 1 })));\n\t\tSystem.out.println(Arrays.toString(findErrorNums(new int[] { 1 })));\n\t}\n\n\tprivate static int[] findErrorNums(int[] arr) {\n\t\tint i = 0;\n\t\twhile (i < arr.length) {\n\t\t\tint correct = arr[i] - 1;\n\t\t\tif (arr[i] != arr[correct]) {\n\t\t\t\tswap(arr, i, correct);\n\t\t\t} else {\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\n\t\t// search for first missing number\n\t\tfor (int index = 0; index < arr.length; index++) {\n\t\t\tif (arr[index] != index + 1) {\n\t\t\t\treturn new int[] { arr[index], index + 1 };\n\t\t\t}\n\t\t}\n\t\treturn new int[] { -1, -1 };\n\t}\n\n\tprivate static void swap(int[] arr, int first, int second) {\n\t\tint temp = arr[first];\n\t\tarr[first] = arr[second];\n\t\tarr[second] = temp;\n\t}\n\n}\n\n```\n\n**Output**\n\n```jsx\n[2, 3]\n[1, 2]\n[-1, -1]\n\n```\n\n`6.First Missing Positive`\n\n```jsx\npackage com.praveen.sort.cyclic;\n\npublic class MissingPositive {\n\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(firstMissingPositive(new int[] { 1, 2, 0 }));\n\t\tSystem.out.println(firstMissingPositive(new int[] { 3, 4, -1, 1 }));\n\t\tSystem.out.println(firstMissingPositive(new int[] { 7, 8, 9, 11, 12 }));\n\t}\n\n\tprivate static int firstMissingPositive(int[] arr) {\n\t\tint i = 0;\n\t\twhile (i < arr.length) {\n\t\t\tint correct = arr[i] - 1;\n\t\t\tif (arr[i] > 0 && arr[i] <= arr.length && arr[i] != arr[correct]) {\n\t\t\t\tswap(arr, i, correct);\n\t\t\t} else {\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\n\t\t// search for first missing number\n\t\tfor (int index = 0; index < arr.length; index++) {\n\t\t\tif (arr[index] != index + 1) {\n\t\t\t\treturn index + 1;\n\t\t\t}\n\t\t}\n\n\t\t// case 2\n\t\treturn arr.length + 1;\n\t}\n\n\tprivate static void swap(int[] arr, int first, int second) {\n\t\tint temp = arr[first];\n\t\tarr[first] = arr[second];\n\t\tarr[second] = temp;\n\t}\n\n}\n\n```\n\n**Output**\n\n```jsx\n3\n2\n1\n\n``` "}}]);