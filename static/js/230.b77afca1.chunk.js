(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[230],{799:function(n,e,t){"use strict";t.r(e),e.default=' **How to configure InMemory authentication in spring security?**\n\n**Steps**\n\n1. Get Hold of AuthenticationManagerBuilder\n2. Set the configuration on it.\n\n**How to get hold of AuthenticationManagerBuilder?**\n\nThere is a class called WebSecurityConfigurerAdapter.java which we need to extend and override the configure(AuthenticationManagerBuilder auth).\n\nNow i will remove the default user id and password which i provided in my earlier step so that i can multiple user,password and role for the same.\n\nAs this is a sample, i am using NoOpPasswordEncoder for encoding the password.\n\n```jsx\n@Configuration\n@EnableWebSecurity\npublic class ApplicationSecurityConfig extends WebSecurityConfigurerAdapter {\n\n    private final PasswordEncoder passwordEncoder;\n\n    @Autowired\n    public ApplicationSecurityConfig(PasswordEncoder passwordEncoder) {\n        this.passwordEncoder = passwordEncoder;\n    }\n\n     // Authentication based on role\n     @Override\n     protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n      auth.inMemoryAuthentication()\n             .withUser("praveen")\n             .password(passwordEncoder.encode("password123"))\n             .roles("ADMIN")\n          .and()\n          .withUser("prasad")\n          .password(passwordEncoder.encode("password"))\n          .roles("USER");\n     }\n\n}\n\n```\n\n**How to configure InMemory authorization in spring security?**\n\nFor this we need to get hold of HttpSecurity and this can be done by extending the WebSecurityConfigurerAdapter.java and override the configure(HttpSecurity http) method.\n\n```jsx\n@Configuration\n@EnableWebSecurity\npublic class ApplicationSecurityConfig extends WebSecurityConfigurerAdapter {\n\n    private final PasswordEncoder passwordEncoder;\n\n    @Autowired\n    public ApplicationSecurityConfig(PasswordEncoder passwordEncoder) {\n        this.passwordEncoder = passwordEncoder;\n    }\n\n     // Authentication based on role\n     @Override\n     protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n      auth.inMemoryAuthentication()\n             .withUser("praveen")\n             .password(passwordEncoder.encode("password123"))\n             .roles("ADMIN")\n          .and()\n          .withUser("prasad")\n          .password(passwordEncoder.encode("password"))\n          .roles("USER");\n     }\n\n\n\n    // Authorization based on role\n     @Override\n     protected void configure(HttpSecurity http) throws Exception {\n      http.authorizeRequests()\n          .antMatchers("/api/v1/getMsg/admin").hasRole("ADMIN")\n          .antMatchers("/api/v1/getMsg/user").hasAnyRole("USER","ADMIN")\n             .antMatchers("/").permitAll()\n             .and().formLogin();\n     }\n\n}\n\n```\nPlease remember if you want to logout from the session then use [http://localhost:8080/logout](http://localhost:8080/logout).\n\n**How does spring authentication works internally?**\n\nThis is done using filters which does the magic here.\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/springboot/inmemoryauth.PNG)\n\nIn general for Authentication the inputs will be creditionals and output will be principle.\n\nAuthenticationProvider authenticate(Authentication authentication) method does the above.\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/springboot/inmemoryauth1.PNG)\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/springboot/inmemoryauth2.PNG)\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/springboot/inmemoryauth3.PNG)\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/springboot/inmemoryauth4.PNG) '}}]);