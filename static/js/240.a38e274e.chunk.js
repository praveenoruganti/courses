(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[240],{809:function(n,e,t){"use strict";t.r(e),e.default=' SpringBoot provides a very good support to building RESTful Web Services for enterprise applications.\n\nBefore going to build Restful Web Service, Let\'s see what is meant by **JSON**.\n\n**All About JSON**\n\nJSON stands for JavaScript Object Notation, it is a lightweight data-interchange format. \n\nYou can see many Java applications started to throw away XML format and start using JSON as a new data-interchange format. \n\nJava is all about object, often times, you need to convert an object into JSON format for data-interchange or vice verse.\n\nLet\'s see how we can convert Object to Json and Json to Object.\n\nIn order to convert Java object from JSON & vice versa, there are two APIs\n- Jackson API\n- Gson API\n\n\n**Jackson API**\n\nJackson API provides ObjectMapper class to do conversions. In order to perform the conversions, we will use below methods.\n\n- writeValueAsString() : converts java object into JSON\n- readValue() : converts JSON into java Object\n\n\n**Gson API**\n\nGson API provides below methods for conversions.\n\n- toJson() : converts java object into JSON\n- fromJson : converts JSON into java Object\n\n\nLet\'s see an example by using Jackson and Gson API for converting Java object from JSON & vice versa.\n\n```jsx\npackage com.praveen.json;\n\npublic class Employee {\n\n\tprivate String name;\n\tprivate Integer age;\n\tprivate String designation;\n\tprivate double salary;\n\n\tpublic Employee() {\n\t\tsuper();\n\t}\n\n\tpublic Employee(String name, Integer age, String designation, double salary) {\n\t\tsuper();\n\t\tthis.name = name;\n\t\tthis.age = age;\n\t\tthis.designation = designation;\n\t\tthis.salary = salary;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n\tpublic Integer getAge() {\n\t\treturn age;\n\t}\n\n\tpublic void setAge(Integer age) {\n\t\tthis.age = age;\n\t}\n\n\tpublic String getDesignation() {\n\t\treturn designation;\n\t}\n\n\tpublic void setDesignation(String designation) {\n\t\tthis.designation = designation;\n\t}\n\n\tpublic double getSalary() {\n\t\treturn salary;\n\t}\n\n\tpublic void setSalary(double salary) {\n\t\tthis.salary = salary;\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn "Employee [name=" + name + ", age=" + age + ", designation=" + designation + ", salary=" + salary + "]";\n\t}\n\n}\n```\n\n```jsx\npackage com.praveen.json;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.google.gson.Gson;\nimport com.google.gson.GsonBuilder;\n\npublic class JSONUtil {\n\n\tprivate static ObjectMapper mapper;\n\n\tstatic {\n\t\tmapper = new ObjectMapper();\n\t}\n\n\tpublic static String convertJavaToJson(Object obj) {\n\t\tString resultAsJSON = "";\n\t\ttry {\n\t\t\tresultAsJSON = mapper.writeValueAsString(obj);\n\t\t} catch (JsonProcessingException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn resultAsJSON;\n\t}\n\n\tpublic static <T> T convertJsonToJava(String jsonString, Class<T> cls) {\n\t\tT resultAsJavaObject = null;\n\t\ttry {\n\t\t\tresultAsJavaObject = mapper.readValue(jsonString, cls);\n\t\t} catch (JsonProcessingException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn resultAsJavaObject;\n\t}\n\n\tpublic static void main(String[] args) {\n\n\t\t// Employee Object As JSON using Jackson API\n\t\tEmployee emp1 = new Employee("Praveen", 36, "Full Stack Developer", 178000);\n\t\tString personAsJSON = convertJavaToJson(emp1);\n\t\tSystem.out.println("Employee Object As JSON : " + personAsJSON);\n\n\t\t// Json as Employee Object using Jackson API\n\t\tEmployee emp2 = convertJsonToJava(personAsJSON, Employee.class);\n\t\tSystem.out.println("JSON as Employee Object : " + emp2);\t\t\n\t\t\n\t\t// Employee Object As JSON using Gson API\n\t\tGson gson = new GsonBuilder().setPrettyPrinting().create();\n\t\tSystem.out.println("Employee Object As JSON : "+ gson.toJson(emp1));\n\t\t\n\t\t// Json as Employee Object using Gson API\t\t\n\t\tString json = "{\'name\':\'Praveen\',\'age\':36,\'designation\':\'Full Stack Developer\',\'salary\':178000.0}";\n\t\tEmployee emp3= gson.fromJson(json, Employee.class);\n\t\tSystem.out.println("JSON as Employee Object : " + emp3);\n\n\t}\n}\n\n```\n\n\n**Output**\n\n```jsx\n\nEmployee Object As JSON : {"name":"Praveen","age":36,"designation":"Full Stack Developer","salary":178000.0}\nJSON as Employee Object : Employee [name=Praveen, age=36, designation=Full Stack Developer, salary=178000.0]\nEmployee Object As JSON : {\n  "name": "Praveen",\n  "age": 36,\n  "designation": "Full Stack Developer",\n  "salary": 178000.0\n}\nJSON as Employee Object : Employee [name=Praveen, age=36, designation=Full Stack Developer, salary=178000.0]\n\n\n```\n\n\n**Building Resful Web Service**\n\n\nFor building a RESTful Web Services, we need to add the Spring Boot Starter Web dependency into the build configuration file.\n\n```jsx\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n```\n\nBefore we proceed to build a RESTful web service, Lets see some important annotations.\n\n**Rest Controller**\n\nThe @RestController annotation is used to define the RESTful web services. It serves JSON, XML and custom response.\n\n@RestController = @Controller + @ResponseBody\n\n@ResponseBody annotation tells the dispatcher servlet that controller\'s action will not return a view name but the data sent directly in the HTTP response.\n\n```jsx\n\n@RestController\npublic class HelloController {\n\n\n}\n```\n\n**Request Mapping**\n\nThe @RequestMapping annotation is used to define the Request URI to access the REST Endpoints. We can define Request method to consume and produce object. The default request method is GET.\n\n```jsx\n\n@RestController\n@RequestMapping("/api/v1_0")\npublic class HelloController {\n\n\n}\n\n```\n\n**Request Parameter**\n\nThe @RequestParam annotation is used to map the query parameters from URI.\n\nThe @RequestParam annotation supports attributes like name, required, value, defaultvalue.\n\n```jsx\n\n@RestController\n@RequestMapping("/api/v1_0")\npublic class HelloController {\n\n\t@GetMapping("/hello")\n\tpublic String sayHello(@RequestParam("name") String name) {\n\t\treturn "Hello " + name;\n\t}\n}\n\n```\n\nOpen [http://localhost:8080/api/v1_0/hello?name=Praveen%20Oruganti](http://localhost:8080/api/v1_0/hello?name=Praveen%20Oruganti) and you will see the response as **Hello Praveen Oruganti**\n\n**Path Variable**\n\nThe @PathVariable annotation is used to extract the value from URI.\n\nThe @PathVariable annotation supports attributes like name, required, value.\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/springboot/hello2.png)\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/springboot/hello2r.png)\n\n**Request Body**\n\nThe @RequestBody annotation is used to receive the request body content type.\n\n```jsx\n@RestController\n@RequestMapping("/api/v1_0")\npublic class HelloController {\n\n\t@PostMapping("/hello")\n\tpublic HelloResponse sayHello(@RequestBody User user) {\n\t\treturn HelloResponse.builder().status("Success").appId(user.getAppId()).data(HelloResponseData.builder()\n\t\t\t\t.executed(true).response("Hello " + user.getFirstName() + " " + user.getLastName()).build()).build();\n\t}\n}\n\n```\n\n```jsx\n@AllArgsConstructor\n@NoArgsConstructor\n@Data\n@SuperBuilder\npublic class User {\n\tprivate String firstName;\n\tprivate String lastName;\n}\n\n```\n\n```jsx\n\n@AllArgsConstructor\n@NoArgsConstructor\n@Data\n@SuperBuilder\npublic class HelloResponse {\n\tprivate String status;\n\tprivate String appId;\n\tprivate HelloResponseData data;\n\tprivate ErrorMessage errors;\n\n}\n\n```\n\n```jsx\n@AllArgsConstructor\n@NoArgsConstructor\n@Data\n@SuperBuilder\npublic class HelloResponseData {\t\n\tprivate boolean executed;\n\tprivate String response;\n}\n\n```\n\nOpen postman and GET http://localhost:8080/api/v1_0/hello with the below request\n\n```jsx\n\n{\n    "appId": "Test",\n    "firstName":"Praveen",\n    "lastName": "Oruganti"\n}\n```\nBelow is the response\n\n```jsx\n{\n    "status": "Success",\n    "appId": "Test",\n    "data": {\n        "executed": true,\n        "response": "Hello Praveen Oruganti"\n    },\n    "errors": null\n}\n\n```\n '}}]);