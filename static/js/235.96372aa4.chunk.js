(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[235],{804:function(e,n,s){"use strict";s.r(n),n.default=' RabbitMQ\xa0is a message broker. In essence, it accepts messages from\xa0producers, and delivers them to\xa0consumers. In-between, it can route, buffer, and persist the messages according to rules you give it.\n\nThe way RabbitMQ routes messages depends upon the messaging protocol it implements. RabbitMQ supports multiple messaging protocols. However, the one we are interested in is AMQP. It is an acronym for Advanced Message Queuing Protocol.\n\n**Advanced Message Queuing Protocol**\n\nThe conceptual model of AMQP is quite simple and straightforward. It has three entities:\n\n- Queue\n- Binding\n- Exchange\n\nWhen a publisher pushes a message to RabbitMQ, it first arrives at an exchange. The exchange then distributes copies of these messages to variously connected queues. Finally, consumers receive these messages.\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/springboot/rabbitmq.png)\n\n**Producer**\n\nProducer will send messages to RabbitMQ Exchanges with a routingKey(queuename). RabbitMQ uses routingKey(queuename) to determine which queues for routing messages.\n\n**Queue**\n\nHere, our message will be stored. Once consumed by consumers, message will be removed from queue.\n\nRabbitMQ queues also follow FIFO \u2014 First-In-First-Out methodology.\n\n**Consumer**\n\nConsumer listens on a RabbitMQ Queue to receive messages.\n\n**Bindings**\n\nBindings are the rules that a queue defines while establishing a connection with an exchange. You can have a queue connected to multiple exchanges. Every queue is also connected to a default exchange. An exchange will use these bindings to route messages to queues.\n\n**Exchange**\n\nAn Exchange is a gateway to RabbitMQ for your messages. The distance the message has to travel inside RabbitMQ depends on the type of exchange.\n\n**Primarily there are four types of exchanges**\n\n- **Direct Exchange** It routes messages to a queue by matching routing key equal to binding key.\xa0\xa0Routing key == Binding key\n- **Fanout Exchange** It ignores the routing key and sends message to all the available queues.\n- **Topic Exchange** It routes messages to multiple queues by a partial matching of a routing key. It uses patterns to match the routing and binding key.\xa0Routing key == Pattern in binding key.\n- **Headers Exchange** It uses message header instead of routing key.\n- **Default(Nameless) Exchange** It routes the message to queue name that exactly matches with the routing key.\n\n**Local Environment Configuration**\n\n**How to install RabbitMQ in your local?**\n\n- Download supporting ERLANG component from\xa0[here](https://github.com/erlang/otp/releases/download/OTP-24.1.5/otp_win64_24.1.5.exe)\xa0and install.\n- Download Rabbit MQ from\xa0[here](https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.8.25/rabbitmq-server-3.8.25.exe)\xa0and install\n- Enable management plugin using below command\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/springboot/rabbitmqenable.jpg)\n\n- Login into Rabbit MQ browser using URL\xa0[http://localhost:15672](http://localhost:15672) using userid: guest and password: guest.\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/springboot/rabbitmq1.png)\n\n- Now click on Queues Tab and create queue named praveenmq\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/springboot/rabbitmq2.png)\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/springboot/rabbitmq3.png)\n\n- Now click on Exchanges Tab and create exchange named praveenexchange and bind it to praveenmq.\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/springboot/rabbitmq4.png)\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/springboot/rabbitmq5.png)\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/springboot/rabbitmq17.png)\n\nNow let\'s develop a SpringBoot Application called **Audit Listener** which is used to send a message to RabbitMQ, listens a message from RabbitMQ and store the message in database.\n\n**Add below dependency in pom.xml**\n\n```jsx\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-amqp</artifactId>\n</dependency>\n```\n\n**Lets configure the local RabbitMQ details**\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/springboot/rabbitmq18.jpg)\n\n**Let\'s create the producer and consumer components for RabbitMQ **\n\n**Producer**\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/springboot/rabbitmqproducer.jpg)\n\n**Consumer**\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/springboot/rabbitmqlistener.jpg)\n\n\nNow open URL [http://localhost:8080/swagger-ui/index.html](http://localhost:8080/swagger-ui/index.html).\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/springboot/rabbitmq6.jpg)\n\nNow post a message to queue using endpoint POST /messages\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/springboot/rabbitmq7.jpg)\n\nLog information of Message Producer component and it was successfully pushed to praveenmq Queue.\n\n```jsx\n{"@timestamp":"2019-09-14T01:56:43.871+05:30","severity":"INFO","service":"praveenoruganti-audit-listener","thread":"http-nio-8080-exec-3","class":"c.praveen.audit.producer.MessageProducer","methodName":"sendMessage","lineNo":"28","message":"Message Sent","stacktrace":"","MESSAGE":{"appName":"praveenoruganti-billing-service","message":"Billing Successful for orderid 1000"}}\n```\n\nI see Message Listener fetched the message from praveenmq Queue and pushed to mysql db for tracking purpose.\n\n```jsx\n{"@timestamp":"2019-09-14T01:56:43.900+05:30","severity":"INFO","service":"praveenoruganti-audit-listener","thread":"org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1","class":"c.praveen.audit.listener.MessageListener","methodName":"receivedMessage","lineNo":"27","message":"Message Received","stacktrace":"","MESSAGE":{"appName":"praveenoruganti-billing-service","message":"Billing Successful for orderid 1000"}}\n\n```\n\nI am able to see the message pushed by Message Listener to DB.\n\n```jsx\n\n{"@timestamp":"2019-09-14T01:56:44.059+05:30","severity":"INFO","service":"praveenoruganti-audit-listener","thread":"org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1","class":"c.praveen.audit.listener.MessageListener","methodName":"receivedMessage","lineNo":"31","message":"Message Pushed to DB","stacktrace":"","MESSAGE":{"appName":"praveenoruganti-billing-service","message":"Billing Successful for orderid 1000"}}\n\n```\n\nLet\'s see the message in DB.\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/springboot/rabbitmq11.jpg)\n\nYou can also download the [code](https://praveenoruganti.github.io/courses/demo/springboot/praveenorugantitech-audit-listener.zip) and try out in your local machine. '}}]);