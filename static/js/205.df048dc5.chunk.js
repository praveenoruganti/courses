(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[205],{774:function(e,n,t){"use strict";t.r(n),n.default=' ![screenshot of the app](https://praveenoruganti.github.io/courses/images/spring/springmvc.png)\n\nSpring provides Model-View-Controller (MVC) architecture, and components that can be used to develop flexible and loosely coupled web applications. It uses the features of Spring core features like IoC and DI.\n\n1. The Model encapsulates the application data and in general they will consist of POJOs.\n2. The View is responsible for rendering the model data and in general it generates HTML output that the client\u2019s browser can interpret.\n3. The Controller is responsible for processing user requests and building an appropriate model and passes it to the view for rendering.\n\n**The Workflow**\n\nThe Spring Web MVC framework is designed around the DispatcherServlet.\n\nJava Servlet are programs that act as a middle layer between a request coming from a Web browser or HTTP client, and applications on the HTTP server.\n\n**What happens behind the scene when an HTTP request is sent to the server**\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/spring/spring_dispatcherservlet.png)\n\n- The DispatcherServlet handles all the HTTP requests and responses.\n- After receiving an HTTP request, the DispatcherServlet consults the HandlerMapping to call the appropriate Controller.\n- The Controller takes the request, calls the appropriate method, and builds the model and returns the view page name to the DispatcherServlet.\n- The DispatcherServlet will then take help from the ViewResolver to pick up the defined view page for the request.\n  Once the view is finalized, the DispatcherServlet passes the model data to the view, which is finally rendered on the browser.\n\nAll the above-mentioned components (i.e. HandlerMapping, Controller, and ViewResolver) are parts of WebApplicationContext, which is an extension of the ApplicationContext with some extra features necessary for web applications.\n\n**Spring MVC Application Components**\n\n- A collection of web pages to layout UI components.\n- A collections of Spring beans (controllers, services, etc).\n- Spring configurations (XML, Annotation, or Java).\n\n**DispatcherServlet**\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/spring/dispatchservlet.png)\n\nThe DispatcherServlet is responsible for loading web component specific beans like controllers, view resolvers and handler mappings.\n\nDispatcherServlet acts as front controller for Spring based web applications. It provides a mechanism for request processing where actual work is performed by configurable, delegate components. It is inherited from javax.servlet.http.HttpServlet, it is typically configured in the web.xml file.\n\nA web application can define any number of DispatcherServlet instances. Each servlet will operate in its own namespace, loading its own application context with mappings, handlers, etc. Only the root application context as loaded by ContextLoaderListener, if any, will be shared. In most cases, applications have only single DispatcherServlet with the context-root URL(/), that is, all requests coming to that domain will be handled by it.\n\nDispatcherServlet uses Spring configuration classes to discover the delegate components it needs for request mapping, view resolution, exception handling etc.\n\n**Let\u2019s understand how dispatcher servlet works internally?**\n\nIn a Spring-based application, our application objects live within an object container. This container creates objects and associations between objects, and manages their complete life cycle. These container objects are called Spring-managed beans (or simply beans), and the container is called an application context (via class ApplicationContext) in the Spring world.\n\nWebApplicationContext is an extension of a plain ApplicationContext. it is web aware ApplicationContext i.e it has Servlet Context information. When DispatcherServlet is loaded, it looks for the bean configuration file of WebApplicationContext and initializes it.\n\nBy having access to Servlet context, any spring bean which implement ServletConextAware interface can get access to ServletContext instance and do many things with it. For example, it can get context init parameters, get context root information and get resources location inside web application folders.\n\n**ContextLoadListener**\n\n- ContextLoadListener is a Servlet listener that loads all different configuration files(service layer configuration, persistence layer configuration etc) into single spring application context.\n- This helps to split spring configuration across multiple xml files.\n- ContextLoadListener creates the root application context and will be shared with child contexts created by all Dispatcheservlet contexts.\n\n**web.xml**\n\n```jsx\n<listener>\n    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n</listener>\n<context-param>\n    <param-name>contextConfigLocation</param-name>\n    <param-value>\n        /WEB-INF/config/applicationContext-service.xml\n        /WEB-INF/config/applicationContext-dao.xml\n    </param-value>\n</context-param>\n\n```\n\n**Difference between Model,ModelMap and ModelAndView**\n\nModel is an interface where as ModelMap is a class\n\nModelAndView is just a container for both ModelMap and a View object. It allows a controller to return both as a single value.\n\nfor example,\n\n```jsx\n@RequestMapping("/add")\npublic ModelAndView add(@RequestParam("num1") int num1, @RequestParam("num2") int num2) {\n    int result = num1 + num2;\n    ModelAndView mv = new ModelAndView();\n    mv.setViewName("display");\n    mv.addObject("result", result);\nreturn mv;\n\n}\n\n```\n\n**Please note Model objects are specific to request and they cannot be shared across requests.**\n\n\n\nFor example,\n\n```jsx\n@RequestMapping(value = "/", method = RequestMethod.GET)\npublic String welcome(Model model){\n    model.addAttribute("message", "Hello Spring MVC Framework!");\nreturn "welcome-page";\n}\n\n```\n\n**Can we return response from controller method directly?**\n\nThe default return value from spring controller is ModelAndView object or logical view name.\nWe can return response also from controller method using @ResponseBody annotation.\n\nFor example,\n\n```jsx\n@RequestMapping(value="/process",params="duplicate")\npublic @ResponseBody ModelAndView validateNumbers(@RequestParam("num1") int num1, @RequestParam("num2") int num2) {\n    ModelAndView mv = new ModelAndView();\n    if(num1==num2) {\n    mv.setViewName("error");\n    }else {\n    int result = num1 + num2;\n    mv.setViewName("display");\n    mv.addObject("result", result);\n    }\nreturn mv;\n\n}\n\n```\n\n**RequestParam**\n\nRequestParam is used to read the query parameter.\n\nFor example,\n\n```jsx\n@RequestMapping(value="/process",params="add")\npublic ModelAndView add(@RequestParam("num1") int num1, @RequestParam("num2") int num2) {\n    int result = num1 + num2;\n    ModelAndView mv = new ModelAndView();\n    mv.setViewName("display");\n    mv.addObject("result", result);\nreturn mv;\n}\n\n```\n\n**PathVariable**\n\nPathVariable is used to read the path parameter.\n\nFor example,\n\n```jsx\n\n@GetMapping("/getBook/{id}")\npublic @ResponseBody Book getBookDataById(@PathVariable("id") String bookId){\n// logic to find book\nreturn book;\n}\n\n```\n\n**Spring MVC Example using XML configuration**\n\n**web.xml**\n\n```jsx\n<?xml version="1.0" encoding="UTF-8"?>\n<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\nxmlns="http://xmlns.jcp.org/xml/ns/javaee"\nxsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"\nid="WebApp_ID" version="3.1">\n\n<display-name>spring-mvc-demo</display-name>\n<!\u2013- Spring MVC Configs -\u2013>\n\n<!\u2013- Step 1: Configure Spring MVC Dispatcher Servlet -\u2013>\n<servlet>\n    <servlet-name>MyDispatcher</servlet-name>\n    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n    <init-param>\n        <param-name>contextConfigLocation</param-name>\n        <param-value>/WEB-INF/spring-mvc-demo-servlet.xml</param-value>\n    </init-param>\n    <load-on-startup>1</load-on-startup>\n</servlet>\n\n<!\u2013- Step 2: Set up URL mapping of Spring MVC Dispatcher Servlet -\u2013>\n<servlet-mapping>\n    <servlet-name>MyDispatcher</servlet-name>\n    <url-pattern>/</url-pattern>\n</servlet-mapping>\n\n</web-app>\n```\n\n**spring-mvc-demo-servlet.xml**\n\n```jsx\n<?xml version="1.0" encoding="UTF-8"?>\n<beans xmlns="http://www.springframework.org/schema/beans"\n xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n xmlns:context="http://www.springframework.org/schema/context"\n xmlns:mvc="http://www.springframework.org/schema/mvc"\n xsi:schemaLocation="http://www.springframework.org/schema/beans\n     http://www.springframework.org/schema/beans/spring-beans.xsd\n     http://www.springframework.org/schema/context\n     http://www.springframework.org/schema/context/spring-context.xsd\n     http://www.springframework.org/schema/mvc\n     http://www.springframework.org/schema/mvc/spring-mvc.xsd">\n <!\u2013 Step 3: Add support for component scanning \u2013>\n <context:component-scan base-package="com.praveen" />\n <!\u2013 Step 4: Add support for conversion, formatting and validation support \u2013>\n <mvc:annotation-driven/>\n <!\u2013 Step 5: Define Spring MVC view resolver \u2013>\n <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">\n  <property name="prefix" value="/WEB-INF/view/" />\n  <property name="suffix" value=".jsp" />\n </bean>\n</beans>\n\n```\n\n**WelcomeController.java**\n\n```jsx\n@Controller\n@RequestMapping("/welcome")\npublic class WelcomeController {\n @RequestMapping(value = "/", method = RequestMethod.GET)\n public String welcome(Model model){\n   model.addAttribute("message", "Hello Spring MVC Framework!");\n   return "welcome-page";\n }\n}\n\n```\n\n**welcome-page.jsp**\n\n```jsx\n<%@ page language="java" contentType="text/html; charset=ISO-8859-1"\n    pageEncoding="ISO-8859-1"%>\n<!DOCTYPE html>\n<html>\n <head>\n   <title>Spring MVC Demo</title>\n </head>\n <body>\n<h2>message</h2>\n</body>\n</html>\n\n```\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/spring/welcome.png)\n\n**User.java**\n\n```jsx\npublic class User {\nprivate String name;\nprivate Integer id;\n\npublic User() {\n}\n\npublic void setName(String name) {\nthis.name = name;\n}\n\npublic String getName() {\nreturn name;\n}\n\npublic void setId(Integer id) {\nthis.id = id;\n}\n\npublic Integer getId() {\nreturn id;\n}\n}\n\n```\n\n**UserController.java**\n\n```jsx\n@Controller\npublic class UserController {\n@RequestMapping("/")\npublic String newUser(Model model){\nmodel.addAttribute("user", new User());\nreturn "userForm";\n}\n@RequestMapping(value = "/addUser", method = RequestMethod.POST)\npublic String addUser(@ModelAttribute("user") User user) {\nreturn "result";\n}\n}\n\n```\n\n**result.jsp**\n\n```jsx\n<%@ page language="java" contentType="text/html; charset=ISO-8859-1"\n    pageEncoding="ISO-8859-1"%>\n<!DOCTYPE html>\n<html>\n <head>\n   <title>Spring MVC Demo</title>\n </head>\n <body>\n  <h2>User Data</h2>\n    <table>\n      <tr>\n         <td>Name</td>\n         <td>user.name</td>\n      </tr>\n      <tr>\n         <td>ID</td>\n         <td>user.id</td> \n      </tr>\n    </table>\n </body>\n</html>\n\n\n```\n\n**userForm.jsp**\n\n```jsx\n<%@taglib uri="http://www.springframework.org/tags/form" prefix="form"%>\n<html>\n <head>\n   <title>Spring MVC Demo</title>\n </head>\n <body>\n  <h2>User Data</h2>\n   <form:form action="addUser" modelAttribute="user" method="POST">\n     <form:label path="name">Name</form:label>\n     <form:input path="name" /> <br><br>\n     <form:label path="id">Id</form:label>\n     <form:input path="id" />\n     <input type="submit" value="Submit"/>\n    </form:form>\n </body>\n</html>\n\n```\n\n**pom.xml**\n\n```jsx\n<project\n  xmlns="http://maven.apache.org/POM/4.0.0"\n  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"\n>\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>SpringMVCProject</groupId>\n  <artifactId>SpringMVCProject</artifactId>\n  <version>0.0.1-SNAPSHOT</version>\n  <packaging>war</packaging>\n  <build>\n    <sourceDirectory>src</sourceDirectory>\n    <plugins>\n      <plugin>\n        <artifactId>maven-compiler-plugin</artifactId>\n        <version>3.8.0</version>\n        <configuration>\n          <source>1.8</source>\n          <target>1.8</target>\n        </configuration>\n      </plugin>\n      <plugin>\n        <artifactId>maven-war-plugin</artifactId>\n        <version>3.2.1</version>\n        <configuration>\n          <warSourceDirectory>WebContent</warSourceDirectory>\n        </configuration>\n      </plugin>\n    </plugins>\n  </build>\n  <dependencies>\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-web</artifactId>\n      <version>5.1.5.RELEASE</version>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-webmvc</artifactId>\n      <version>5.1.5.RELEASE</version>\n    </dependency>\n    <dependency>\n      <groupId>javax.servlet</groupId>\n      <artifactId>javax.servlet-api</artifactId>\n      <version>3.1.0</version>\n    </dependency>\n    <dependency>\n      <groupId>javax.servlet.jsp</groupId>\n      <artifactId>javax.servlet.jsp-api</artifactId>\n      <version>2.3.1</version>\n    </dependency>\n    <dependency>\n      <groupId>javax.servlet</groupId>\n      <artifactId>jstl</artifactId>\n      <version>1.2</version>\n    </dependency>\n  </dependencies>\n</project>\n```\n\nBrowser: [http://localhost:8080/SpringMVCProject/](http://localhost:8080/SpringMVCProject/)\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/spring/user.png)\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/spring/user1.png)\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/spring/user2.png)\n\n**Spring MVC using annotations**\n\n**AppInitializer.java**\n\n```jsx\npublic class AppInitializer extends AbstractAnnotationConfigDispatcherServletInitializer {\n    @Override\n    protected Class<?>[] getRootConfigClasses() {\n        return new Class[] { };\n    }\n    @Override\n    protected Class<?>[] getServletConfigClasses() {\n        return new Class[] { WebMvcConfig.class };\n    }\n    @Override\n    protected String[] getServletMappings() {\n        return new String[] { "/" };\n    }\n}\n\n```\n\n**WebMvcConfig.java**\n\n```jsx\n@Configuration\n@EnableWebMvc\n@ComponentScan(basePackages = { "com.praveen"})\npublic class WebMvcConfig implements WebMvcConfigurer {\n   @Bean\n   public InternalResourceViewResolver resolver() {\n      InternalResourceViewResolver resolver = new InternalResourceViewResolver();\n      resolver.setViewClass(JstlView.class);\n      resolver.setPrefix("/WEB-INF/views/");\n      resolver.setSuffix(".jsp");\n      return resolver;\n   }\n}\n\n```\n\n**HomeController.java**\n\n```jsx\n@Controller\npublic class HomeController {\n    @GetMapping("/")\n    public String homeInit(Locale locale, Model model) {\n        return "home";\n    }\n}\n\n```\n\n**home.jsp**\n\n```jsx\n<html>\n  <head>\n    <title>Spring 5 Web MVC Example</title>\n  </head>\n  <body>\n    <h1>Praveen Oruganti</h1>\n    <h2>Spring Using Annotations Web MVC DispatcherServlet Example</h2>\n  </body>\n</html>\n```\n\n**AddController.java**\n\n```jsx\n@Controller\npublic class AddController {\n\n@GetMapping("/index")\npublic String homeInit(Locale locale, Model model) {\nreturn "index";\n}\n\n@RequestMapping(value="/process",params="add")\npublic ModelAndView add(@RequestParam("num1") int num1, @RequestParam("num2") int num2) {\nint result = num1 + num2;\nModelAndView mv = new ModelAndView();\nmv.setViewName("display");\nmv.addObject("result", result);\nreturn mv;\n}\n\n@RequestMapping(value="/process",params="duplicate")\npublic @ResponseBody ModelAndView validateNumbers(@RequestParam("num1") int num1, @RequestParam("num2") int num2) {\nModelAndView mv = new ModelAndView();\nif(num1==num2) {\nmv.setViewName("error");\n}else {\nint result = num1 + num2;\nmv.setViewName("display");\nmv.addObject("result", result);\n}\nreturn mv;\n}\n\n}\n\n```\n\n**index.jsp**\n\n```jsx\n\n<%@ page language="java" contentType="text/html; charset=ISO-8859-1\u2033\npageEncoding="ISO-8859-1\u2033%>\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset="ISO-8859-1\u2033>\n<title>Insert title here</title>\n</head>\n<body>\n<form action="process">\n<input type="text" name="num1\u2033 /><br />\n<input type="text" name="num2\u2033 /><br />\n<input type = "submit" name = "add" value="add"/>\n<input type = "submit" name = "duplicate" value="duplicate"/>\n</form>\n</body>\n</html>\n\n\n```\n\n**display.jsp**\n\n```jsx\n<%@ page language="java" contentType="text/html; charset=ISO-8859-1\u2033\n    pageEncoding="ISO-8859-1\u2033%>\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset="ISO-8859-1\u2033>\n<title>Insert title here</title>\n</head>\n<body>\nResult is result \n</body>\n</html>\n\n```\n\n**error.jsp**\n\n```jsx\n<html>\n  <head>\n    <title>Error</title>\n  </head>\n  <body>\n    <h1>Both Numbers are same</h1>\n  </body>\n</html>\n```\n\n**Junit Test**\n\n```jsx\npublic class AddControllerTest {\nprivate MockMvc mockMvc;\nprivate AddController addController;\n@Before\npublic void setup(){\naddController = new AddController();\nmockMvc = MockMvcBuilders.standaloneSetup(addController).build();\n}\n@Test\npublic void testAdd() throws Exception{\nmockMvc.perform(post("/process").param("num1", "10").param("num2\u2033,"20").param("add", ""))\n.andExpect(status().isOk())\n.andExpect(view().name("display"));\n}\n@Test\npublic void testDuplicate() throws Exception{\nmockMvc.perform(post("/process").param("num1", "20").param("num2\u2033,"20").param("duplicate", ""))\n.andExpect(status().isOk())\n.andExpect(view().name("error"));\n}\n}\n\n\n```\n\n**pom.xml**\n\n```jsx\n<project xmlns="http://maven.apache.org/POM/4.0.0"\nxmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\nxsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n<modelVersion>4.0.0</modelVersion>\n<groupId>SpringMVCUsingAnnotations</groupId>\n<artifactId>SpringMVCUsingAnnotations</artifactId>\n<version>0.0.1-SNAPSHOT</version>\n<packaging>war</packaging>\n<properties>\n<failOnMissingWebXml>false</failOnMissingWebXml>\n<spring.version>5.0.0.RELEASE</spring.version>\n<jstl.version>1.2.1</jstl.version>\n<tld.version>1.1.2</tld.version>\n<servlets.version>3.1.0</servlets.version>\n<jsp.version>2.3.1</jsp.version>\n</properties>\n<dependencies>\n<!\u2013 Spring MVC Dependency \u2013>\n<dependency>\n<groupId>org.springframework</groupId>\n<artifactId>spring-webmvc</artifactId>\n\n</dependency><dependency>\n<groupId>org.springframework</groupId>\n<artifactId>spring-test</artifactId>\n\n</dependency><dependency>\n<groupId>junit</groupId>\n<artifactId>junit</artifactId>\n<version>4.12</version>\n<scope>provided</scope>\n</dependency>\n<!\u2013 JSTL Dependency \u2013>\n<dependency>\n<groupId>javax.servlet.jsp.jstl</groupId>\n<artifactId>javax.servlet.jsp.jstl-api</artifactId>\n\n</dependency>\n<dependency>\n<groupId>taglibs</groupId>\n<artifactId>standard</artifactId>\n\n</dependency>\n<!\u2013 Servlet Dependency \u2013>\n<dependency>\n<groupId>javax.servlet</groupId>\n<artifactId>javax.servlet-api</artifactId>\n\n<scope>provided</scope>\n</dependency>\n<!\u2013 JSP Dependency \u2013>\n<dependency>\n<groupId>javax.servlet.jsp</groupId>\n<artifactId>javax.servlet.jsp-api</artifactId>\n\n<scope>provided</scope>\n</dependency>\n</dependencies>\n<build>\n<sourceDirectory>src</sourceDirectory>\n<plugins>\n<plugin>\n<artifactId>maven-compiler-plugin</artifactId>\n<version>3.8.0</version>\n<configuration>\n<source>1.8</source>\n<target>1.8</target>\n</configuration>\n</plugin>\n<plugin>\n<artifactId>maven-war-plugin</artifactId>\n<version>3.2.1</version>\n<configuration>\n<warSourceDirectory>WebContent</warSourceDirectory>\n</configuration>\n</plugin>\n</plugins>\n</build>\n</project>\n\n```\n\n**Spring MVC Annotations**\n\n- @Controller\n- @RequestMapping\n- @PathVariable\n- @RequestParam\n- @ModelAttribute\n- @RequestBody and @ResponseBody\n- @RequestHeader and @ResponseHeader\n\n**@Controller**\n\nThis annotation serves as a specialization of @Component, allowing for implementation classes autodetected through classpath scanning.\n\n@Controller annotation tells the Spring IOC container to treat this class as Spring MVC Controller.\n\nTo configure/ customize MVC components, Spring MVC provides an option to handle it either through Java Config or XML.\n\nFor Java based configuration use this\n\nAdd @EnableWebMvc will import the Spring MVC configuration from WebMvcConfigurationSupport\n\nFor XML based configuration use the\n\n<context:component-scan base-package=\u201dcom.praveen\u201d>\n\n**@RequestMapping**\n\n@RequestMapping marks request handler methods inside @Controller classes.\n\n- Consumes \u2013 The consumable media types of the mapped request, narrowing the primary mapping. (e.g. @RequestMapping(consumes = {"application/json\u201d, "application/xml\u201d})).\n- method \u2013 The HTTP request methods to map (e.g. method = {RequestMethod.GET,RequestMethod.POST}).\n- header \u2013 The headers of the mapped request.\n- name \u2013 the name of the mapping.\n- value \u2013 The primary mapping expressed by this annotation\n- produces \u2013 The producible media types of the mapped request.\n\n```jsx\n@Controller\npublic class SpringMVCController {\n @RequestMapping(value = {\n  "/greetings\u201d,\n  "/hello-world\u201d}, method = {RequestMethod.GET,RequestMethod.POST},\n   consumes = {"application/json\u201d,\u201dapplication/xml\u201d},\n   produces = { "application/json\u201d},headers = {"application/json\u201d\n  })\n public String helloWorld() {\n  return "Hello\u201d;\n }\n}\n```\n\nThis annotation can be used both at the class and at the method level.\n\n**@RequestParam**\n\nAnnotation which shows that it binds a method parameter to a web request parameter. Request parameters passed by the browser/client as part of the HTTP request, the @RequestParam annotation help to map these parameters easily at the controller level.\n\n```jsx\n@GetMapping("/fetchId\u201d)\npublic String fetchId(@RequestParam("id\u201d) String id) {\n// some code\n}\n\n```\n\nWith @RequestParam we can specify default value when Spring finds no or empty value in the request.\n\n```jsx\npublic String fetchId(@RequestParam(defaultValue = "1\u201d) String id){\n// some code\n}\n\n```\n\n**@PathVariable**\n\nThis annotation shows that a method parameter bound to a URI template variable. We specify the variable as part of the @RequestMapping and bind a method argument with @PathVariable. Let\u2019s take an example where we want to pass productCode as part of the URI and not request parameter.\n\n```jsx\n@GetMapping("/products/{id}\u201d)\npublic String getProduct(@PathVariable("id\u201d) String id) {\n// some code\n}\n\n```\n\n- The variable name in the @PathVariable annotation is optional if the name of the part in the template matches the name of the method argument. For the above example, we can omit "id\u201d from the @PathVariable annotation.\n\n```jsx\n\n@GetMapping("/products/{id}\u201d)\npublic String getProduct(@PathVariable String id) {\n// some code\n}\n\n```\n\n- Use "require\u201d parameter to mark the path variable as an optional.\n\n```jsx\n@GetMapping("/products/{id}\u201d)\npublic String getProduct(@PathVariable(required = false) String id) {\n// some code\n}\n\n```\n\nHere id is optional.\n\n**@RequestBody**\n\nThe @RequestBody annotation showing a method parameter bound to the body of the web request. It passes the body of the request through an HttpMessageConverter to resolve the method argument depending on the content the request.\n\n```jsx\n\n@PostMapping("/product/save\u201d)\npublic String saveProduct(@RequestBody Product product){\n// some code\n}\n\n```\n\n**@ResponseBody**\n\nThe @ResponseBody Annotation that shows a method return value bound to the web response body. Supported for annotated handler methods. Spring treats the result of the method as the response itself.\n\n```jsx\n\n@GetMapping("/products/{id}\u201d)\npublic @ResponseBody Product saveProduct(@PathVariable("id\u201d) String id) {\n// some code\n}\n\n```\n\n**@ModelAttribute**\n\n@ModelAttribute refers to a property of the Model object in Spring MVC. This ModelAttribute annotation binds a method parameter or method return value to a named model attribute, exposed to a web view.\n\n```jsx\n\n@PostMapping("/customer-registration\u201d)\npublic String processForm(@ModelAttribute("customer\u201d) Customer customer) {\n// some code\n}\n\n```\n\nThe annotation is used to define objects which should be part of a Model. So if you want to have a Customer object referenced in the Model you can use the following method:\n\n```jsx\n\n@ModelAttribute("customer\u201d)\npublic Person getCustomer() {\n// some code\n}\n\n```\n\nwe don\u2019t have to specify the model key, Spring uses the method\u2019s name by default\n\n```jsx\n\n@ModelAttribute\npublic Person getCustomer() {\n// some code\n}\n\n```\n\n\n '}}]);