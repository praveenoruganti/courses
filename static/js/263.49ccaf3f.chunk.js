(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[263],{832:function(n,t,e){"use strict";e.r(t),t.default=' **Problem Statement**\n\nYou need to design a Vending Machine which\n\n- Accepts coins of 1,5,10,25 Cents i.e. penny, nickel, dime, and quarter.\n- Allow user to select products Coke(25), Pepsi(35), Soda(45)\n- Allow user to take refund by canceling the request.\n- Return the selected product and remaining change if any\n- Allow reset operation for vending machine supplier.\n\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/systemdesign/vendingmachine.jpg)\n\nHere with the following classes and interfaces for designing a Vending Machine.\n\n`VendingMachine`\n\nIt defines the public API of a vending machine, usually, all high-level functionality should go in this class.\n\n`VendingMachineImpl`\n\nA sample implementation of Vending Machine.\n\n`VendingMachineFactory`\n\nA Factory class to create different kinds of Vending Machine.\n\n`Item`\n\nJava Enum to represent Item served by Vending Machine.\n\n`Inventory`\n\nJava class to represent an Inventory, used for creating the case and item inventory inside Vending Machine.\n\n`Coin`\n\nAnother Java Enum to represent Coins supported by Vending Machine.\n\n`Bucket`\n\nA parameterized class to hold two objects. It\'s kind of Pair class.\n\n`NotFullPaidException`\n\nAn Exception is thrown by Vending Machine when a user tries to collect an item, without paying the full amount.\n\n`NotSufficientChangeException`\n\nVending Machine throws this exception to indicate that it doesn\'t have sufficient change to complete this request.\n\n`SoldOutExcepiton`\n\nVending Machine throws this exception if the user requests a product that is sold out.\n\n\n**Here with the complete code implementation**\n\n`VendingMachine.java`\n\nThe public API of a vending machine, usually all high-level functionality should go in this class.\n\n```jsx\npackage com.praveen.vending;\n\nimport java.util.List;\n\npublic interface VendingMachine {\n\tpublic long selectItemAndGetPrice(Item item);\n\n\tpublic void insertCoin(Coin coin);\n\n\tpublic List<Coin> refund();\n\n\tpublic Bucket<Item, List<Coin>> collectItemAndChange();\n\n\tpublic void reset();\n\n}\n\n```\n\n`VendingMachineImpl.java`\n\nA sample implementation of the VendingMachine interface represents a real-world Vending Machine, which you see in your office, bus stand, railway station, and public places.\n\n\n```jsx\npackage com.praveen.vending;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\nimport com.praveen.vending.exception.NotFullPaidException;\nimport com.praveen.vending.exception.NotSufficientChangeException;\nimport com.praveen.vending.exception.SoldOutException;\n\npublic class VendingMachineImpl implements VendingMachine {\n\tprivate Inventory<Coin> cashInventory = new Inventory<>();\n\tprivate Inventory<Item> itemInventory = new Inventory<>();\n\tprivate long totalSales;\n\tprivate Item currentItem;\n\tprivate long currentBalance;\n\n\tpublic VendingMachineImpl() {\n\t\tinitialize();\n\t}\n\n\tprivate void initialize() {\n\t\t// initialize machine with 5 coins of each denomination\n\t\t// and 5 cans of each Item\n\t\tfor (Coin c : Coin.values()) {\n\t\t\tcashInventory.put(c, 5);\n\t\t}\n\n\t\tfor (Item i : Item.values()) {\n\t\t\titemInventory.put(i, 5);\n\t\t}\n\n\t}\n\n\t@Override\n\tpublic long selectItemAndGetPrice(Item item) {\n\t\tif (itemInventory.hasItem(item)) {\n\t\t\tcurrentItem = item;\n\t\t\treturn currentItem.getPrice();\n\t\t}\n\t\tthrow new SoldOutException("Sold Out, Please buy another item");\n\t}\n\n\t@Override\n\tpublic void insertCoin(Coin coin) {\n\t\tcurrentBalance = currentBalance + coin.getDenomination();\n\t\tcashInventory.add(coin);\n\t}\n\n\t@Override\n\tpublic Bucket<Item, List<Coin>> collectItemAndChange() {\n\t\tItem item = collectItem();\n\t\ttotalSales = totalSales + currentItem.getPrice();\n\n\t\tList<Coin> change = collectChange();\n\n\t\treturn new Bucket<>(item, change);\n\t}\n\n\tprivate Item collectItem() throws NotSufficientChangeException, NotFullPaidException {\n\t\tif (isFullPaid()) {\n\t\t\tif (hasSufficientChange()) {\n\t\t\t\titemInventory.deduct(currentItem);\n\t\t\t\treturn currentItem;\n\t\t\t}\n\t\t\tthrow new NotSufficientChangeException("Not Sufficient change in Inventory");\n\n\t\t}\n\t\tlong remainingBalance = currentItem.getPrice() - currentBalance;\n\t\tthrow new NotFullPaidException("Price not full paid, remaining : ", remainingBalance);\n\t}\n\n\tprivate List<Coin> collectChange() {\n\t\tlong changeAmount = currentBalance - currentItem.getPrice();\n\t\tList<Coin> change = getChange(changeAmount);\n\t\tupdateCashInventory(change);\n\t\tcurrentBalance = 0;\n\t\tcurrentItem = null;\n\t\treturn change;\n\t}\n\n\t@Override\n\tpublic List<Coin> refund() {\n\t\tList<Coin> refund = getChange(currentBalance);\n\t\tupdateCashInventory(refund);\n\t\tcurrentBalance = 0;\n\t\tcurrentItem = null;\n\t\treturn refund;\n\t}\n\n\tprivate boolean isFullPaid() {\n\t\treturn currentBalance >= currentItem.getPrice();\n\t}\n\n\tprivate List<Coin> getChange(long amount) throws NotSufficientChangeException {\n\t\tList<Coin> changes = Collections.emptyList();\n\n\t\tif (amount > 0) {\n\t\t\tchanges = new ArrayList<>();\n\t\t\tlong balance = amount;\n\t\t\twhile (balance > 0) {\n\t\t\t\tif (balance >= Coin.QUARTER.getDenomination() && cashInventory.hasItem(Coin.QUARTER)) {\n\t\t\t\t\tchanges.add(Coin.QUARTER);\n\t\t\t\t\tbalance = balance - Coin.QUARTER.getDenomination();\n\n\t\t\t\t} else if (balance >= Coin.DIME.getDenomination() && cashInventory.hasItem(Coin.DIME)) {\n\t\t\t\t\tchanges.add(Coin.DIME);\n\t\t\t\t\tbalance = balance - Coin.DIME.getDenomination();\n\n\t\t\t\t} else if (balance >= Coin.NICKLE.getDenomination() && cashInventory.hasItem(Coin.NICKLE)) {\n\t\t\t\t\tchanges.add(Coin.NICKLE);\n\t\t\t\t\tbalance = balance - Coin.NICKLE.getDenomination();\n\n\t\t\t\t} else if (balance >= Coin.PENNY.getDenomination() && cashInventory.hasItem(Coin.PENNY)) {\n\t\t\t\t\tchanges.add(Coin.PENNY);\n\t\t\t\t\tbalance = balance - Coin.PENNY.getDenomination();\n\n\t\t\t\t} else {\n\t\t\t\t\tthrow new NotSufficientChangeException("NotSufficientChange,Please try another product");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn changes;\n\t}\n\n\t@Override\n\tpublic void reset() {\n\t\tcashInventory.clear();\n\t\titemInventory.clear();\n\t\ttotalSales = 0;\n\t\tcurrentItem = null;\n\t\tcurrentBalance = 0;\n\t}\n\n\tpublic void printStats() {\n\t\tSystem.out.println("Total Sales : " + totalSales);\n\t\tSystem.out.println("Current Item Inventory : " + itemInventory);\n\t\tSystem.out.println("Current Cash Inventory : " + cashInventory);\n\t}\n\n\tprivate boolean hasSufficientChange() {\n\t\treturn hasSufficientChangeForAmount(currentBalance - currentItem.getPrice());\n\t}\n\n\tprivate boolean hasSufficientChangeForAmount(long amount) {\n\t\tboolean hasChange = true;\n\t\ttry {\n\t\t\tgetChange(amount);\n\t\t} catch (NotSufficientChangeException nsce) {\n\t\t\thasChange = false;\n\t\t}\n\n\t\treturn hasChange;\n\t}\n\n\tprivate void updateCashInventory(List<Coin> change) {\n\t\tfor (Coin c : change) {\n\t\t\tcashInventory.deduct(c);\n\t\t}\n\t}\n\n\tpublic long getTotalSales() {\n\t\treturn totalSales;\n\t}\n\n}\n\n```\n\n\n`VendingMachineFactory.java`\n\nA Factory class to create different kinds of Vending Machine.\n\n\n```jsx\npackage com.praveen.vending;\n\npublic class VendingMachineFactory {\n\tprivate VendingMachineFactory() {\n\n\t}\n\n\tpublic static VendingMachine createVendingMachine() {\n\t\treturn new VendingMachineImpl();\n\t}\n}\n\n```\n\n`Coin.java`\n\nAnother Java Enum to represent Coins supported by Vending Machine.\n\n```jsx\npackage com.praveen.vending;\n\npublic enum Coin {\n\tPENNY(1), NICKLE(5), DIME(10), QUARTER(25);\n\n\tprivate int denomination;\n\n\tprivate Coin(int denomination) {\n\t\tthis.denomination = denomination;\n\t}\n\n\tpublic int getDenomination() {\n\t\treturn denomination;\n\t}\n}\n\n```\n\n`Inventory.java`\n\nA Java class to represent an Inventory, used for creating the case and item inventory inside Vending Machine.\n\n```jsx\npackage com.praveen.vending;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Inventory<T> {\n\tprivate Map<T, Integer> inventoryMap = new HashMap<T, Integer>();\n\n\tpublic int getQuantity(T item) {\n\t\tInteger value = inventoryMap.get(item);\n\t\treturn value == null ? 0 : value;\n\t}\n\n\tpublic void add(T item) {\n\t\tint count = inventoryMap.get(item);\n\t\tinventoryMap.put(item, count + 1);\n\t}\n\n\tpublic void deduct(T item) {\n\t\tif (hasItem(item)) {\n\t\t\tint count = inventoryMap.get(item);\n\t\t\tinventoryMap.put(item, count - 1);\n\t\t}\n\t}\n\n\tpublic boolean hasItem(T item) {\n\t\treturn getQuantity(item) > 0;\n\t}\n\n\tpublic void clear() {\n\t\tinventoryMap.clear();\n\t}\n\n\tpublic void put(T item, int quantity) {\n\t\tinventoryMap.put(item, quantity);\n\t}\n}\n```\n\n\n`Bucket.java`\n\nA parameterized utility class to hold two objects.\n\n```jsx\npackage com.praveen.vending;\n\npublic class Bucket<E1, E2> {\n\tprivate E1 first;\n\tprivate E2 second;\n\n\tpublic Bucket(E1 first, E2 second) {\n\t\tthis.first = first;\n\t\tthis.second = second;\n\t}\n\n\tpublic E1 getFirst() {\n\t\treturn first;\n\t}\n\n\tpublic E2 getSecond() {\n\t\treturn second;\n\t}\n}\n\n```\n\n\n`NotFullPaidException.java`\n\nAn Exception, thrown by Vending Machine when a user tries to collect an item, without paying the full amount.\n\n```jsx\npackage com.praveen.vending.exception;\n\npublic class NotFullPaidException extends RuntimeException {\n\n\tprivate static final long serialVersionUID = 4261184876000155336L;\n\tprivate final String message;\n\tprivate final long remaining;\n\n\tpublic NotFullPaidException(String message, long remaining) {\n\t\tthis.message = message;\n\t\tthis.remaining = remaining;\n\t}\n\n\tpublic long getRemaining() {\n\t\treturn remaining;\n\t}\n\n\t@Override\n\tpublic String getMessage() {\n\t\treturn message + remaining;\n\t}\n}\n\n```\n\n`NotSufficientChangeException.java`\n\nVending Machine throws this exception to indicate that it doesn\'t have sufficient change to complete this request.\n\n```jsx\npackage com.praveen.vending.exception;\n\npublic class NotSufficientChangeException extends RuntimeException {\n\tprivate static final long serialVersionUID = -3136065340938846588L;\n\tprivate final String message;\n\n\tpublic NotSufficientChangeException(String string) {\n\t\tthis.message = string;\n\t}\n\n\t@Override\n\tpublic String getMessage() {\n\t\treturn message;\n\t}\n}\n\n```\n\n`SoldOutException.java`\n\nThe Vending Machine throws this exception if the user requests a product that is sold out\n\n```jsx\npackage com.praveen.vending.exception;\n\npublic class SoldOutException extends RuntimeException {\n\tprivate static final long serialVersionUID = -2365167218929911718L;\n\tprivate final String message;\n\n\tpublic SoldOutException(String string) {\n\t\tthis.message = string;\n\t}\n\n\t@Override\n\tpublic String getMessage() {\n\t\treturn message;\n\t}\n}\n\n```\n\n`VendingMachineTest`\n\n```jsx\npackage com.praveen.vending;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.util.List;\n\nimport org.junit.jupiter.api.AfterAll;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.Test;\n\nimport com.praveen.vending.exception.NotSufficientChangeException;\nimport com.praveen.vending.exception.SoldOutException;\n\npublic class VendingMachineTest {\n\tprivate static VendingMachine vm;\n\n\t@BeforeAll\n\tpublic static void setUp() {\n\t\tvm = VendingMachineFactory.createVendingMachine();\n\t}\n\n\t@AfterAll\n\tpublic static void tearDown() {\n\t\tvm = null;\n\t}\n\n\t@Test\n\tpublic void testBuyItemWithExactPrice() {\n\t\t// select item, price in cents\n\t\tlong price = vm.selectItemAndGetPrice(Item.COKE);\n\t\t// price should be Coke\'s price\n\t\tassertEquals(Item.COKE.getPrice(), price);\n\t\t// 25 cents paid\n\t\tvm.insertCoin(Coin.QUARTER);\n\n\t\tBucket<Item, List<Coin>> bucket = vm.collectItemAndChange();\n\t\tItem item = bucket.getFirst();\n\t\tList<Coin> change = bucket.getSecond();\n\n\t\t// should be Coke\n\t\tassertEquals(Item.COKE, item);\n\t\t// there should not be any change\n\t\tassertTrue(change.isEmpty());\n\t}\n\n\t@Test\n\tpublic void testBuyItemWithMorePrice() {\n\t\tlong price = vm.selectItemAndGetPrice(Item.SODA);\n\t\tassertEquals(Item.SODA.getPrice(), price);\n\n\t\tvm.insertCoin(Coin.QUARTER);\n\t\tvm.insertCoin(Coin.QUARTER);\n\n\t\tBucket<Item, List<Coin>> bucket = vm.collectItemAndChange();\n\t\tItem item = bucket.getFirst();\n\t\tList<Coin> change = bucket.getSecond();\n\n\t\t// should be Coke\n\t\tassertEquals(Item.SODA, item);\n\t\t// there should not be any change\n\t\tassertTrue(!change.isEmpty());\n\t\t// comparing change\n\t\tassertEquals(50 - Item.SODA.getPrice(), getTotal(change));\n\n\t}\n\n\t@Test\n\tpublic void testRefund() {\n\t\tlong price = vm.selectItemAndGetPrice(Item.PEPSI);\n\t\tassertEquals(Item.PEPSI.getPrice(), price);\n\t\tvm.insertCoin(Coin.DIME);\n\t\tvm.insertCoin(Coin.NICKLE);\n\t\tvm.insertCoin(Coin.PENNY);\n\t\tvm.insertCoin(Coin.QUARTER);\n\t\tassertEquals(41, getTotal(vm.refund()));\n\t}\n\n\t@Test\n\tpublic void testSoldOut() {\n\t\tAssertions.assertThrows(SoldOutException.class, () -> {\n\t\t\tfor (int i = 0; i < 6; i++) {\n\t\t\t\tvm.selectItemAndGetPrice(Item.COKE);\n\t\t\t\tvm.insertCoin(Coin.QUARTER);\n\t\t\t\tvm.collectItemAndChange();\n\t\t\t}\n\t\t});\n\t}\n\n\t@Test\n\tpublic void testNotSufficientChangeException() {\n\t\tAssertions.assertThrows(NotSufficientChangeException.class, () -> {\n\t\t\tfor (int i = 0; i < 6; i++) {\n\t\t\t\tvm.selectItemAndGetPrice(Item.SODA);\n\t\t\t\tvm.insertCoin(Coin.QUARTER);\n\t\t\t\tvm.insertCoin(Coin.QUARTER);\n\t\t\t\tvm.collectItemAndChange();\n\n\t\t\t\tvm.selectItemAndGetPrice(Item.PEPSI);\n\t\t\t\tvm.insertCoin(Coin.QUARTER);\n\t\t\t\tvm.insertCoin(Coin.QUARTER);\n\t\t\t\tvm.collectItemAndChange();\n\t\t\t}\n\n\t\t});\n\t}\n\n\t@Test\n\tpublic void testReset() {\n\t\tAssertions.assertThrows(SoldOutException.class, () -> {\n\t\t\tVendingMachine vmachine = VendingMachineFactory.createVendingMachine();\n\t\t\tvmachine.reset();\n\t\t\tvmachine.selectItemAndGetPrice(Item.COKE);\n\t\t});\n\t}\n\n\tprivate long getTotal(List<Coin> change) {\n\t\tlong total = 0;\n\t\tfor (Coin c : change) {\n\t\t\ttotal = total + c.getDenomination();\n\t\t}\n\t\treturn total;\n\t}\n}\n```\n\n\n '}}]);