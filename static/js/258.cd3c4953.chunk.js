(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[258],{827:function(e,n,s){"use strict";s.r(n),n.default=" An architectural pattern is a general, reusable solution to a commonly occurring problem in software architecture within a given context.\n\n1. **Monolithic**\n\n   In monolithic pattern the entire business logic is composed in one single component.\n\n2. **Layered**\n\n   In the layered pattern the components are grouped into logic layers. Each request will go through the layers performing some specific tasks.\n\n   Most layered architecture consists of four tiers: presentation, business, persistence and database as follows.\n\n   ![screenshot of the app](https://praveenoruganti.github.io/courses/images/systemdesign/layered.png)\n\n   Layers contribute to a performance penalty. The pattern does not lend itself to high-performance applications because it is not efficient to go through multiple layers of the architecture to fulfill a business request. The addition of layers also adds up-front cost and complexity to a system.\n\n   We should use this style for small, simple applications or websites. It is a good choice for situations with a very tight budget and time constraints.\n\n3. **SOA - Service Oriented Architecture**\n\n   SOA defines a way of making components reusable via service interfaces. In this pattern each component is actually a service perfoming some specific functionality.\n\n   Also, SOA based applications are compromised of more loosely coupled components that use an Enterprise Services Bus messaging protocol to communicate between themselves.\n\n   ![screenshot of the app](https://praveenoruganti.github.io/courses/images/systemdesign/soa.png)\n\n4. **Microservices Architecture**\n\n   Microservices architecture is a style which allows building an application as a collection of small independent services. Each independent service is called a microservice.\n\n   Some features of microservices are\n\n   - Highly maintainable and testable\n   - Loosely coupled\n   - Independently deployable\n   - Organized around business capabilities i.e.. Single Resposibility principle\n   - Owned by a small team\n\n   Most microservices based systems have some common components.\n\n   - API gateway\n   - Service discovery\n   - Service management\n\n   ![screenshot of the app](https://praveenoruganti.github.io/courses/images/systemdesign/microservices.png)\n "}}]);