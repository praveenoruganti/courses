(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[112],{681:function(n,e,t){"use strict";t.r(e),e.default=' Set interface will not accept duplicates.\n\n**Hashset**\n\nHashset allows one null value and doesnt maintain insertion order. It internally uses HashMap as a backing datastructure with key as generic type E which is our element and value as Object class type which is denoted by static field PRESENT.\n\n```jsx\npackage com.praveen.collections;\n\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.Iterator;\n\npublic class HashSetExamples {\n\n    public static void main(String[] args) {\n        System.out.println("HashSet Examples");\n\n        Set<String> numberSet = new HashSet<>();\n        numberSet.add("One");\n        numberSet.add("Two");\n        numberSet.add("Three");\n        numberSet.add("Four");\n        numberSet.add("Five");\n        Iterator<String> numberIterator = numberSet.iterator();\n        while (numberIterator.hasNext()) {\n            System.out.println(numberIterator.next());\n        }\n\n    }\n\n}\n\n\n```\n\nOutput\n\n```jsx\nHashSet Examples\nFive\nOne\nFour\nTwo\nThree\n\n```\n\n**LinkedHashSet**\n\nLinkedHashSet is an extended version of Hashset and it internally uses LinkedHashMap.It maintains insertion order.\n\n```jsx\npackage com.praveen.collections;\n\nimport java.util.LinkedHashSet;\nimport java.util.Iterator;\nimport java.util.Set;\n\npublic class LinkedHashSetExamples {\n\n    public static void main(String[] args) {\n        System.out.println("LinkedHashSet Examples");\n\n        Set<String> numberSet = new LinkedHashSet<>();\n        numberSet.add("One");\n        numberSet.add("Two");\n        numberSet.add("Three");\n        numberSet.add("Four");\n        numberSet.add("Five");\n        Iterator<String> numberIterator = numberSet.iterator();\n        while (numberIterator.hasNext()) {\n            System.out.println(numberIterator.next());\n        }\n    }\n\n}\n\n```\n\nOutput\n\n```jsx\nLinkedHashSet Examples\nOne\nTwo\nThree\nFour\nFive\n```\n\n**TreeSet**\n\nTreeSet internally uses TreeMap and it maintains natural order and it doesn\'t allow null value. It implements NavigableSet interface as well as SortedSet interface.\n\nWhen you are inserting objects in TreeSet you need to override equals and hashcode.\n\n\n```jsx\npackage com.praveen.collections;\n\nimport java.util.TreeSet;\nimport java.util.Iterator;\nimport java.util.Set;\n\npublic class TreeSetExamples {\n\n    public static void main(String[] args) {\n        System.out.println("TreeSet Examples");\n\n        Set<String> nameSet = new TreeSet<>();\n        nameSet.add("Praveen");\n        nameSet.add("Kiran");\n        nameSet.add("Praveen");\n        nameSet.add("Anusha");\n        // Traversing elements\n        Iterator<String> nameIterator = nameSet.iterator();\n        while (nameIterator.hasNext()) {\n            System.out.println(nameIterator.next());\n        }\n    }\n}\n\n\n\n```\n\nOutput\n\n```jsx\nTreeSet Examples\nAnusha\nKiran\nPraveen\n```\t\n\n**Comparing Sets**\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/java/set.png)\n\n**Difference between List and Set**\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/java/listvsset.jpg)\n\n**Performance of List and Set**\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/java/perflistset.png)\n\n\n\n\n\n\n\n '}}]);