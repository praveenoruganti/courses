(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[172],{741:function(e,n,a){"use strict";a.r(n),n.default=" Microservice architecture has been built based on below principles\n\n- Scalability\n- Availability\n- Resiliency\n- Flexibility\n- Independent, autonomous\n- Decentralized governance\n- Failure isolation\n- Auto-Provisioning\n- Continuous delivery through DevOps\n\nAdd hearing to the above principles, brings several challenges and issues while bring your solution or system to live. Those problems are common for many solutions. Those can overcome with using correct and matching design patterns. There are design patterns for microservices and those can divide into five Patterns. Each many contains many patterns. Below diagram shows the those.\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/microservice/designpatterns.png)\n\n**Synchronous**\n\nConsumer sends a request and waits for a response. Reads and writes are from the same DB.\n\n\n**Benefits**\n\n1. Simplicity for low scale \u2014 each service makes one API call to Top Clients service.\n2. Data consistency \u2014 all pages display the exact same data without worrying about consistency.\n\n**Drawbacks**\n\n1. Lower Availability \u2014 Top Clients service will have to handle all the load, thus becoming a bottleneck.\n2. Redundant calls (For every user calls to top clients service)\n3. Higher Latency (Calls made to Top clients service for page load)\n\n**Asynchronous**\n\nOur assumption is that the Top Clients service will be read-heavy. Therefore, we want to decouple the business logic (adding, modifying, and deleting clients) from the user-facing pages.\n\n**Benefits**\n\n1. High availability \u2014 each service stores the top clients data, eliminating the need for a second API call.\n2. The data in the various services will be eventually consistent with the source of truth data, thanks to Kafka\u2019s high availability.\n3. Each service adjusts its own resources to manage its scale. This can be achieved by fine-tuning the CPU and memory, having a highly available database, and maintaining low query complexity.\n\n**Drawbacks**\n\nPossible inconsistencies between the services\u2019 databases. Different pages might display different top clients of the same seller.\nData duplication over multiple databases. "}}]);