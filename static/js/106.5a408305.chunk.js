(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[106],{675:function(t,e,n){"use strict";n.r(e),e.default=' Restrict the number of threads that can access a resource. Example, limit max 10 connections to access a file simultaneously.\n\n`Consider an ATM cubicle with 4 ATMs, Semaphore can make sure only 4 people can access simultaneously.`\n\n```jsx\npackage com.praveen.multithreading.semaphore;\n\nimport java.util.concurrent.Semaphore;\n\npublic class SemaphoreExample {\n\t// max 4 people\n\tstatic Semaphore semaphore = new Semaphore(4);\n\n\tstatic class MyATMThread extends Thread {\n\t\tString name = "";\n\n\t\tMyATMThread(String name) {\n\t\t\tthis.name = name;\n\t\t}\n\n\t\t@Override\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\tSystem.out.println(name + " : acquiring lock >>>");\n\t\t\t\tSystem.out.println(name + " : available Semaphore permits now: " + semaphore.availablePermits());\n\t\t\t\tsemaphore.acquire();\n\t\t\t\tSystem.out.println(name + " : got the permit!");\n\t\t\t\ttry {\n\t\t\t\t\tfor (int i = 1; i <= 5; i++) {\n\t\t\t\t\t\tSystem.out.println(name + " : is performing operation " + i + ", available Semaphore permits : "\n\t\t\t\t\t\t\t\t+ semaphore.availablePermits());\n\t\t\t\t\t\t// sleep 1 second\n\t\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\t// calling release() after a successful acquire()\n\t\t\t\t\tSystem.out.println(name + " : releasing lock <<<");\n\t\t\t\t\tsemaphore.release();\n\t\t\t\t\tSystem.out.println(name + " : available Semaphore permits now: " + semaphore.availablePermits());\n\t\t\t\t}\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println("Total available Semaphore permits : " + semaphore.availablePermits());\n\t\tMyATMThread t1 = new MyATMThread("A");\n\t\tt1.start();\n\t\tMyATMThread t2 = new MyATMThread("B");\n\t\tt2.start();\n\t\tMyATMThread t3 = new MyATMThread("C");\n\t\tt3.start();\n\t\tMyATMThread t4 = new MyATMThread("D");\n\t\tt4.start();\n\t\tMyATMThread t5 = new MyATMThread("E");\n\t\tt5.start();\n\t\tMyATMThread t6 = new MyATMThread("F");\n\t\tt6.start();\n\t}\n}\n\n```\n\n**Mutex vs Semaphore**\n\n- **Number of threads**\n\n  Mutex implements mutual exclusion, only one thread can access the resource; the Semaphore allows a set number of permits.\n\n- **Ownership**\n\n  Mutex is tied to the thread currently holding the lock.\n\n '}}]);