(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[124],{693:function(n,t,e){"use strict";e.r(t),t.default=' ![screenshot of the app](https://praveenoruganti.github.io/courses/images/java/functionalinterface.png)\n\nAn interface which contains only one abstract method but can have multiple default and static method is called Functional Interface.\n\n**Example**\n\n- Runnable -> It contains only run() method.\n- Callable -> It contains only call() method.\n- Comparable -> It contains only compareTo() method.\n- Comparator-> It contains only compare() method.\n\nFunctional interface can have java.lang.Object methods.\n\nInside functional interface in addition to single Abstract method (SAM) we write any number of default and static methods.\n\n```jsx\n@FunctionalInterface\npublic interface MyInterface{\n  public void method1();\n  public boolean equals(Object o);\n\n}\n\n```\n\nThis will not throw a compilation error as functional interface can have java.lang.Object methods. \n\n```jsx\n@FunctionalInterface\npublic interface FuctionalInterfaceExample {\n\n    void m1();\n\n    default void m2() {\n        System.out.println("Default method1");\n    }\n\n    default void m3() {\n        System.out.println("Default method2");\n    }\n\n    static void m4() {\n        System.out.println("Static method1");\n    }\n\n}\n\n```\n\n\n\n '}}]);