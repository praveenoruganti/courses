(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[234],{803:function(e,n,t){"use strict";t.r(n),n.default=" Spring Boot has provided one starter for web application.\n\nIt is similar to spring WEB MVC execution process but reduces work done by programmer for\n\na. Maven project creation and setup.\nb. Pom.xml dependencies and plugins.\nc. Writing common code (AppInit, AppConfig).\nd. Handle Runtime Environment and creating JAR/WARs.\n\nSuch process is taken care by spring boot and called as **AutoConfiguration**.\n\nEven coming to Handler Mapping is configured by Front Controller.\n\nViewResovler needs not to be configured. But Programmer has to provide (Prefix and Suffix) using properties/yml file.\n\nFC (DispatcherServlet) is configured by spring boot and mapped to URL = '/'.\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/springboot/mvc.jpg)\n\nFC, ViewResolver, HandlerMapper taken care by Boot, Controller and UI files should be defined by Programmer.\n\n**Data Rendering**\nReading data from Model (I) or ModelMap(C) at runtime and send to UI is known as Data Rendering, It is implemented using EL Programming.\n\nProgrammer should provide inputs like port number view resolver details using Properties or yml file.\n\nFor example,\n\n**application.properties**\n\nserver.port=9090\n\nspring.mvc.view.prefix=/WEB-INF/view/\n\nspring.mvc.view.suffix=.jsp\n\nserver.servlet.context-path=/myapp\n\n\nDefault port no mapped to '8080' by using key **server.port**. We can change even that as mentioned above.\n\nSpring boot has provided 3 embedded servers(No download and No install required). Those are Tomcat (default server), Jetty and Undertow.\n\nIn general Tomcat container 2 engines Servlet Engine (Catalina) and JSP Engine (JASPER). In Spring boot, tomcat comes with only Servlet engine. That's why it is also called as light weight engine that works for **DispatcherServlet**, nothing else.\n\nDefault Static Resource Handler is added to folder static and template which are provided under src/main/resources folder.\n\nTo work with JSP files in Spring Boot WEB apps, we need to add dependencies in pom.xml.\n\n```jsx\n<dependency>\n    <groupId>org.apache.tomcat.embed</groupId>\n    <artifactId>tomcat-embed-jasper</artifactId>\n    <scope>provided</scope>\n</dependency>\n```\n\nTo avoid/remove tomcat server (default server) from Boot application, we need to add <exclusion> for Tomcat under web dependency. \n\n```jsx\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n    <exclusions>\n        <exclusion>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-tomcat</artifactId>\n        </exclusion>\n    </exclusions>\n</dependency>\n```\n\nTo use jetty in spring boot, first we need to exclude **tomcat**, then add the below dependency in pom.xml.\n\n```jsx\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-jetty</artifactId>\n</dependency>\n```\n\nIn case of **JBoss Undertow Server** add the below dependency in pom.xml.\n\n```jsx\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-undertow</artifactId>\n</dependency>\n```\n\nTomcat provided by Apache, Jetty Provided by Eclipse and Undertow provided by JBoss.\n\nFinal packing of Spring Boot Application our project will be converted to JAR/WAR based on <packing> type selected while creating project.\n\n****\n\n**Springboot webapp using JSP**\n\n**JSP Work flow**\n\n- Translation Phase\n\nIn this phase both static content and dynamic content are converted to JAVA format.\n\n- Compilation Phase\n\nJASPPER converts __.java file into __.class format (heavy weight file = static code in dynamic format).\n\n- Execution Phase\n\n__.class is loaded into server and Servlet execution process is started.\n\nHere multiple objects are created like config, contex, Servlet, Request, Response\u2026 etc.\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/springboot/jsp.jpg)\n\n\nAdd the below dependencies in pom.xml\n\n```jsx\n<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-web</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-data-jpa</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-tomcat</artifactId>\n\t\t\t<scope>provided</scope>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.apache.tomcat.embed</groupId>\n\t\t\t<artifactId>tomcat-embed-jasper</artifactId>\n\t\t\t<scope>provided</scope>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.projectlombok</groupId>\n\t\t\t<artifactId>lombok</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>mysql</groupId>\n\t\t\t<artifactId>mysql-connector-java</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>javax.servlet</groupId>\n\t\t\t<artifactId>jstl</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>javax.servlet</groupId>\n\t\t\t<artifactId>servlet-api</artifactId>\n\t\t\t<version>2.5</version>\n\t\t\t<scope>provided</scope>\n\t\t</dependency>\n\t</dependencies>\n```\n\n**Let's create a sample springboot web application using jsp**\n\nLet's defined the properties in application.yml under resources folder\n\n```jsx\nspring:\n application:\n   name: praveenoruganti-registration-app\n datasource:\n    url: jdbc:mysql://root:password-1@localhost:3306/praveenregisrationdb?reconnect=true \n    driverClassName: com.mysql.cj.jdbc.Driver\n jpa:\n   hibernate:\n     ddl-auto: update\n     \n mvc:\n    view:\n      prefix:  /WEB-INF/view/\n      suffix: .jsp\n```\n\nHere with the jsp files and springboot code for [registration-app](https://praveenoruganti.github.io/courses/demo/springboot/registration-app.zip).\n\n**What is the difference between Model (I) and ModelMap (C) ?**\n\n- ModelMap\n\nIt is a shared Memory holds data in key=val which allocates memory based on data added to it In simple onDemand Memory Creation.\n- Model\n\nModel also similar to ModelMap, but un-used key=val pairs (at UI) are removed from memory.\n\n\n**All About Thymeleaf**\n\nSpringBoot supports working with Thymeleaf UI engine which converts only Dynamic content into its equal java code, static content is placed as it is.\n\nDynamic content will be converted to java format and then compiled, finally executed and mixed with static output.\n\nCompared to JSP its coding and memory is less and execution is faster.\n\nJSP (JASPER) is a heavy weight engine; Thymeleaf is a light engine (less memory).\n\nIt may read data from spring container using Thymeleaf EL.\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/springboot/thymeleaf.jpg)\n\n\nTo enable Thymeleaf UI in Spring boot apps add below starter in pom.xml.\n\n```jsx\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-thymeleaf</artifactId>\n</dependency>\n```\n\nThymeleaf tags(code) starts with prefix **th**. for example, th:action, th: hreaf, th:object \u2026 etc.\n\nThymeleaf supports Symbols like '@', '$', and '*' for dynamic coding. For example, @{url}, EL}, *{Link}\n\n\n**Let's develop a springboot webapp using Thymeleaf**\n\nAdd below dependencies in pom.xml.\n\n```jsx\n<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-web</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-thymeleaf</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-data-jpa</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>mysql</groupId>\n\t\t\t<artifactId>mysql-connector-java</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.projectlombok</groupId>\n\t\t\t<artifactId>lombok</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>net.logstash.logback</groupId>\n\t\t\t<artifactId>logstash-logback-encoder</artifactId>\n\t\t\t<version>6.6</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>ch.qos.logback</groupId>\n\t\t\t<artifactId>logback-access</artifactId>\n\t\t</dependency>\n\t</dependencies>\n```\n\nNow Let's define the properties in application.yml present in resources folder\n\n```jsx\nspring:\n application:\n   name: praveenoruganti-employee-mgmt-app\n datasource:\n    url: jdbc:mysql://root:password-1@localhost:3306/praveenemployeedb?reconnect=true \n    driverClassName: com.mysql.cj.jdbc.Driver\n jpa:\n   hibernate:\n     ddl-auto: update    \n\n```\n\nHere with the thymeleaf html files and springboot code for [emp-mgmt-app](https://praveenoruganti.github.io/courses/demo/springboot/emp-mgmt-app.zip).\n\n\n\n\n\n\n\n\n\n "}}]);