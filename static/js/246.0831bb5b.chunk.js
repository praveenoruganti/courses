(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[246],{815:function(e,n,t){"use strict";t.r(n),n.default=' Spring Boot provides a very good support to create a DataSource for Database.\n\nWe need not write any extra code to create a DataSource in Spring Boot.\n\nJust adding the dependencies and doing the configuration details is enough to create a DataSource and connect the Database.\n\n\n`Spring JDBC` simplifies the use of JDBC and helps to avoid common errors. It executes core JDBC workflow, leaving application code to provide SQL and extract results. It does this magic by providing JDBC templates which developers can use inside their applications.\n\nBelow is the maven dependency that we need to any SpringBoot projects in order to use Spring JDBC provider templates.\n\n```jsx\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-data-jdbc</artifactId>\n</dependency>\n```\n\n**Connect to MYSQL database**\n\nLet\'s add the mysql dependency in pom.xml\n\n```jsx\n<dependency>\n  <groupId>mysql</groupId>\n  <artifactId>mysql-connector-java</artifactId>\n</dependency>\n```\n\n**Setup Table in Database**\n\n```jsx\nCREATE TABLE IF NOT EXISTS USER (\n  ID BIGINT AUTO_INCREMENT PRIMARY KEY,\n  FIRSTNAME VARCHAR(50) NOT NULL,\n  LASTNAME VARCHAR(50) NOT NULL,\n  CITY VARCHAR(50) NOT NULL,\n  EMAIL VARCHAR(50) NOT NULL\n);\n```\n\n** Configurations**\n\nWe need to include the below properties in the application.yml\n\n```jsx\nspring:\n  application:\n    name: praveenoruganti-user-service\n  datasource:\n    url: jdbc:mysql://root:password-1@localhost:3306/praveenorugantitech?reconnect=true\n    driverClassName: com.mysql.cj.jdbc.Driver\n\nspringdoc:\n   use-fqn: true\n   swagger-ui:\n    doc-expansion: none\n    operationsSorter: method\n#   supportedSubmitMethods: []\n\napp:\n openApiTitle: User Service\n openApiDescription: |\n\n       User Service\n\n\n```\n\nLet\'s see the code now.\n\n**Controller**\n\n```jsx\n@RestController\n@RequestMapping("/api/v1_0")\n@Tag(description = "User Operations", name = "User Operations")\npublic class UserController {\n\n\tprivate final UserDAO userDAO;\n\n\tpublic UserController(UserDAO userDAO) {\n\t\tthis.userDAO = userDAO;\n\t}\n\n\t@GetMapping("/users/{id}")\n\t@Operation(description = "Fetch User by Id", summary = "Fetch User by Id")\n\tpublic User fetchUser(@PathVariable("id") Long userId) {\n\t\treturn userDAO.findById(userId);\n\t}\n\n\t@GetMapping("/users/city/{city}")\n\t@Operation(description = "Fetch User by City", summary = "Fetch User by City")\n\tpublic User fetchUserByCity(@PathVariable("city") String city) {\n\t\treturn userDAO.findByCity(city);\n\t}\n\n\t@GetMapping("/users")\n\t@Operation(description = "Fetch All Users", summary = "Fetch All Users")\n\tpublic List<User> fetchUsers() {\n\t\treturn userDAO.findAll();\n\t}\n\n\t@PostMapping("/users")\n\t@Operation(description = "Create User", summary = "Create User")\n\tpublic int createUser(@RequestBody User user) {\n\t\treturn userDAO.save(user);\n\t}\n\n}\n\n\n\n```\n\n**User**\n\n```jsx\n@AllArgsConstructor\n@NoArgsConstructor\n@Data\n@SuperBuilder\npublic class User {\n\n\tprivate Long id;\n\tprivate String firstName;\n\tprivate String lastName;\n\tprivate String city;\n\tprivate String email;\n\n}\n\n\n```\n\n**UserMapper**\n\n```jsx\npublic class UserMapper implements RowMapper<User> {\n\tpublic User mapRow(ResultSet rs, int rowNum) throws SQLException {\n\t\treturn User.builder().id(rs.getLong("id")).city(rs.getString("city")).email(rs.getString("email"))\n\t\t\t\t.firstName(rs.getString("firstName")).lastName(rs.getString("lastName")).build();\n\t}\n}\n```\n\n**Note**\n\nIf the column names in a table and field names inside a POJO or Bean are matching then we can use BeanPropertyRowMapper which is provided by Spring framework.\n\nSpring BeanPropertyRowMapper class saves you lot of time since we dont have to define the mappings like we do inside a RowMapper implementation.\n\nFor example,\n\n```jsx\nvar rowMapper = BeanPropertyRowMapper.newInstance(User.class);\n```\n\n**UserDAO**\n\n```jsx\n@Repository\npublic class UserDAO {\n\n\tprivate final JdbcTemplate jdbcTemplate;\n\n\tpublic UserDAO(JdbcTemplate jdbcTemplate) {\n\t\tthis.jdbcTemplate = jdbcTemplate;\n\t}\n\n\tpublic List<User> findAll() {\n\t\treturn jdbcTemplate.query("select * from user", new UserMapper());\n\t}\n\n\tpublic User findById(Long id) {\n\t\treturn jdbcTemplate.queryForObject("select * from user where id = ?", new UserMapper(), new Object[] { id });\n\t}\n\n\tpublic User findByCity(String city) {\n\t\treturn jdbcTemplate.queryForObject("select * from user where city = ?", new UserMapper(),\n\t\t\t\tnew Object[] { city });\n\t}\n\n\tpublic int save(User user) {\n\t\treturn jdbcTemplate.update("insert into user (firstName,lastName,city,email) values(?,?,?,?)",\n\t\t\t\tuser.getFirstName(), user.getLastName(), user.getCity(), user.getEmail());\n\t}\n\n}\n\n\n```\n '}}]);