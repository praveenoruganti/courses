(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[133],{702:function(t,n,e){"use strict";e.r(n),n.default=" Data types specify the different sizes and values that can be stored in the variable. \n\nThere are two types of data types in Java:\n\n- **Primitive** :  boolean, char, byte, short, int, long, float and double.\n- **Non-primitive** : Classes, Interfaces, and Arrays.\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/java/datatypes.jpg)\n\n\n**Primitive Data Types**\n\nIn Java language, primitive data types are the building blocks of data manipulation.\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/java/datatyperanges.jpg)\n\nLet's see some example,\n\n```jsx\npackage com.praveen.datatypes;\n\npublic class DataTypesDemo {\n\n\tpublic static void main(String[] args) {\n\n\t\t// byte a =130; // compiler error as byte range is -128 to 127\n\n\t\tbyte a = -50;\n\t\tshort b = 150;\n\t\tint c = 10000;\n\t\tlong d = 100000;\n\t\tchar e = 'A';\n\t\t// float f = 1.23; // compiler error as it needs to differntiate between float and double\n\t\tfloat f = 1.23f;\n\t\tdouble g = 12345.6789;\n\n\t\tbyte h = 20;\n\t\t// byte result = a + h; // compiler error as sum of byte may be out of range\n\n\t\tint result = a + h;\n\n\t}\n\n}\n\n```\n\n**Type Casting**\n\n- Conversion of data from one type to another type is called Type Casting.\n- Java supports Primitive as well as Non-primitive casting.\n- Type Casting can be implicit or explicit.\n- Implicit casting means it happens automatically. \n  \n  For Primitive Data Type, lower -> higher for example, byte -> int\n\n  For Non-primitive Data Type, child class -> parent class\n\n- Explicit casting means it needs to be manually done by the developer. \n\n  For Primitive Data Type, higher -> lower for example, int -> byte\n\n  For Non-primitive Data Type, parent class -> child class\n\nLet's see an example for Primitive Implicit casting,\n\n```jsx\npackage com.praveen.datatypes;\n\npublic class ImplicitCastDemo {\n\n\tpublic static void main(String[] args) {\n\n\t\tbyte b = 100;\n\t\tint i = b;\n\t\tSystem.out.println(i); // 100\n\t\tlong l = i;\n\t\tSystem.out.println(l); // 100\n\n\t\tchar ch = 'A';\n\t\tint x = ch;\n\t\tSystem.out.println(x); // 65\n\n\t}\n\n}\n\n```\n\nLet's see an example for Primitive Explicit casting,\n\n```jsx\npackage com.praveen.datatypes;\n\npublic class ExplicitCastDemo {\n\n\tpublic static void main(String[] args) {\n\n\t\tint i = 100;\n\t\tbyte b = (byte) i;\n\t\tSystem.out.println(b); // 100\n\n\t\tint x = 97;\n\t\tchar ch = (char) x;\n\t\tSystem.out.println(ch); // a\n\n\t\tint y = 130;\n\t\tbyte z = (byte) y;\n\t\tSystem.out.println(z); // -126, it is resulting as -126 as byte range is from -128 to 127 and if its beyond range i.e.. 127 then it goes to negative value.\n\t\t\n\t\t\n\t\tint m = 612;\n\t\tbyte n = (byte) m;\n\t\tchar o =(char) n;\n\t\tSystem.out.println(o); // d, it is resulting as d as 256*2 = 512 and 612-512 = 100 so a is 97 that means 100 is d. \n\n\t}\n\n}\n\n```\n\n\n\n\n\n\n\n\n\n "}}]);