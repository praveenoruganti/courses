(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[239],{808:function(n,e,i){"use strict";i.r(e),e.default=' Profiles help to have different application configuration for different environments.\n\nSpring Boot would pick up the application configuration based on the active profile that is set in a specific environment.\n\nYou can define default configuration in application.properties. \n\nEnvironment specific overrides can be configured in specific files.\n\n```jsx\n\napplication-dev.properties\napplication-qa.properties\napplication-stage.properties\napplication-prod.properties\n\n```\n**Setting A Spring Boot Profile**\n\nHere are a couple of ways of setting the active profile:\n\n1. At the time of launching the Java application\n    \n    ```jsx\n    -Dspring.profiles.active=qa \u2013 in the VM properties\n    ```\n\n2. Do the following in the application.properties file\n\n    ```jsx\n    spring.profiles.active=qa\n    ```\n\nDepending on which profile is currently the active, the appropriate configuration is picked up.\n\n**Using Profiles In Code**\n\nA profile can be used in code to define your beans.\n\nFor example, have a look at the following piece of code:\n\n```jsx\n@Profile("dev")\n@Bean\npublic String devBean() {\nreturn "I will be available in profile dev";\n}\n\n@Profile("prod")\n@Bean\npublic String prodBean() {\nreturn "I will be available in profile prod";\n}\n```\n\nThe bean devBean() will only be available with the dev profile, as it has been annotated with @Profile("dev"). \n\nSimilarly, the bean prodBean() is only available with the profile prod.\n '}}]);