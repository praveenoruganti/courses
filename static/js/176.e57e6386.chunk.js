(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[176],{745:function(e,s,a){"use strict";a.r(s),s.default=" UML stands for Unified Modeling Language and is used to model the Object-Oriented Analysis of a software system. UML is a way of visualizing and documenting a software system by using a collection of diagrams, which helps engineers, businesspeople, and system architects understand the behavior and structure of the system being designed.\n\nBenefits of using UML:\n\n- Helps develop a quick understanding of a software system.\n- UML modeling helps in breaking a complex system into discrete pieces that can be easily understood.\n- UML\u2019s graphical notations can be used to communicate design decisions.\n- Since UML is independent of any specific platform or language or technology, it is easier to abstract out concepts.\n- It becomes easier to hand the system over to a new team.\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/objectorienteddesign/uml.jpeg)\n\n\nTypes of UML Diagrams: The current UML standards call for 14 different kinds of diagrams. These diagrams are organized into two distinct groups: structural diagrams and behavioral or interaction diagrams. As the names suggest, some UML diagrams analyze and depict the structure of a system or process, whereas others describe the behavior of the system, its actors, and its building components. The different types are broken down as follows:\n\n**Structural UML diagrams**\n\n- Class diagram\n- Object diagram\n- Package diagram\n- Component diagram\n- Composite structure diagram\n- Deployment diagram\n- Profile diagram\n\n**Behavioral UML diagrams**\n\n- Use case diagram\n- Activity diagram\n- Sequence diagram\n- State diagram\n- Communication diagram\n- Interaction overview diagram\n- Timing diagram\n\nRest of the sections, we will be focusing on the following UML diagrams:\n\n**Use Case Diagram:** Used to describe a set of user scenarios, this diagram, illustrates the functionality provided by the system.\n\n**Class Diagram:** Used to describe structure and behavior in the use cases, this diagram provides a conceptual model of the system in terms of entities and their relationships.\n\n**Activity Diagram:** Used to model the functional flow-of-control between two or more class objects.\n\n**Sequence Diagram:** Used to describe interactions among classes in terms of an exchange of messages over time. "}}]);