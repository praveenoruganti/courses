(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[194],{763:function(e,n,t){"use strict";t.r(n),n.default=' ![screenshot of the app](https://praveenoruganti.github.io/courses/images/reactjs/prop_drilling.jpg)\n\nTo avoid prop drilling, we need to make use of Context API in class components and useContext in functional components.\n\nNow lets see useContext.\n\n- Accepts a context object(the value returned from createContext).\n- Returns the current context value for that context.\n- current context value is determined by value prop of the nearest <MyContext.Provider> above the calling component in the tree.\n\nFor example,\n\n```jsx\nconst themes = {\n  light: {\n    foreground: "#000000",\n    background: "#eeeeee",\n  },\n  dark: {\n    foreground: "#ffffff",\n    background: "#222222",\n  },\n};\n\nconst ThemeContext = React.createContext(themes.light);\n\nfunction App() {\n  return (\n    <ThemeContext.Provider value={themes.dark}>\n      <Toolbar />\n    </ThemeContext.Provider>\n  );\n}\n\nfunction Toolbar(props) {\n  return (\n    <div>\n      <ThemedButton />\n    </div>\n  );\n}\n\nfunction ThemedButton() {\n  const theme = useContext(ThemeContext);\n  return (\n    <button style={{ background: theme.background, color: theme.foreground }}>\n      I am styled by theme context!\n    </button>\n  );\n}\n``` '}}]);