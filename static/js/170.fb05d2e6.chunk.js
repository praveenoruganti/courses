(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[170],{739:function(e,n,t){"use strict";t.r(n),n.default=' Spring Cloud Sleuth is used for distributed tracing.\n\nSpring Cloud Sleuth allows you to integrate unique tracking identifiers into the HTTP calls and message channels (RabbitMQ, Apache Kafka) being used within your application. These tracking numbers, sometimes referred to as correlation or trace ids, allow you to track a transaction as it flows across the different services in your application. With Spring Cloud Sleuth, these trace IDs are automatically added to any logging statements you make in your microservice.\n\nFor example, If you have, let\'s say 3 services, A, B and C. We made three different requests.\n\nOne request went from A \u2192 B, another from A \u2192 B \u2192 C, and last one went from B \u2192 C.\n\nA -> B\n\nA -> B -> C\n\nB -> C\n\nAs the number of microservices grow, tracing requests that propagate from one microservice to another and figure out how a requests travels through the application can be quite daunting.\n\nSleuth makes it possible to trace the requests by adding unique ids to logs.\n\nApplication name(1st) representis name of the application.  A trace id (2nd) is used for tracking across the microservices; represents the whole journey of a request across all the microservices, while span id (3rd) is used for tracking within the individual microservice. \n\nExport(4th) exports to log handling server like splunk or zipkin. \n\nTo use Sleuth, add below dependency in pom.xml\n\n```jsx\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-sleuth</artifactId>\n</dependency>\n```\nand in service class of praveenoruganti-billing-service, use logger to log some info.\n\n```jsx\n@Service\n@Slf4j\npublic class BillingService {\n\tpublic String billingOrder(@Valid String orderid) throws Exception {\n\t\tint orderidNum=Integer.parseInt(orderid);\n\t\t// This logic is just used for testing the service and will not be used in real time.\n\t\tif(orderidNum<=0) {\n\t\t\tlog.info(orderid);\n\t\t\tthrow new Exception("Invalid Order ID " + orderid);\n\t\t}else if(orderidNum>0 && orderidNum<500) {\n\t\t\tlog.info(orderid);\n\t\t\tthrow new Exception("Payment failed for Order ID "+orderid);\n\t\t}else {\n\t\t\tlog.info(orderid);\n\t\t\treturn "Successfully placed the order "+orderid;\n\t\t}\n\t\t\n\t}\n\n}\n\n```\n\nNow check the logs of praveenoruganti-billing-service by posting some transactions and you can see applicationname, traceid, spanid and log handling server.\n\nLet\'s take one log transaction from below screenshot and we can see  application name is praveenoruganti-billing-service, trace id is 95d9962199891f52, span id is 95d9962199891f52 and log handling server is false.\n\n```jsx\n{"@timestamp":"2019-11-12T16:44:11.215Z","severity":"INFO","service":"praveenoruganti-billing-service","thread":"http-nio-8091-exec-7","class":"c.praveen.billing.service.BillingService","methodName":"billingOrder","lineNo":"21","message":"1232","stacktrace":"","traceId":"95d9962199891f52","spanId":"95d9962199891f52"}\n```\n\n\n\n '}}]);