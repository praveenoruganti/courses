(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[226],{795:function(t,e,n){"use strict";n.r(e),e.default=' **REST Consumer API :: RestTemplate**\n\nIf you need to call remote REST services from your application, you can use the Spring Framework\u2019s RestTemplate class. Since RestTemplate instances often need to be customized before being used, Spring Boot does not provide any single auto-configured RestTemplate bean. It does, however, auto-configure a RestTemplateBuilder, which can be used to create RestTemplate instances when needed. The auto-configured RestTemplateBuilder ensures that sensible HttpMessageConverters are applied to RestTemplate instances.\n\nRestTemplateBuilder includes a number of useful methods that can be used to quickly configure a RestTemplate. For example, to add BASIC auth support, you can use builder.basicAuthorization("user", "password").build().\n\n**REST Consumer API :: WebClient**\n\nIf you have Spring WebFlux on your classpath, you can also choose to use WebClient to call remote REST services. Compared to RestTemplate, this client has a more functional feel and is fully reactive. You can create your own client instance with the builder, WebClient.create().\n\nSpring Boot creates and pre-configures such a builder for you. For example, client HTTP codecs are configured in the same fashion as the server ones.\n\nThere are three main approaches to WebClient customization, depending on how broadly you want the customizations to apply.\n\nTo make the scope of any customizations as narrow as possible, inject the auto-configured WebClient.Builder and then call its methods as required. WebClient.Builder instances are stateful: Any change on the builder is reflected in all clients subsequently created with it. If you want to create several clients with the same builder, you can also consider cloning the builder with WebClient.Builder other = builder.clone();.\n\nTo make an application-wide, additive customization to all WebClient.Builder instances, you can declare WebClientCustomizer beans and change the WebClient.Builder locally at the point of injection.\n\nFinally, you can fall back to the original API and use WebClient.create(). In that case, no auto-configuration or WebClientCustomizer is applied.\n\nLets develop Covid Service which calls external service [https://api.rootnet.in/covid19-in/stats/latest](https://api.rootnet.in/covid19-in/stats/latest) using Rest Template and WebClient.\n\nInclude the below dependencies in pom.xml\n\n```jsx\n<dependency>\n\t<groupId>org.springframework.boot</groupId>\n\t<artifactId>spring-boot-starter-webflux</artifactId>\n</dependency>\n<dependency>\n\t<groupId>org.springframework.boot</groupId>\n\t<artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n\n```\n\n**SpringBoot Main class**\n\n```jsx\n@SpringBootApplication\npublic class CovidAlertServiceApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(CovidAlertServiceApplication.class);\n\t}\n\n\t@Bean\n\tpublic OpenAPI customOpenAPI(ApplicationConfig applicationConfig) {\n\n\t\treturn new OpenAPI().components(new Components())\n\t\t\t\t.info(new Info().title(applicationConfig.getOpenApiTitle())\n\t\t\t\t\t\t.description(applicationConfig.getOpenApiDescription())\n\t\t\t\t\t\t.contact(new Contact().name("Praveen Oruganti").email("praveenoruganti@gmail.com")\n\t\t\t\t\t\t\t\t.url("https://praveenoruganti.github.io"))\n\t\t\t\t\t\t.termsOfService("https://praveenoruganti.github.io/#/aboutme")\n\t\t\t\t\t\t.license(new License().name("GNU General Public License v3.0").url("https://www.gnu.org/licenses")));\n\t}\n\n\t@Bean\n\tRestTemplate restTemplate(RestTemplateBuilder builder) {\n\t\treturn builder.build();\n\t}\n\n}\n\n\n\n```\n\n**Controller**\n\n```jsx\n@RestController\n@Validated\n@Tag(description = "Covid Alert Stats", name = "Covid Alert Stats")\n@RequestMapping("/api/v1_0")\n@Slf4j\npublic class CovidAlertController {\n\n\tprivate final CovidAlertService alertService;\n\n\tpublic CovidAlertController(CovidAlertService alertService) {\n\t\tthis.alertService = alertService;\n\t}\n\n\t@GetMapping("/summary/state/{state}")\n\t@Operation(description = "Covid Alert by State", summary = "Covid Alert by State")\n\tpublic AlertStatusResponse getAlertAboutState(@PathVariable("state") @State String state) {\n\t\tlog.info(Constants.INITAL_REQUEST, v("state", state));\n\t\tAlertStatusResponse alertStatusResponse = alertService.getAlertAboutState(state);\n\t\tlog.info(Constants.FINAL_RESPONSE, kv(Constants.RESPONSE, alertStatusResponse));\n\t\treturn alertStatusResponse;\n\t}\n\n\t@GetMapping("/summary")\n\t@Operation(description = "Covid Alert Overall Summary", summary = "Covid Alert Overall Summary")\n\tpublic SummaryDataResponse getOverAllSummary() {\n\t\tlog.info(Constants.INITAL_REQUEST);\n\t\tSummaryDataResponse summaryDataResponse = alertService.getOverAllSummary();\n\t\tlog.info(Constants.FINAL_RESPONSE, kv(Constants.RESPONSE, summaryDataResponse));\n\t\treturn summaryDataResponse;\n\t}\n\n\t@GetMapping("/stats")\n\t@Operation(description = "Covid Alert Overall Stats", summary = "Covid Alert Overall Stats")\n\tpublic CountryDataResponse getOverAllStats() {\n\t\tlog.info(Constants.INITAL_REQUEST);\n\t\tCountryDataResponse countryDataResponse = alertService.getOverAllStats();\n\t\tlog.info(Constants.FINAL_RESPONSE, kv(Constants.RESPONSE, countryDataResponse));\n\t\treturn countryDataResponse;\n\t}\n}\n\n\n```\n\n**WebClient Configuration**\n\n```jsx\n@Configuration\npublic class WebClientConfiguration {\n\n\tprivate ApplicationConfig appConfig;\n\n\tpublic WebClientConfiguration(ApplicationConfig appConfig) {\n\t\tthis.appConfig = appConfig;\n\t}\n\n\t@Bean\n\tpublic WebClient covidStatsLookup() {\n\t\treturn WebClient.builder().clientConnector(new ReactorClientHttpConnector(createHttpClient()))\n\t\t\t\t.baseUrl(appConfig.getCovidStatsLookupApiHost() + appConfig.getCovidStatsLookupApiEndpoint())\n\t\t\t\t.build();\n\t}\n\n\tprivate HttpClient createHttpClient() {\n\t\treturn HttpClient.newConnection().resolver(DefaultAddressResolverGroup.INSTANCE)\n\t\t\t\t.option(ChannelOption.CONNECT_TIMEOUT_MILLIS, appConfig.getConnectionTimeout()).doOnConnected(\n\t\t\t\t\t\tconnection -> connection.addHandlerLast(new ReadTimeoutHandler(appConfig.getReadTimeout(), TimeUnit.MILLISECONDS)));\n\t}\n}\n```\n\n**Service**\n\n```jsx\n@Service\npublic class CovidAlertService {\n\n\tprivate final CovidStatsLookupService covidStatsLookupService;\n\n\tpublic CovidAlertService(CovidStatsLookupService covidStatsLookupService) {\n\t\tthis.covidStatsLookupService = covidStatsLookupService;\n\t}\n\n\tpublic AlertStatusResponse getAlertAboutState(String state) {\n\t\tAlertStatus alertStatus = new AlertStatus();\n\t\tCovidApiData covidApiData = covidStatsLookupService.fetchStatsUsingRestTemplate();\n\t\tStateData stateData = Arrays.stream(covidApiData.getData().getRegional())\n\t\t\t\t.filter(e -> e.getLoc().equalsIgnoreCase(state)).findAny().orElse(new StateData());\n\t\talertStatus.setSummaryData(stateData);\n\t\tif (stateData.getTotalConfirmed() < 1000) {\n\t\t\talertStatus.setAlertLevel("GREEN");\n\t\t\talertStatus.setMeasuresToBeTaken(Arrays.asList("Everything is Normal !!"));\n\t\t} else if (stateData.getTotalConfirmed() > 1000 && stateData.getTotalConfirmed() < 10000) {\n\t\t\talertStatus.setAlertLevel("ORANGE");\n\t\t\talertStatus.setMeasuresToBeTaken(Arrays.asList("Only Essential services are allowed",\n\t\t\t\t\t"List of services that come under essential service"));\n\t\t} else {\n\t\t\talertStatus.setAlertLevel("RED");\n\t\t\talertStatus.setMeasuresToBeTaken(\n\t\t\t\t\tArrays.asList("Absolute lock-down", "Only Medical and food services are allowed here"));\n\t\t}\n\n\t\treturn AlertStatusResponse.builder().status("Success").data(alertStatus).build();\n\t}\n\n\tpublic SummaryDataResponse getOverAllSummary() {\n\t\tCovidApiData covidApiData = covidStatsLookupService.fetchStatsUsingWebClient();\n\t\tSummaryData summaryData = covidApiData.getData().getSummary();\n\t\tsummaryData.setUpdateTime(covidApiData.getLastRefreshed());\n\t\treturn SummaryDataResponse.builder().status("Success").data(summaryData).build();\n\t}\n\n\tpublic CountryDataResponse getOverAllStats() {\n\t\tCovidApiData covidApiData = covidStatsLookupService.fetchStatsUsingWebClient();\n\t\tCountryData countryData = covidApiData.getData();\n\t\tcountryData.getSummary().setUpdateTime(covidApiData.getLastRefreshed());\n\t\treturn CountryDataResponse.builder().status("Success").data(countryData).build();\n\t}\n}\n\n\n```\n\n```jsx\n@Service\n@Slf4j\npublic class CovidStatsLookupService {\n\n\tprivate final ApplicationConfig appConfig;\n\tprivate final WebClient covidStatsLookup;\n\tprivate final RestTemplate restTemplate;\n\n\tpublic CovidStatsLookupService(ApplicationConfig appConfig, WebClient covidStatsLookup, RestTemplate restTemplate) {\n\t\tthis.appConfig = appConfig;\n\t\tthis.covidStatsLookup = covidStatsLookup;\n\t\tthis.restTemplate = restTemplate;\n\t}\n\n\tpublic CovidApiData fetchStatsUsingWebClient() {\n\t\tlog.info("Covid Stats Lookup Service Request", v("Host", appConfig.getCovidStatsLookupApiHost()),\n\t\t\t\tv("Path", appConfig.getCovidStatsLookupApiEndpoint()));\n\t\tCovidApiData covidApiData = null;\n\t\ttry {\n\t\t\tStopWatch stopWatch = new StopWatch("Covid Stats Lookup Service Call");\n\t\t\tstopWatch.start();\n\t\t\tcovidApiData = covidStatsLookup.get().retrieve().bodyToMono(CovidApiData.class).retryWhen(\n\t\t\t\t\tRetry.backoff(appConfig.getRetryAttempts(), Duration.ofMillis(appConfig.getBackOffTimeInMillisec()))\n\t\t\t\t\t\t\t.filter(throwable -> isConnectionTimeout(throwable)))\n\t\t\t\t\t.block();\n\t\t\tstopWatch.stop();\n\t\t\tlog.info("Covid Stats Lookup Service Execution Times", v("Host", appConfig.getCovidStatsLookupApiHost()),\n\t\t\t\t\tv("Path", appConfig.getCovidStatsLookupApiEndpoint()),\n\t\t\t\t\tv("TotalTimeTaken", stopWatch.getTotalTimeMillis()));\n\t\t} catch (WebClientResponseException webClientResponseException) {\n\t\t\tlog.error("Covid Stats Lookup Failure Response",\n\t\t\t\t\tv("webClientResponse", webClientResponseException.getResponseBodyAsString()));\n\t\t\tthrow new ExternalServiceException("covidStatsLookupException-" + webClientResponseException.getMessage());\n\n\t\t} catch (Exception exception) {\n\t\t\tlog.error("Covid Stats Lookup Failure Response", v("webClientResponse", exception.getMessage()));\n\t\t\tthrow new ExternalServiceException("covidStatsLookupException-" + exception.getMessage());\n\n\t\t}\n\t\treturn covidApiData;\n\t}\n\n\tpublic CovidApiData fetchStatsUsingRestTemplate() {\n\t\tlog.info("Covid Stats Lookup Service Request", v("Host", appConfig.getCovidStatsLookupApiHost()),\n\t\t\t\tv("Path", appConfig.getCovidStatsLookupApiEndpoint()));\n\t\tCovidApiData covidApiData = null;\n\t\ttry {\n\t\t\tStopWatch stopWatch = new StopWatch("Covid Stats Lookup Service Call");\n\t\t\tstopWatch.start();\n\t\t\tcovidApiData = restTemplate.getForObject(\n\t\t\t\t\tappConfig.getCovidStatsLookupApiHost() + appConfig.getCovidStatsLookupApiEndpoint(),\n\t\t\t\t\tCovidApiData.class);\n\t\t\tstopWatch.stop();\n\t\t\tlog.info("Covid Stats Lookup Service Execution Times", v("Host", appConfig.getCovidStatsLookupApiHost()),\n\t\t\t\t\tv("Path", appConfig.getCovidStatsLookupApiEndpoint()),\n\t\t\t\t\tv("TotalTimeTaken", stopWatch.getTotalTimeMillis()));\n\t\t} catch (Exception exception) {\n\t\t\tlog.error("Covid Stats Lookup Failure Response", v("webClientResponse", exception.getMessage()));\n\t\t\tthrow new ExternalServiceException("covidStatsLookupException-" + exception.getMessage());\n\n\t\t}\n\t\treturn covidApiData;\n\t}\n\n\tprivate boolean isConnectionTimeout(Throwable throwable) {\n\n\t\tboolean isConnectionTimeout = false;\n\t\tboolean isUnknownHost = false;\n\t\tif (throwable instanceof WebClientRequestException) {\n\t\t\tWebClientRequestException excep = (WebClientRequestException) throwable;\n\t\t\tif (excep.contains(ConnectTimeoutException.class)) {\n\t\t\t\tisConnectionTimeout = true;\n\t\t\t} else if (excep.contains(UnknownHostException.class)) {\n\t\t\t\tisUnknownHost = true;\n\t\t\t}\n\t\t} else {\n\t\t\tisConnectionTimeout = throwable instanceof ConnectTimeoutException;\n\t\t\tisUnknownHost = throwable instanceof UnknownHostException;\n\t\t}\n\n\t\treturn isConnectionTimeout || isUnknownHost;\n\n\t}\n\n}\n\n\n``` '}}]);