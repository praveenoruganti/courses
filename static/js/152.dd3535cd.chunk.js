(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[152],{721:function(e,n,a){"use strict";a.r(n),n.default=" # JavaScript Objects\n\nJavaScript object is a non-primitive data-type that allows you to store multiple collections of data.\n\n```jsx\n// object\nconst student = {\n    firstName: 'Praveen',\n    class: 10\n};\n```\nHere, student is an object that stores values such as strings and numbers.\n\n### JavaScript Object Declaration\n\n```jsx\nconst object_name = {\n   key1: value1,\n   key2: value2\n}\n```\nHere, an object object_name is defined. Each member of an object is a key: value pair separated by commas and enclosed in curly braces {}.\n\n```jsx\n// object creation\nconst person = {\n    name: 'Praveen',\n    age: 20\n};\nconsole.log(typeof person); // object\n```\n\nThere are many ways we can create Object\n\n### Using object literal\n\n```jsx\n// program to create JavaScript object using object literal\nconst person = {\n    name: 'Praveen',\n    age: 20,\n    hobbies: ['reading', 'games', 'coding'],\n    greet: function() {\n        console.log('Hello everyone.');\n    },\n    score: {\n        maths: 90,\n        science: 80\n    }\n};\n\nconsole.log(typeof person); // object\n\n// accessing the object value\nconsole.log(person.name);\nconsole.log(person.hobbies[0]);\nperson.greet();\nconsole.log(person.score.maths);\n```\n### Create an Object using Instance of Object Directly\n\n```jsx\n// program to create JavaScript object using instance of an object\nconst person = new Object ( {\n    name: 'Praveen',\n    age: 20,\n    hobbies: ['reading', 'games', 'coding'],\n    greet: function() {\n        console.log('Hello everyone.');\n    },\n    score: {\n        maths: 90,\n        science: 80\n    }\n});\n\nconsole.log(typeof person); // object\n\n// accessing the object value\nconsole.log(person.name);\nconsole.log(person.hobbies[0]);\nperson.greet();\nconsole.log(person.score.maths);\n```\n\n### Create an object using Constructor Function\n\n```jsx\n// program to create JavaScript object using instance of an object\n\nfunction Person() {\n    this.name = 'Praveen',\n    this.age = 20,\n    this.hobbies = ['reading', 'games', 'coding'],\n    this.greet = function() {\n        console.log('Hello everyone.');\n    },\n    this.score = {\n        maths: 90,\n        science: 80\n    }\n\n}\n\nconst person = new Person();\n\nconsole.log(typeof person); // object\n\n// accessing the object value\nconsole.log(person.name);\nconsole.log(person.hobbies[0]);\nperson.greet();\nconsole.log(person.score.maths);\n\n```\n\n### JavaScript Object Properties\nIn JavaScript, \"key: value\" pairs are called properties.\n\n```jsx\nlet person = {\n    name: 'Praveen',\n    age: 20\n};\n```\n### Accessing Object Properties\nYou can access the value of a property by using its key.\n\n### Using dot Notation\nobjectName.key\n\n```jsx\nconst person = {\n    name: 'John',\n    age: 20,\n};\n\n// accessing property\nconsole.log(person.name); // John\n\n```\n\n### Using bracket Notation\nobjectName[\"propertyName\"]\n\n```jsx\nconst person = {\n    name: 'Praveen',\n    age: 20,\n};\n\n// accessing property\nconsole.log(person[\"name\"]); // John\n```\n### JavaScript Nested Objects\nAn object can also contain another object.\n\n```jsx\n// nested object\nconst student = {\n    name: 'Praveen',\n    age: 20,\n    marks: {\n        science: 70,\n        math: 75\n    }\n}\n\n// accessing property of student object\nconsole.log(student.marks); // {science: 70, math: 75}\n\n// accessing property of marks object\nconsole.log(student.marks.science); // 70\n```\n## JavaScript Object Methods\nIn JavaScript, an object can also contain a function.\n```jsx\nconst person = {\n    name: 'Praveen',\n    age: 30,\n    // using function as a value\n    greet: function() { console.log('hello') }\n}\n\nperson.greet(); // hello\n```\nHere, a function is used as a value for the greet key. That's why we need to use person.greet() instead of person.greet to call the function inside the object.\n\n### JavaScript Methods and this Keyword\nIn JavaScript, objects can also contain functions.\n```jsx\n// object containing method\nconst person = {\n    name: 'Praveen',\n    greet: function() { console.log('hello'); }\n};\n```\nIn the above example, a person object has a key(name and greet) and string value and a function value.\nHence basically, the JavaScript method is an object property that has a function value.\n\n### Accessing Object Methods\nYou can access an object method using a dot notation.\nobjectName.methodKey()\nYou can access a method by calling an objectName and a key for that method along with (). And you can access property only by calling an objectName and a key.\n\n```jsx\n// accessing method and property\nconst person = {\n    name: 'Praveen',\n    greet: function() { console.log('hello'); }\n};\n\n// accessing property\nperson.name; // Praveen\n\n// accessing method\nperson.greet(); // hello\n```\n\nHere, the greet method is accessed as person.greet() instead of person.greet.\n\nIf you try to access the method with only person.greet, it will give you a function definition.\n\n```jsx\nperson.greet; // \u0192 () { console.log('hello'); }\n```\n### JavaScript Built-In Methods\n\nIn JavaScript, there are many built-in methods.\nFor Example,\n\n```jsx\nlet number = '23.32';\nlet result = parseInt(number);\n\nconsole.log(result); // 23\n```\nHere, the parseInt() method of Number object is used to convert numeric string value to an integer value.\n\n### Adding a Method to a JavaScript Object\nYou can also add a method in an object.\n```jsx\n// creating an object\nlet student = { };\n\n// adding a property\nstudent.name = 'Praveen';\n\n// adding a method\nstudent.greet = function() {\n    console.log('hello');\n}\n\n// accessing a method\nstudent.greet(); // hello\n```\n\nIn the above example, an empty student object is created. Then, the name property is added. Similarly, the greet method is also added. In this way, you can add a method as well as property to an object.\n\n### JavaScript this Keyword\nTo access a property of an object from within a method of the same object, you need to use the this keyword.\n\n```jsx\nconst person = {\n    name: 'Praveen',\n    age: 30,\n\n    // accessing name property by using this.name\n    greet: function() { console.log('The name is' + ' ' + this.name); }\n};\n\nperson.greet();\n```\nIn the above example, a person object is created. It contains properties(name and age) and a method greet.\n\nIn the method greet, while accessing a property of an object, this keyword is used.\n\nIn order to access the properties of an object, this keyword is used following with . and key.\n\n**Note**\n\nIn JavaScript, this keyword when used with the object's method refers to the object. this is bound to an object.\n\nHowever, the function inside of an object can access it's variable in a similar way as a normal function would.\n\n```jsx\nconst person = {\n    name: 'Praveen',\n    age: 30,\n    greet: function() {\n        let surname = 'Oruganti';\n        console.log('The name is' + ' ' + this.name + ' ' + surname); }\n};\n\nperson.greet();\n```\n\n### JavaScript Constructor Function\nIn JavaScript, a constructor function is used to create objects.\n\n```jsx\n// constructor function\nfunction Person () {\n    this.name = 'Praveen',\n    this.age = 35\n}\n\n// create an object\nconst person = new Person();\n```\nIn the above example, function Person() is an object constructor function.\nTo create an object from a constructor function, we use the new keyword.\n\n**Note**\n\nIt is considered a good practice to capitalize the first letter of your constructor function.\n\n### Create Multiple Objects with Constructor Function\nIn JavaScript, you can create multiple objects from a constructor function.\n\n```jsx\n// constructor function\nfunction Person () {\n    this.name = 'Praveen',\n    this.age = 35,\n\n     this.greet = function () {\n        console.log('hello');\n    }\n}\n\n// create objects\nconst person1 = new Person();\nconst person2 = new Person();\n\n// access properties\nconsole.log(person1.name);  // Praveen\nconsole.log(person2.name);  // Praveen\n```\nIn the above program, two objects are created using the same constructor function.\n\n### JavaScript this Keyword\nIn JavaScript, when this keyword is used in a constructor function, this refers to the object when the object is created.\n\n```jsx\n// constructor function\nfunction Person () {\n    this.name = 'Praveen',\n}\n\n// create object\nconst person1 = new Person();\n\n// access properties\nconsole.log(person1.name);  // Praveen\n```\nHence, when an object accesses the properties, it can directly access the property as person1.name.\n\n### JavaScript Constructor Function Parameters\nYou can also create a constructor function with parameters.\n\n```jsx\n// constructor function\nfunction Person (person_name, person_age, person_gender) {\n\n   // assigning  parameter values to the calling object\n    this.name = person_name,\n    this.age = person_age,\n    this.gender = person_gender,\n\n    this.greet = function () {\n        return ('Hi' + ' ' + this.name);\n    }\n}\n\n// creating objects\nconst person1 = new Person('Praveen', 35, 'male');\nconst person2 = new Person('Anusha', 30, 'female');\n\n// accessing properties\nconsole.log(person1.name); // \"Praveen\"\nconsole.log(person2.name); // \"Anusha\"\n```\nIn the above example, we have passed arguments to the constructor function during the creation of the object.\n```jsx\nconst person1 = new Person('Praveen', 35, 'male');\nconst person2 = new Person('Anusha', 30, 'male');\n// This allows each object to have different properties. As shown above,\nconsole.log(person1.name); // Praveen\nconsole.log(person2.name); // Anusha\n```\n### Create Objects: Constructor Function Vs Object Literal\n- Object Literal is generally used to create a single object. The constructor function is useful if you want to create multiple objects. For example,\n\n```jsx\n// using object literal\nlet person = {\n    name: 'Praveen'\n}\n```\n```jsx\n// using constructor function\nfunction Person () {\n    this.name = 'Praveen'\n}\n\nlet person1 = new Person();\nlet person2 = new Person();\n```\n- Each object created from the constructor function is unique. You can have the same properties as the constructor function or add a new property to one particular object. For example,\n\n```jsx\n// using constructor function\nfunction Person () {\n    this.name = 'Praveen'\n}\n\nlet person1 = new Person();\nlet person2 = new Person();\n\n// adding new property to person1\nperson1.age = 35;\n```\nNow this age property is unique to person1 object and is not available to person2 object.\n\nHowever, if an object is created with an object literal, and if a variable is defined with that object value, any changes in variable value will change the original object. For example,\n\n```jsx\n// using object lateral\nlet person = {\n    name: 'Praveen'\n}\n\nconsole.log(person.name); // Sam\n\nlet student = person;\n\n// changes the property of an object\nstudent.name = 'PraveenOruganti';\n\n// changes the origins object property\nconsole.log(person.name); // PraveenOruganti\n```\nWhen an object is created with an object literal, any object variable derived from that object will act as a clone of the original object. Hence, any change you make in one object will also reflect in the other object.\n\n### Adding Properties And Methods in an Object\nYou can add properties or methods in an object like this:\n\n```jsx\n// constructor function\nfunction Person () {\n    this.name = 'Praveen',\n    this.age = 35\n}\n\n// creating objects\nlet person1 = new Person();\nlet person2 = new Person();\n\n// adding property to person1 object\nperson1.gender = 'male';\n\n// adding method to person1 object\nperson1.greet = function () {\n    console.log('hello');\n}\n\nperson1.greet();   // hello\n\n// Error code\n// person2 doesn't have greet() method\nperson2.greet();\n```\nIn the above example, a new property gender and a new method greet() is added to the person1 object.\nHowever, this new property and method is only added to object1. You cannot access gender or greet() from object2. Hence the program gives error when we try to access person2.greet();\n\n### JavaScript Object Prototype\nYou can also add properties and methods to a constructor function using a prototype. For example,\n```jsx\n// constructor function\nfunction Person () {\n    this.name = 'Praveen',\n    this.age = 35\n}\n\n// creating objects\nlet person1 = new Person();\nlet person2 = new Person();\n\n// adding new property to constructor function\nPerson.prototype.gender = 'Male';\n\nconsole.log(person1.gender); // Male\nconsole.log(person2.gender); // Male\n```\n### JavaScript Built-in Constructors\nJavaScript also has built-in constructors. Some of them are:\n```jsx\nlet a = new Object();    // A new Object object\nlet b = new String();    // A new String object\nlet c = new Number();    // A new Number object\nlet d = new Boolean();   // A new Boolean object\n```\nIn JavaScript, strings can be created as an object by:\n```jsx\nconst name = new String ('Praveen');\nconsole.log(name); // \"John\"\n```\nIn JavaScript, numbers can be created as an object by:\n\n```jsx\nconst number = new Number (57);\nconsole.log(number); // 57\n```\nIn JavaScript, booleans can be created as an object by:\n\n```jsx\nconst count = new Boolean(true);\nconsole.log(count); // true\n```\n\n**Note**\n\nIt is recommended to use primitive data types and create them in a normal way, such as const name = 'Praveen';, const number = 57; and const count = true;\n\nYou should not declare strings, numbers, and boolean values as objects because they slow down the program.\n\n**Note**\n\nIn JavaScript, the keyword class was introduced in ES6 (ES2015) that also allows us to create objects. Classes are similar to constructor functions in JavaScript.\n\n### Iterate Through an Object\n\n```jsx\nconst student = {\n    name: 'Keerthana',\n    class: 7,\n    age: 12\n}\n\n// using for...in\nfor ( let key in student ) {\n\n    // display the properties\n\n}\n```\n```jsx\nconst salaries= {\n    Harish : 24000,\n    Varma : 34000,\n    Raveesh : 55000\n}\n\n// using for...in\nfor ( let i in salaries) {\n\n    // add a currency symbol\n    let salary = \"$\" + salaries[i];\n\n    // display the values\n\n}\n```\n\n### delete operator\nIn JavaScript, the delete operator is employed to delete a property of an object. After deleting the actual property, that property won\u2019t be accessible and returns undefined.\nThe invocation of the delete operator returns true when it removes a property and false otherwise. it\u2019s only effective on an object\u2019s properties, it has no effect on variable or function names.\nThe delete operator shouldn\u2019t be used on predefined JavaScript object properties like window, Math, and Date objects. It can crash your application.\n\n**Delete object properties**\n\nThe only way to fully remove the properties of an object in JavaScript is by using delete operator.\nIf the property which you\u2019re trying to delete doesn\u2019t exist, delete won\u2019t have any effect and can return true.\n\n\n**Can we delete variables in Javascript?**\n\nThe delete operator removes a property from an object. It cannot delete a variable. Any property declared with var cannot be deleted from the global scope or from a function's scope.\nThe variable declared without the var keyword internally stores it as a property of the window object. So we can delete the properties of the window object.\n\n**Can we delete values from an array?**\n\nSince JavaScript arrays are objects, elements can be deleted by using delete.\n\n```jsx\nlet alphaArray= ['a','b','c','d'];\nconsole.log(delete alphaArray[0]); // true\nconsole.log(alphaArray[0]); // undefined\nconsole.log(alphaArray); // [ <1 empty item>, 'b', 'c', 'd' ]\nconsole.log(JSON.stringify(alphaArray)) ; // [null,\"b\",\"c\",\"d\"]\n```\n**Can we delete built-in objects?**\n\nDeleting built-in objects like Math, Date, and window objects are unsafe, and they can crash your entire application.\n\n### Lets see some more examples on Objects\n\n```jsx\nlet mCars = {\n    \"p1\": \"350 kmph\",\n    \"gallardo\": '320 kmph',\n    \"veyron\": '409 kmph',\n    \"agera\": '429 kmph'\n}\nconsole.log(mCars);\nObject.entries(mCars).forEach(([key,value]) => {\n  console.log(key,value);\n})\n\n/*\np1 350 kmph\ngallardo 320 kmph\nveyron 409 kmph\nagera 429 kmph\n*/\n\nlet mAgera = {\n  name: \"Agera\",\n  manufacturer: {\n    name: \"Koenigsegg\",\n    location: \"Sweden\",\n  },\n  topSpeed: 429,\n  color: \"Black\",\n  spoilers: false,\n  applyBrakes: function () {\n    setTimeout(function () {\n      console.log(\"Car Stopped\");\n    }, 5000);\n  },\n};\n\nconsole.log(mAgera.name); // Agera\nconsole.log(mAgera.topSpeed); // 429\nconsole.log(mAgera.manufacturer); // { name: 'Koenigsegg', location: 'Sweden' }\nconsole.log(mAgera.manufacturer.name); // Koenigsegg\nconsole.log(mAgera.applyBrakes()); // Car Stopped\n\n```\n\n# JavaScript Array\nAs you know, a variable can store a single element. If you need to store multiple elements at once, you can use an array.\nAn array is an object that can store multiple elements. For example,\n```jsx\nconst myArray = ['hello', 'world', 'welcome'];\n```\n\n### Create an Array\nYou can create an array using two ways:\n\n1. Using an array literal\nThe easiest way to create an array is by using an array literal []. For example,\n```jsx\nconst array1 = [\"eat\", \"sleep\"];\n```\n2. Using the new keyword\nYou can also create an array using JavaScript's new keyword.\n```jsx\nconst array2 = new Array(\"eat\", \"sleep\");\n```\nIn both of the above examples, we have created an array having two elements.\n\n**Note**\n\nIt is recommended to use array literal to create an array.\n\n```jsx\nHere are more examples of arrays:\n\n// empty array\nconst myList = [ ];\n// array containing number values\nconst numberArray = [ 2, 4, 6, 8];\n\n// array containing string values\nconst stringArray = [ 'eat', 'work', 'sleep'];\n\n// multiple data types array\nconst newData = ['work', 'exercise', 1, true];\n```\nYou can also store arrays, functions and other objects inside an array. For example,\n\n```jsx\nconst newData = [\n    {'task1': 'exercise'},\n    [1, 2 ,3],\n    function hello() { console.log('hello')}\n];\n```\n### Access Elements of an Array\nYou can access the elements inside of an array using indices (0, 1, 2 \u2026). For example,\n\n```jsx\nconst myArray = ['h',  'e', 'l', 'l', 'o'];\n\n// first element\nconsole.log(myArray[0]);  // \"h\"\n\n// second element\nconsole.log(myArray[1]); // \"e\"\n```\n**Note**\n\nArray's index starts with 0, not 1.\n\n### Add an Element to an Array\n\nYou can use the built-in method push() and unshift() to add an element to an array.\nThe push() method adds an element at the end of an array and returns the length of a new array. For example,\n```jsx\nlet dailyActivities = ['eat', 'sleep'];\n\n// add an element at the end of the array\ndailyActivities.push('exercise');\n\nconsole.log(dailyActivities); //  ['eat', 'sleep', 'exercise']\n```\nThe unshift() method adds a new element to the beginning of an array and returns the new length of an array. For example,\n```jsx\nlet dailyActivities = ['eat', 'sleep'];\n\n//add an element at the end of the array\ndailyActivities.unshift('work');\n\nconsole.log(dailyActivities); // ['work', 'eat', 'sleep', 'exercise'']\n```\n### Change the Elements of an Array\nYou can also add elements or change the elements by accessing the index value.\n```jsx\nlet dailyActivities = [ 'eat', 'sleep'];\n\n// this will add the new element 'exercise' at the 2 index\ndailyActivities[2] = 'exercise';\n\nconsole.log(dailyActivities); // ['eat', 'sleep', 'exercise']\n```\nSuppose, an array has two elements. If you try to add an element at index 3 (fourth element), the third element will be undefined. For example,\n```jsx\nlet dailyActivities = [ 'eat', 'sleep'];\n\n// this will add the new element 'exercise' at the 3 index\ndailyActivities[3] = 'exercise';\n\nconsole.log(dailyActivities); // [\"eat\", \"sleep\", undefined, \"exercise\"]\n```\nBasically, if you try to add elements to high indices, the indices in between will have undefined value.\n\n### Remove an Element from an Array\nYou can use the pop() method to remove the last element from an array. The pop() method also returns the returned value. For example,\n\n```jsx\nlet dailyActivities = ['work', 'eat', 'sleep', 'exercise'];\n\n// remove the last element\ndailyActivities.pop();\nconsole.log(dailyActivities); // ['work', 'eat', 'sleep']\n\n// remove the last element from ['work', 'eat', 'sleep']\nconst removedElement = dailyActivities.pop();\n\n//get removed element\nconsole.log(removedElement); // 'sleep'\nconsole.log(dailyActivities);  // ['work', 'eat']\n```\n\nIf you need to remove the first element, you can use the shift() method. The shift() method removes the first element and also returns the removed element. For example,\n```jsx\nlet dailyActivities = ['work', 'eat', 'sleep'];\n\n// remove the first element\ndailyActivities.shift();\n\nconsole.log(dailyActivities); // ['eat', 'sleep']\n```\n### Array length\n\nYou can find the length of an element (the number of elements in an array) using the length property. For example,\n```jsx\nconst dailyActivities = [ 'eat', 'sleep'];\n\n// this gives the total number of elements in an array\nconsole.log(dailyActivities.length); // 2\n```\n\n### Array Methods\nIn JavaScript, there are various array methods available that makes it easier to perform useful calculations.\nSome of the commonly used JavaScript array methods are:\n\nconcat()\tjoins two or more arrays and returns a result\nindexOf()\tsearches an element of an array and returns its position\nfind()\treturns the first value of an array element that passes a test\nfindIndex()\treturns the first index of an array element that passes a test\nforEach()\tcalls a function for each element\nincludes()\tchecks if an array contains a specified element\npush()\taads a new element to the end of an array and returns the new length of an array\nunshift()\tadds a new element to the beginning of an array and returns the new length of an array\npop()\tremoves the last element of an array and returns the removed element\nshift()\tremoves the first element of an array and returns the removed element\nsort()\tsorts the elements alphabetically in strings and in ascending order\nslice()\tselects the part of an array and returns the new array\nsplice()\tremoves or replaces existing elements and/or adds new elements\n\n```jsx\nlet dailyActivities = ['sleep', 'work', 'exercise']\nlet newRoutine = ['eat'];\n\n// sorting elements in the alphabetical order\ndailyActivities.sort();\nconsole.log(dailyActivities); // ['exercise', 'sleep', 'work']\n\n//finding the index position of string\nconst position = dailyActivities.indexOf('work');\nconsole.log(position); // 2\n\n// slicing the array elements\nconst newDailyActivities = dailyActivities.slice(1);\nconsole.log(newDailyActivities); // [ 'sleep', 'work']\n\n// concatenating two arrays\nconst routine = dailyActivities.concat(newRoutine);\nconsole.log(routine); // [\"exercise\", \"sleep\", \"work\", \"eat\"]\n```\n**Note**\n\nIf the element is not in an array, indexOf() gives -1.\n### Working of JavaScript Arrays\nIn JavaScript, an array is an object. And, the indices of arrays are objects keys.\nSince arrays are objects, the array elements are stored by reference. Hence, when an array value is copied, any change in the copied array will also reflect in the original array. For example,\n\n```jsx\nlet arr = ['h', 'e'];\nlet arr1 = arr;\narr1.push('l');\n\nconsole.log(arr); // [\"h\", \"e\", \"l\"]\nconsole.log(arr1); // [\"h\", \"e\", \"l\"]\n```\nYou can also store values by passing a named key in an array. For example,\n\n```jsx\nlet arr = ['h', 'e'];\narr.name = 'John';\n\nconsole.log(arr); // [\"h\", \"e\"]\nconsole.log(arr.name); // \"John\"\nconsole.log(arr['name']); // \"John\"\n\n```\n\nHowever, it is not recommended to store values by passing arbitrary names in an array.\nHence in JavaScript, you should use an array if values are in ordered collection. Otherwise it's better to use object with { }.\n\n### Iterate\n```jsx\n// define array\nconst arr = [ 'hello', 1, 'JavaScript' ];\n\n// using for...in loop\nfor (let x in arr) {\n    console.log(arr[x]);\n}\n```\n\n### Lets see some more examples on Arrays\n\n```jsx\n\nlet myFriends = [\"Varma\", \"Bhaja\", \"Rinwaz\"];\nconsole.log(myFriends); // [ 'Varma', 'Bhaja', 'Rinwaz' ]\n\nconsole.log(myFriends[2]); // Rinwaz\nconsole.log(myFriends[0]); // Varma\n\n// Update a value\nmyFriends[1] = \"Khaja\";\nconsole.log(myFriends); // [ 'Varma', 'Khaja', 'Rinwaz' ]\n\n// Add more items\nmyFriends[3] = \"Prakasam\";\nconsole.log(myFriends); // [ 'Varma', 'Khaja', 'Rinwaz', 'Prakasam' ]\n\nmyFriends[5] = \"Ravi\";\nconsole.log(myFriends); // [ 'Varma', 'Khaja', 'Rinwaz', 'Prakasam', undefined, 'Ravi' ]\n\nmyFriends[myFriends.length] = \"Praneeth\";\nconsole.log(myFriends); // [ 'Varma', 'Khaja', 'Rinwaz', 'Prakasam', undefined, 'Ravi', 'Praneeth' ]\n\nmyFriends.push(\"Vipin\");\nconsole.log(myFriends); // [ 'Varma', 'Khaja', 'Rinwaz', 'Prakasam', undefined, 'Ravi', 'Praneeth', 'Vipin' ]\n\n// Delete a value\nmyFriends.pop();\nconsole.log(myFriends); // [ 'Varma', 'Khaja', 'Rinwaz', 'Prakasam', undefined, 'Ravi', 'Praneeth' ]\n\n// splice()\n// 1st tells what to start\n// 2nd tells how many items to be deleted\n// 3rd and 4th and so on tells what items to be added\nmyFriends.splice(4, 1, \"Vipin\", \"Phani\");\nconsole.log(myFriends); // [ 'Varma', 'Khaja', 'Rinwaz', 'Prakasam', 'Vipin','Phani', 'Ravi', 'Praneeth' ]\n\nmyFriends.splice(0, 0, \"Karuna\");\nconsole.log(myFriends); // [ 'Karuna','Varma', 'Khaja', 'Rinwaz', 'Prakasam', 'Vipin','Phani', 'Ravi', 'Praneeth' ]\n\n// Delete item at specific position\nmyFriends.splice(3, 1);\nconsole.log(myFriends); // [ 'Karuna','Varma', 'Khaja', 'Prakasam', 'Vipin','Phani', 'Ravi', 'Praneeth' ]\nmyFriends.splice(0, 2);\nconsole.log(myFriends); // [ 'Khaja', 'Prakasam', 'Vipin', 'Phani', 'Ravi', 'Praneeth' ]\n\n// Concatenation\nlet myOfficeFriends = [\"Nagesh\", \"Satya\", \"Kasi\"];\nlet myAllFriends = myFriends.concat(myOfficeFriends);\nconsole.log(myAllFriends); // [ 'Khaja', 'Prakasam', 'Vipin', 'Phani', 'Ravi', 'Praneeth', 'Nagesh', 'Satya', 'Kasi' ]\n\n// Sorting Ascending and descending\nmyAllFriends.sort();\nconsole.log(myAllFriends); // [ 'Kasi', 'Khaja',  'Nagesh',   'Phani', 'Prakasam', 'Praneeth', 'Ravi', 'Satya', 'Vipin']\n\nmyAllFriends.reverse();\nconsole.log(myAllFriends); // [ 'Vipin',  'Satya',  'Ravi',  'Praneeth',  Prakasam', 'Phani', 'Nagesh', 'Khaja', 'Kasi']\n\nconst array1 = [2,5,8,1,4];\nconst array2= [12,5,8,11,4];\n\nconsole.log(array1.some(value => value > 10)); // false\nconsole.log(array2.some(value => value > 10)); // true\n\n```\n\nYou can check out the [Demo](https://praveenoruganti.github.io/courses/demo/js/Objects)\n\n\n\n "}}]);