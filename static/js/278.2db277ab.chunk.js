(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[278],{847:function(n,e,t){"use strict";t.r(e),e.default=' Mockito is a Java framework allowing the creation of mock objects in automated unit tests.\n\nA mock object is a dummy implementation for an interface or a class in which you define the output of certain method calls.\n\n\nThe main workflow when using Mockito for our tests is usually the following:\n\n- Create mocks for collaborators of our class under test (e.g., using @Mock)\n- Stub the behavior of the mocks as they\'ll otherwise return a default value (when().thenReturn())\n- (Optionally) Verify the interaction of our mocks (verify())\n\nThe four golden rules of Mockito should always guide our decisions about when and what to mock:\n\n- Do not mock types you don\'t own\n- Don\'t mock values objects\n- Don\'t mock everything\n- Show some love with your tests\n\n\n**Mocking a class**\n\n```jsx\nimport static org.mockito.Mockito.*;\nimport static org.junit.Assert.*;\n@Test\npublic void test1() {\n    // create mock\n    MyClass test = mock(MyClass.class);\n    // define return value for method getUniqueId()\n    when(test.getUniqueId()).thenReturn(43);\n    // use mock in test....\n    assertEquals(test.getUniqueId(), 43);\n}\n\n```\n\n**Mockito: Verify**\n\n- Once created, mock will remember all interactions\n- Then you can verify whatever an interaction happened\n\n```jsx\nimport static org.mockito.Mockito.*;\n...\n//mock creation\nList mockedList = mock(List.class);\n//using mock object\nmockedList.add("one");\nmockedList.clear();\n//verification\nverify(mockedList).add("one");\nverify(mockedList).clear();\n```\n\n**Argument matchers**\n\n- Mockito verifies argument values by using an equals() method.\n- When flexibility is required then you should use argument matchers.\n\n```jsx\n//stubbing using anyInt() argument matcher\nwhen(mockedList.get(anyInt())).thenReturn("element");\n//verify using an argument matcher\nverify(mockedList).get(anyInt());\n\n```\n\n- Other argument matchers: anyString(), anyObject(), anyVararg(), \u2026\n- **Attention!** If you are using argument matchers, all arguments have to be provided by matchers.\n\n\n**Mockito: Spy**\n\nWith Mockito you can spy a real class. When you use the spy then the real methods are called (unless a method was stubbed).\n\n```jsx\nList<String> list = new LinkedList<>();\nList<String> spy = spy(list);\n//optionally, you can stub out some methods:\nwhen(spy.size()).thenReturn(100);\n//using the spy calls *real* methods\nspy.add("one");\nspy.add("two");\n//prints "one" - the first element of a list\nSystem.out.println(spy.get(0));\n//size() method was stubbed - 100 is printed\nSystem.out.println(spy.size());\n//optionally, you can verify\nverify(spy).add("one");\nverify(spy).add("two");\n\n``` '}}]);