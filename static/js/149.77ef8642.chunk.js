(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[149],{718:function(n,e,o){"use strict";o.r(e),e.default=" ## What is an Operator?\nIn JavaScript, an operator is a special symbol used to perform operations on operands(values and variables).\n\n```jsx\nconst x = 5;\n```\n\n## JavaScript Arithmetic Operators\nArithmetic operators are used to perform arithmetic calculations.\n\n```jsx\nconst number = 3 + 5; // 8\n\nlet x = 5;\nlet y = 3;\n\n// addition\nconsole.log('x + y = ', x + y);\n\n// subtraction\nconsole.log('x - y = ', x - y);\n\n// multiplication\nconsole.log('x * y = ', x * y);\n\n// division\nconsole.log('x / y = ', x / y);\n\n// remainder\nconsole.log('x % y = ', x % y);\n\n// increment\nconsole.log('++x = ', ++x); // x is now 6\nconsole.log('x++ = ', x++); // x returns 6 and then increases by 1\nconsole.log('x = ', x);\n\n// decrement\nconsole.log('--x = ', --x); // x is now 6\nconsole.log('x-- = ', x--); // x returns 6 and then increases by 1\nconsole.log('x = ', x);\n\n//exponentiation\nconsole.log('x ** y =', x ** y);\n```\n## JavaScript Comparison Operators\nComparison operators compare two values and return a boolean value, either true or false.\n\n```jsx\nconst a = 3, b = 2;\nconsole.log(a > b); // true\n\n// equal operator\nconsole.log(2 == 2); // true\nconsole.log(2 == '2'); // true\n\n// not equal operator\nconsole.log(3 != 2); // true\nconsole.log('hello' != 'Hello'); // true\n\n// strict equal operator\nconsole.log(2 === 2); // true\nconsole.log(2 === '2'); // false\n\n// strict not equal operator\nconsole.log(2 !== '2'); // true\nconsole.log(2 !== '2'); // false\n```\n\n## JavaScript Logical Operators\nLogical operators perform logical operations and return a boolean value, either true or false.\n\n```jsx\nconst x = 5, y = 3;\n(x < 6) && (y < 5); // true\n// logical AND\nconsole.log(true && true); // true\nconsole.log(true && false); // false\n\n// logical OR\nconsole.log(true || false); // true\n\n// logical NOT\nconsole.log(!true); // false\n```\n## JavaScript Bitwise Operators\nBitwise operators perform operations on binary representations of numbers.\n\n```jsx\n// AND operator example\n\nlet a = 12;\nlet  b = 25;\n\nresult = a & b;\nconsole.log(result); // 8\n\n// OR operator example\nlet a = 12;\nlet  b = 25;\n\nresult = a | b;\nconsole.log(result); // 29\n\n// XOR operator example\nlet a = 12;\nlet  b = 25;\n\nresult = a ^ b;\nconsole.log(result); // 21\n\n// NOT operator example\nlet  b = 12;\n\nresult = ~b;\n\nconsole.log(result); // -13\n\n// Left Shift\n\nlet a = 8;\nlet  b = 1;\n\nresult = a << b;\n\n// 1 ( 00000000000000000000000000010000 )\nconsole.log(result);\n\n// Sign-propagating right shift\n\nlet a = 8;\nlet b = 1;\n// 11111111111111111111111111111101\nlet c = -3;\n\nresult = a >> b;\nresult1 = c >> b;\n\n// 4 (00000000000000000000000000000100)\nconsole.log(result);\n\n// -1 (11111111111111111111111111111111)\nconsole.log(result1);\n\n// Zero-fill right shift\nlet a = 8;\nlet b = 1;\nlet c = -3;\n\nresult = a >>> b;\nresult1 = c >>> b;\n\n// 4 (00000000000000000000000000000100)\nconsole.log(result);\n\n// 1073741823 (00111111111111111111111111111111)\nconsole.log(result);\n\n```\n\n## JavaScript String Operators\nIn JavaScript, you can also use the + operator to concatenate (join) two or more strings.\n\n```jsx\n// concatenation operator\nconsole.log('hello' + 'world');\n\nlet a = 'JavaScript';\n\na += ' tutorial';  // a = a + ' tutorial';\nconsole.log(a);\n```\n## Precedence\nEvery complex statement with multiple operators in the same line will introduce\nprecedence problems.\nTake this example:\nlet a = 1 * 2 + 5 / 2 % 2;\nThe result is 2.5, but why?\nWhat operations are executed first, and which need to wait?\nSome operations have more precedence than the others. The precedence\nrules are listed in this table:\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/js/Precedence.PNG)\n\nOperations on the same level (like + and - ) are executed in the order they\nare found, from left to right.\nFollowing these rules, the operation above can be solved in this way:\n```jsx\nlet a = 1 * 2 + 5 / 2 % 2\nlet a = 2 + 5 / 2 % 2\nlet a = 2 + 2.5 % 2\nlet a = 2 + 0.5\nlet a = 2.5\n```\nYou can check out the [Demo](https://praveenoruganti.github.io/courses/demo/js/Operators)\n\n\n "}}]);