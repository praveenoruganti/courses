(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[237],{806:function(e,t,a){"use strict";a.r(t),t.default=" Redis is an open-source (BSD licensed), in-memory data structure store, used as a database, cache, and message broker. It supports data structures such as string, hashes, lists, sets, sorted sets with range queries, bitmaps, hyper logs, and geospatial indexes with radius queries.\n\nRedis is written in ANSI C and works in most POSIX systems like Linux, BSD, and OS X without external dependencies. Linux and OS X are the two operating systems where Redis is developed and more tested. Redis may work in Solaris-derived systems like SmartOS. There is no official support for Windows builds, but Microsoft develops and maintains a Win-64 port of Redis.\n\n**Why Redis?**\n\nRedis is basically used for cache management. It reduces the client workload and speeds up the application.\n\nLet's discuss a scenario where Redis could be helpful.\n\n- **Calling an External Application API**\n\nYour microservice is calling other application\u2019s API in order to get some data. The call is made often, the data in response is huge, and you know the response data is not going to change often in the other application. In our case, we are calling one API and we get the response in 10000 to 15000 ms. It is not good for any application to wait for such a long time to get the response. In that case, Redis is helpful.\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/springboot/redis.png)\n\nWe can cache the response in Redis with an expiration time so instead of the actual call, you will get the response from the Redis cache. In our case, we had set the expiration time of the data to 1 day. When the data expires, the call goes to the actual web service and refreshes the data in the cache. The next time, the data will be returned from the cache.\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/springboot/redis1.png)\n\nHere, we reduce the load time of the data by 90% and we were getting the same data in between 700 to 1000 milliseconds.\n\n- **Frequently Querying the Reference Table or Master Table in the Database**\n\nAnother scenario is when you have a table in your database, and that table contains reference data that is not going to change frequently. You query that table often to get the data and populate the UI. In this scenario, you can also use Redis. Instead of querying the database each time from the disk, you can cache the table in Redis with an expiration time so the load time of your UI will be faster.\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/springboot/redis2.png)\n\n\n\n\n\n\n "}}]);