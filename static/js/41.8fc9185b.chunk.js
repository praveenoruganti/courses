(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[41],{610:function(t,n,e){"use strict";e.r(n),n.default=' It is a type of Structural Design Pattern.\n\nIt just provides a unified and simplified interface to a set of interfaces in a subsystem, therefore it hides the complexities of the subsystem from the client. Practically, every Abstract Factory is a type of Facade.\n\n\n```jsx\npackage com.praveen.designpatterns.structural.facade;\n\npublic class Waiter {\n\t\n\tpublic void takeOrder() {\n\t\tSystem.out.println("Take Order from Client");\n\t}\n\t\n\tpublic void takeOrderToCook() {\n\t\tSystem.out.println("Send Order to Cook");\n\t}\n\t\n\tpublic void serverCustomer() {\n\t\tSystem.out.println("Server Food to Client");\n\t}\n\n}\n\n\n```\n\n```jsx\npackage com.praveen.designpatterns.structural.facade;\n\npublic class Kitchen {\n\t\n\tpublic void cookFood() {\n\t\tSystem.out.println("Cook the Food");\n\t}\n\t\n\tpublic void signalReady() {\n\t\tSystem.out.println("Signal Food is Ready");\n\t}\n\n}\n\n```\n\n```jsx\npackage com.praveen.designpatterns.structural.facade;\n\npublic class OrderFacade {\n\n\tprivate Waiter waiter;\n\tprivate Kitchen kitchen;\n\n\tpublic OrderFacade(Waiter waiter, Kitchen kitchen) {\n\t\tthis.waiter = waiter;\n\t\tthis.kitchen = kitchen;\n\t}\n\n\tpublic void orderFood() {\n\t\twaiter.takeOrder();\n\t\twaiter.takeOrderToCook();\n\t\tkitchen.cookFood();\n\t\tkitchen.signalReady();\n\t\twaiter.serverCustomer();\n\n\t}\n\n}\n\n```\n\n```jsx\npackage com.praveen.designpatterns.structural.facade;\n\npublic class FacadePatternTest {\n\n\tpublic static void main(String[] args) {\n\t\tOrderFacade facade = new OrderFacade(new Waiter(), new Kitchen());\n\t\tfacade.orderFood();\n\t}\n\n}\n\n```\n\n**Output**\n\n```jsx\nTake Order from Client\nSend Order to Cook\nCook the Food\nSignal Food is Ready\nServer Food to Client\n\n```\n\n### Benefits\n- It shields the clients from the complexities of the sub-system components.\n- It promotes loose coupling between subsystems and its clients.\n\n### Facade pattern examples in JDK\n\n- In javax.faces.context, ExternalContext internally uses ServletContext, HttpSession, HttpServletRequest, HttpServletResponse, etc. It allows the Faces API to be unaware of \nthe nature of its containing application environment.\n\n '}}]);