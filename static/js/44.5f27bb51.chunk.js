(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[44],{613:function(e,t,n){"use strict";n.r(t),t.default=' It is a type of Behavioral Design Pattern.\n\nMediator promotes loose coupling by keeping objects from referring to each other explicitly, and it lets you vary their interaction independently.\n\nMediator design pattern is used to provide a centralized communication medium between different objects in a system.\n\nRather than interacting directly with each other, objects ask the Mediator to interact on their behalf which results in reusability and loose coupling. It encapsulates the interaction between the objects and makes them independent from each other. This allows them to vary their interaction with other objects in a totally different way by implementing a different mediator. The Mediator helps to reduce the complexity of the classes. Each object no longer has to know in detail about how to interact with the other objects. The coupling between objects goes from tight and brittle to loose and agile.\n\nMediator design pattern is very helpful in an enterprise application where multiple objects are interacting with each other. If the objects interact with each other directly, the system components are tightly-coupled with each other that make maintainability cost higher and not flexible to extend easily. Mediator pattern focuses on provide a mediator between objects for communication and help in implementing lose-coupling between objects.\n\nAir traffic controller is a great example of mediator pattern where the airport control room works as a mediator for communication between different flights. Mediator works as a\nrouter between objects and it can have its own logic to provide way of communication.\n\n```jsx\npackage com.praveen.designpatterns.behavioral.mediator;\n\npublic interface ChatServer {\n\tvoid addUser(Participant user);\n\n\tvoid sendMessage(Participant user, String message);\n}\n\n```\n\n```jsx\npackage com.praveen.designpatterns.behavioral.mediator;\n\npublic class Participant {\n\tprivate String userName;\n\tprivate ChatServer charServerMediator;\n\n\tpublic Participant(String name) {\n\t\tthis.userName = name;\n\t}\n\n\tpublic String getUserName() {\n\t\treturn userName;\n\t}\n\n\tpublic void joinChatGroup(ChatServer chatGroup) {\n\t\tcharServerMediator = chatGroup;\n\t\tcharServerMediator.addUser(this);\n\t}\n\n\tpublic void sendMessage(String message) {\n\t\tSystem.out.println(userName + ", Sending this message : "" + message + """);\n\t\tcharServerMediator.sendMessage(this, message);\n\t}\n\n\tpublic void receiveMessage(String message, Participant user) {\n\t\tSystem.out.println(userName + ", Received : "" + message + "", From : " + user.userName);\n\t}\n}\n\n```\n\n```jsx\npackage com.praveen.designpatterns.behavioral.mediator;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ChatServerMediator implements ChatServer {\n\tprivate List<Participant> participantList;\n\n\tpublic ChatServerMediator() {\n\t\tparticipantList = new ArrayList<Participant>();\n\t}\n\n\tpublic void addUser(Participant user) {\n\t\tparticipantList.add(user);\n\t}\n\n\tpublic void sendMessage(Participant user, String message) {\n\t\tfor (Participant p : participantList) {\n\t\t\tif (p != user) {\n\t\t\t\tp.receiveMessage(message, user);\n\t\t\t}\n\t\t}\n\t}\n}\n\n```\n\n```jsx\npackage com.praveen.designpatterns.behavioral.mediator;\n\npublic class MediatorPatternTest {\n\tpublic static void main(String[] args) {\n\t\tChatServer chatServer = new ChatServerMediator();\n\n\t\tParticipant praveen = new Participant("Praveen");\n\t\tParticipant prasad = new Participant("Prasad");\n\t\tParticipant praneeth = new Participant("Praneeth");\n\n\t\tpraveen.joinChatGroup(chatServer);\n\t\tprasad.joinChatGroup(chatServer);\n\t\tpraneeth.joinChatGroup(chatServer);\n\n\t\tpraveen.sendMessage("Hi Everyone, I am Praveen");\n\t\tpraneeth.sendMessage("Hi Praveen, How are you");\n\t}\n}\n\n```\n\n**Output**\n\n```jsx\nPraveen, Sending this message : "Hi Everyone, I am Praveen"\nPrasad, Received : "Hi Everyone, I am Praveen", From : Praveen\nPraneeth, Received : "Hi Everyone, I am Praveen", From : Praveen\nPraneeth, Sending this message : "Hi Praveen, How are you"\nPraveen, Received : "Hi Praveen, How are you", From : Praneeth\nPrasad, Received : "Hi Praveen, How are you", From : Praneeth\n\n```\n\n### When to use the Mediator Pattern:\n- A set of objects communicate in well-defined but complex ways. The resulting interdependencies are unstructured and difficult to understand.\n- Reusing an object is difficult because it refers to and communicates with many other objects.\n- A behavior that\u2019s distributed between several classes should be customizable without a lot of sub-classing.\n\n### Mediator pattern examples in JDK\n- java.util.Timer class scheduleXXX() methods.\n- java Concurrency Executor execute() method.\n- java.lang.reflect.Method invoke() method. '}}]);