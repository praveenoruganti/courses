(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[163],{732:function(e,t,n){"use strict";n.r(t),t.default=' When EL and Standard Action elements aren\'t enough to remove scriptlet code from your JSP Page, you can use Custom Tags. Custom tags are nothing but user-defined tags.\n\nCustom tags are an excellent way to abstract the complexity of business logic from the presentation of Web pages in a way that is easy for the Web author to use and control. It also allows for reusability as custom tags can be used again and again.\n\n- **Tag handler class**: In this class we specify what our custom tag will do when it is used in a JSP page.\n- **TLD file**: Tag descriptor file where we will specify our tag name, tag handler class and tag attributes.\n- **JSP page**: A JSP page where we will be using our custom tag.\n\n`Tag Handler Class`\n\nWe can create a Tag Handler class in two different ways:\n\n- By implementing one of three interfaces : SimpleTag, Tag or BodyTag, which define methods that are invoked during the life cycle of the tag.\n- By extending an abstract base class that implements the SimpleTag, Tag, or BodyTag interfaces. The SimpleTagSupport, TagSupport, and BodyTagSupport classes implement the      SimpleTag, Tag andBodyTag interfaces . Extending these classes relieves the tag handler class from having to implement all methods in the interfaces and also provides other convenient functionality.\n\n`Tag Library Descriptor`\n\nA Tag Library Descriptor is an XML document that contains information about a library as a whole and about each tag contained in the library. TLDs are used by the web container to validate the tags and also by JSP page development tools.\n\nTag library descriptor file must have the extension .tld and must be packaged in the /WEB-INF/ directory or subdirectory of the WAR file or in the /META-INF/ directory or subdirectory of a tag library packaged in a JAR.\n\n`Example of Custom Tag`\n\nIn our example, we will be creating a Tag Handler class that extends the TagSupport class. When we extend this class, we have to override the method doStartTag(). There are two other methods of this class namely doEndTag() and release(), that we can decide to override or not depending on our requirement.\n\n`CountMatches.java`\n\n```jsx\npackage com.praveen.taghandler;\n\nimport java.io.IOException;\nimport javax.servlet.jsp.*;\nimport org.apache.commons.lang.StringUtils;\n\npublic class CountMatches extends TagSupport {\nprivate String inputstring;\nprivate String lookupstring;\n\npublic String getInputstring() {\nreturn inputstring;\n}\n\npublic void setInputstring(String inputstring) {\nthis.inputstring = inputstring;\n}\npublic String getLookupstring() {\nreturn lookupstring;\n}\n\npublic void setLookupstring(String lookupstring) {\nthis.lookupstring = lookupstring;\n}\n\n@Override\npublic int doStartTag() throws JspException {\ntry {\nJspWriter out = pageContext.getOut(); out.println(StringUtils.countMatches(inputstring, lookupstring));\n} catch (IOException e) { e.printStackTrace();\n}\nreturn SKIP_BODY;\n}\n}\n\n```\n\nIn the above code, we have an implementation of the doStartTag() method which  is  must  if  we  are  extending TagSupport class. We have declared two variables inputstring and lookupstring. These variables represents the attributes of the custom tag. We must provide getter and setter for these variables in order to set the values into these variables that will be provided at the time of using this custom tag. We can also specify whether these attributes are required or not.\n\n\n`MyTags.tld`\n\n```jsx\n<?xml version="1.0" encoding="UTF-8"?>\n<taglib>\n<tlibversion>1.0</tlibversion>\n<jspversion>1.1</jspversion>\n<shortname>cntmtchs</shortname>\n<info>Sample taglib for Substr operation</info>\n<uri>https://praveenoruganti.github.io/jsp/taglib/countmatches</uri>\n\n<tag>\n<name>countmatches</name>\n<tagclass>com.praveen.taghandler.CountMatches</tagclass>\n<info>String Utility</info>\n<attribute>\n<name>inputstring</name>\n<required>true</required>\n</attribute>\n<attribute>\n<name>lookupstring</name>\n<required>true</required>\n</attribute>\n</tag>\n</taglib>\n```\nThe taglib element specifies the schema, required JSP version and the tags within this tag library. Each tag element within the TLD represents an individual custom tag that exist in the library. Each of these tag should have a tag handler class associated with them.\n\nThe uri element represents a Uniform Resource Identifier that uniquely identifies the tag library.\n\nThe two attribute elements within the tag element represents that the tag has two attributes and the true value provided to the required element represents that both of these attributes are required for the tag to function properly.\n\n\n`index.jsp`\n\n```jsx\n<%@taglib prefix="mytag" uri="/WEB-INF/CountMatchesDescriptor.tld"%>\n<body>\n<h3>Custom Tag Example</h3>\n<mytag:countmatches inputstring="praveenorugantitech" lookupstring="o" />\n</body>\n\n</html>\n```\n\n\n\n\n\n\n\n\n '}}]);