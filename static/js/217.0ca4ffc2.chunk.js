(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[217],{786:function(n,e,t){"use strict";t.r(e),e.default=' If two classes are dependent on each other, then creating object will be very difficult. In this case spring provides best solution.\n\nFirst it creates objects using default constructor then it performs injections.\n\nFor Example,\n\nConsider Employee and Address are the two classes which are having dependency on each other.\n\n```jsx\n\npublic class Employee {\n private Address addr;\n\n public Employee() {\n  super();\n  System.out.println("In Employee Default Constructor");\n }\n\n public Address getAddr() {\n  return addr;\n }\n\n public void setAddr(Address addr) {\n  this.addr = addr;\n  System.out.println("In Employee class , Address setter");\n }\n}\n\n```\n\n```jsx\npublic class Address {\n private Employee emp;\n\n public Address() {\n  super();\n  System.out.println("In Address Default Constructor");\n }\n\n public Employee getEmp() {\n  return emp;\n }\n\n public void setEmp(Employee emp) {\n  this.emp = emp;\n  System.out.println("In Address class , Employee setter");\n }\n\n}\n\n```\n\n**beans.xml**\n\n```jsx\n<beans>\n  <bean\n    class="com.praveen.core.di.circular.bean.Employee"\n    name="empObjCircular"\n  >\n    <property name="addr">\n      <ref bean="addrObjCircular" />\n    </property>\n  </bean>\n  <bean\n    class="com.praveen.core.di.circular.bean.Address"\n    name="addrObjCircular"\n  >\n    <property name="emp">\n      <ref bean="empObjCircular" />\n    </property>\n  </bean>\n</beans>\n```\n\n```jsx\n\npublic class EmployeeTest {\n private static ApplicationContext context;\n\n public static void main(String[] args) throws Exception{\n\n  context = new ClassPathXmlApplicationContext("beans.xml");\n  Employee cons = context.getBean("empObjCircular", Employee.class);\n  System.out.println(cons);\n }\n\n}\n\n```\n\n**Output**\n\n```jsx\n\nSep 08, 2019 1:21:51 AM org.springframework.context.support.AbstractApplicationContext prepareRefresh\nINFO: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@14514713: startup date [Sun Sep 08 01:21:51 IST 2019]; root of context hierarchy\n\nSep 08, 2019 1:21:51 AM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions\nINFO: Loading XML bean definitions from class path resource [beans.xml]\n\nin Param\n\nIn Employee Default Constructor\n\nIn Address Default Constructor\n\nIn Address class , Employee setter\n\nIn Employee class , Address setter\n\ncom.praveen.core.di.circular.bean.Employee@13acb0d1\n\n```\n\n**Lets discuss Circular dependencies using Annotations**\n\nCircular dependencies is the scenario when two or more beans try to inject each other via constructor.\n\nIt\u2019s not possible to write a compilable code which can initialize exactly one instance of each A and B and pass to each other\u2019s constructor. We can, however, refactor our above code and can pass circular references via setters but that would kill the semantics of \u2018initializing mandatory final fields via constructors.\n\nThe same problem Spring faces when it has to inject the circular dependencies via constructor. Spring throws BeanCurrentlyInCreationException in that situation.\n\nFor Example,\n\n```jsx\n\n@ComponentScan(basePackageClasses = CircularDependencyExample.class, useDefaultFilters = false,\n//scan only the nested beans of this class\nincludeFilters = {@ComponentScan.Filter(\n        type = FilterType.ASSIGNABLE_TYPE,\n        value = {CircularDependencyExample.BeanB.class, CircularDependencyExample.BeanA.class})})\n@Configuration\npublic class CircularDependencyExample {\n\nprivate static ApplicationContext context;\n\npublic static void main(String[] args) {\ncontext = new AnnotationConfigApplicationContext(CircularDependencyExample.class);\n}\n\n@Component\npublic static class BeanA {\nprivate final BeanB beanB;\npublic BeanA(BeanB b) {\n    this.beanB = b;\n}\n}\n\n@Component\npublic static class BeanB {\nprivate final BeanA beanA;\npublic BeanB(BeanA beanA) {\n    this.beanA = beanA;\n}\n}\n}\n\n\n```\n\n**Output**\n\n```jsx\n\nSep 08, 2019 1:50:37 AM org.springframework.context.support.AbstractApplicationContext prepareRefresh\nINFO: Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@5cb0d902: startup date [Sun Sep 08 01:50:37 IST 2019]; root of context hierarchy\n\nSep 08, 2019 1:50:38 AM org.springframework.context.support.AbstractApplicationContext refresh\nWARNING: Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException:\n\n```\n\n**Fixing circular dependencies by using setter injection**\n\n```jsx\n@ComponentScan(basePackageClasses = CircularDependencyExampleUsingSetter.class, useDefaultFilters = false,\nincludeFilters = {@ComponentScan.Filter(\n        type = FilterType.ASSIGNABLE_TYPE,\n        value = {CircularDependencyExampleUsingSetter.BeanB.class, CircularDependencyExampleUsingSetter.BeanA.class})})\n@Configuration\npublic class CircularDependencyExampleUsingSetter {\n\npublic static void main(String[] args) {\nApplicationContext context =\n        new AnnotationConfigApplicationContext(\n          CircularDependencyExampleUsingSetter.class);\nBeanA beanA = context.getBean(BeanA.class);\nbeanA.doSomething();\n}\n\n@Component\nstatic class BeanA {\nprivate BeanB beanB;\npublic BeanA() {\n}\n\npublic void setB(BeanB b) {\n    this.beanB = b;\n}\n\npublic void doSomething() {\n    System.out.println("doing something");\n}\n}\n\n@Component\nstatic class BeanB {\nprivate BeanA beanA;\npublic BeanB() {\n}\n\npublic void setBeanA(BeanA beanA) {\n    this.beanA = beanA;\n}\n}\n\n}\n```\n\n**Output**\n\n```jsx\n\nSep 08, 2019 1:52:04 AM org.springframework.context.support.AbstractApplicationContext prepareRefresh\nINFO: Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@5cb0d902: startup date [Sun Sep 08 01:52:04 IST 2019]; root of context hierarchy\n\ndoing something\n\n```\n\n**Fixing circular dependencies by using @Lazy at constructor injection point**\n\n```jsx\n@ComponentScan(basePackageClasses = CircularDependencyExampleUsingLazy.class, useDefaultFilters = false,\nincludeFilters = {@ComponentScan.Filter(\n        type = FilterType.ASSIGNABLE_TYPE,\n        value = {CircularDependencyExampleUsingLazy.BeanB.class, CircularDependencyExampleUsingLazy.BeanA.class})})\n@Configuration\npublic class CircularDependencyExampleUsingLazy {\n\npublic static void main(String[] args) {\nApplicationContext context =\n        new AnnotationConfigApplicationContext(\n          CircularDependencyExampleUsingLazy.class);\nBeanA beanA = context.getBean(BeanA.class);\nbeanA.doSomething();\n}\n\n@Component\nstatic class BeanA {\nprivate final BeanB beanB;\nBeanA(@Lazy BeanB b) {\n    this.beanB = b;\n}\n\npublic void doSomething() {\n    beanB.doSomething();\n}\n}\n\n@Component\nstatic class BeanB {\nprivate final BeanA beanA;\nBeanB(BeanA beanA) {\n    this.beanA = beanA;\n}\n\npublic void doSomething() {\n    System.out.println("doing something");\n}\n}\n}\n```\n\n**Output**\n\n```jsx\n\nSep 08, 2019 1:52:53 AM org.springframework.context.support.AbstractApplicationContext prepareRefresh\nINFO: Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@5cb0d902: startup date [Sun Sep 08 01:52:52 IST 2019]; root of context hierarchy\n\ndoing something\n\n```\n\n '}}]);