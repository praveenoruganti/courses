(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[250],{819:function(e,n,t){"use strict";t.r(n),n.default=" **JOIN**\n\nAn SQL Join statement is used to combine data or rows from two or more tables based on a common field between them. \n\nDifferent types of Joins are:\n\n**INNER JOIN**\n\nThe INNER JOIN keyword selects all rows from both the tables as long as the condition satisfies. This keyword will create the result-set by combining all rows from both the tables where the condition satisfies i.e value of the common field will be same.\n\n```jsx\nSELECT tblperson.name,tblperson.email,tblperson.city,tblgender.gender \nFROM tblperson \nINNER JOIN tblgender \nON tblperson.genderid=tblgender.id;\n```\n\nFor example, consider the following two tables.\n\nStudent Table\n\nEnrollNo StudentName Address\n\n1000 geek1 geeksquiz1\n\n1001 geek2 geeksquiz2\n\n1002 geek3 geeksquiz3\n\nStudentCourse Table\n\nCourseID EnrollNo\n\n1 1000\n\n2 1000\n\n3 1000\n\n1 1002\n\n2 1003\n\nFollowing is join query that shows names of students enrolled in different courseIDs.\n\n```jsx\nSELECT StudentCourse.CourseID, Student.StudentName\nFROM StudentCourse\nINNER JOIN Customers\nON StudentCourse.EnrollNo = Student.EnrollNo\nORDER BY StudentCourse.CourseID;\n```\nThe above query would produce following result.\n\nCourseID StudentName\n\n1 geek1\n\n1 geek2\n\n2 geek1\n\n2 geek3\n\n3 geek1\n\n**LEFT JOIN**\n\nThis join returns all the rows of the table on the left side of the join and matching rows for the table on the right side of join. The rows for which there is no matching row on right side, the result-set will contain null. LEFT JOIN is also known as LEFT OUTER JOIN\n\n```jsx\nSELECT tblperson.name,tblperson.email,tblperson.city,tblgender.gender \nFROM tblperson \nLEFT JOIN tblgender \nON tblperson.genderid=tblgender.id;\n```\n\n**RIGHT JOIN**\n\nRIGHT JOIN is similar to LEFT JOIN. This join returns all the rows of the table on the right side of the join and matching rows for the table on the left side of join. The rows for which there is no matching row on left side, the result-set will contain null. RIGHT JOIN is also known as RIGHT OUTER JOIN.\n\n```jsx\nSELECT tblperson.name,tblperson.email,tblperson.city,tblgender.gender \nFROM tblperson \nRIGHT JOIN tblgender \nON tblperson.genderid=tblgender.id;\n```\n\n**FULL JOIN**\n\nFULL JOIN creates the result-set by combining result of both LEFT JOIN and RIGHT JOIN. The result-set will contain all the rows from both the tables. The rows for which there is no matching, the result-set will contain NULL values.\n\n```jsx\nSELECT tblperson.name,tblperson.email,tblperson.city,tblgender.gender \nFROM tblperson \nFULL JOIN tblgender \nON tblperson.genderid=tblgender.id;\n```\n\n**CROSS JOIN**\n\nCross join produces a result set which is the number of rows in the first table multiplied by a number of rows in the second table if no WHERE clause is used along with Cross join. This kind of result is known as Cartesian Product. If suppose, Where clause is used in cross join then the query will work like an Inner join.\n\n```jsx\nSELECT tblperson.name,tblperson.email,tblperson.city,tblgender.gender \nFROM tblperson \nCROSS JOIN tblgender\n```\n\n**What is the difference between INNER JOIN and RIGHT JOIN?**\n\nINNER JOIN returns only the matching rows between the tables involved in the JOIN, where as RIGHT JOIN returns all the rows from the right table including the NON-MATCHING rows.\n\n**What is the difference between INNER JOIN and FULL JOIN?**\n\nFULL JOIN returns all the rows from both the left and right tables including the NON-MATCHING rows.\n\n**What is the Difference between INNER JOIN and JOIN?**\n\nThere is no difference they are exactly the same. Similarly there is also no difference between \n\nLEFT JOIN and LEFT OUTER JOIN\n\nRIGHT JOIN and RIGHT OUTER JOIN\n\nFULL JOIN and FULL OUTER JOIN\n\n**Retrieve only the non matching rows from the left table**\n\n```jsx\n\nselect tblperson.name,tblperson.email,tblperson.city,tblgender.gender \nfrom tblperson \nleft Join tblgender \non tblperson.genderid=tblgender.id\nwhere tblgender.id is null\n\n```\n\n**Retrieve only the non matching rows from the right table**\n\n```jsx\nselect tblperson.name,tblperson.email,tblperson.city,tblgender.gender \nfrom tblperson \nright Join tblgender \non tblperson.genderid=tblgender.id \nwhere tblperson.genderid is null\n```\n**Retrieve only the non matching rows from both the left and right table**\n\n```jsx\nselect tblperson.name,tblperson.email,tblperson.city,tblgender.gender \nfrom tblperson \nfull outer Join tblgender \non tblperson.genderid=tblgender.id \nwhere tblgender.id is null or tblperson.genderid is null\n```\n\n**SELF JOIN**\n\nA MANAGER is also an EMPLOYEE. Both the, EMPLOYEE and MANAGER rows, are present in the same table. Here we are joining tblEmployee with itself using different alias names, E for Employee and M for Manager. We are using LEFT JOIN, to get the rows with ManagerId NULL. You can see in the output TODD's record is also retrieved, but the MANAGER is NULL. \nIf you replace LEFT JOIN with INNER JOIN, you will not get TODD's record.\n\n```jsx\nSELECT E.Name as Employee, M.Name as Manager\nFROM Employee E\nLEFT JOIN Employee M\nON E.id = M.mid\n```\n\nIn short, joining a table with itself is called as SELF JOIN. SELF JOIN is not a different type of JOIN. It can be classified under any type of JOIN - INNER, OUTER or CROSS Joins. The above query is, LEFT OUTER SELF Join.\n\n**Inner Self Join Employee table**\n\n```jsx\nSELECT E.Name as Employee, M.Name as Manager\nFROM Employee E\nINNER JOIN Employee M\nON E.id = M.mid\n```\n\n**Cross Self Join Employee table**\n\n```jsx\nSELECT E.Name as Employee, M.Name as Manager\nFROM Employee E\nCROSS JOIN Employee M\n```\n**Replacing NULL value using CASE Statement**\n\n```jsx\nSELECT E.Name as Employee, CASE WHEN M.Name IS NULL THEN 'No Manager' \n   ELSE M.Name END as Manager\nFROM  Employee E\nLEFT JOIN Employee M\nON   E.mid = M.id\n```\n\n**Replacing NULL value using COALESCE() function: COALESCE() function, returns the first NON NULL value.**\n\n```jsx\nSELECT E.Name as Employee, COALESCE(M.Name, 'No Manager') as Manager\nFROM Employee E\nLEFT JOIN Employee M\nON E.mid = M.id\n```\n\n**What does UNION do? What is the difference between UNION and UNION ALL?**\n\nUNION merges the contents of two structurally-compatible tables into a single combined table. The difference between UNION and UNION ALL is that UNION will omit duplicate records whereas UNION ALL will include duplicate records.\n\nIt is important to note that the performance of UNION ALL will typically be better than UNION, since UNION requires the server to do the additional work of removing any duplicates. So, in cases where is is certain that there will not be any duplicates, or where having duplicates is not a problem, use of UNION ALL would be recommended for performance reasons.\n```jsx\nSelect Id, Name, Email from tblIndiaCustomers\nUNION ALL\nSelect Id, Name, Email from tblUKCustomers\n```\nFor this reason, UNION ALL is much faster than UNION. \n\nNote: For UNION and UNION ALL to work, the Number, Data types, and the order of the columns in the select statements should be same.\n\n**Difference between JOIN and UNION**\n\nJOINS and UNIONS are different things. However, this question is being asked very frequently now. \n\nUNION combines the result-set of two or more select queries into a single result-set which includes all the rows from all the queries in the union, \n\nwhere as JOINS, retrieve data from two or more tables based on logical relationships between the tables. \n\nIn short, UNION combines rows from 2 or more tables, where JOINS combine columns from 2 or more table. "}}]);