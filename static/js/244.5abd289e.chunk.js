(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[244],{813:function(t,e,n){"use strict";n.r(e),e.default=' Actuator in general is used to monitor and manage your SpringBoot application by providing production-ready features like health check-up, auditing, metrics gathering, HTTP tracing etc. All of these features can be accessed over JMX or HTTP endpoints.\n\n**How to Enable SpringBoot Actuator ?**\n\nIts very simple, just you need to add below dependencies in pom.xml\n\n```jsx\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-actuator</artifactId>\n</dependency>\n```\n\nLets see different endpoints available in SpringBoot Actuator.\n\n1. **/health**\n\nLet\u2019s explore the health endpoint by opening the [http://localhost:8080/actuator/health](http://localhost:8080/actuator/health).\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/springboot/health1.png)\n\nThe status will be UP as long as the application is healthy. It will show DOWN if the application gets unhealthy due to any issue like connectivity with the database or lack of disk space etc.\n\nIf we need to display the detailed health information then we need to configure below in application.yml.\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/springboot/health.png)\n\nLets open the health endpoint [http://localhost:8080/actuator/health](http://localhost:8080/actuator/health) and see what comes up after inclusion of the above property.\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/springboot/health2.png)\n\nBy default only health and info endpoints will be enabled over HTTP.\n\nIf you want to enable all endpoints then you need to configure below in application.yml.\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/springboot/health3.png)\n\nLets open the actuator endpoint [http://localhost:8080/actuator](http://localhost:8080/actuator).\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/springboot/health4.png)\n\n2. **/metrics**\n\nThe /metrics endpoint lists all the metrics that are available for you to track.\n\n[http://localhost:8080/actuator/metrics](http://localhost:8080/actuator/metrics)\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/springboot/metrics.png)\n\nTo get the details of an individual metric, you need to pass the metric name using /actuator/metrics/{MetricName}\n\nFor example, to get the details of system.cpu.usage metric using /actuator/metrics/system.cpu.usage.\n\nThis will display the details in JSON format as shown below.\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/springboot/metrics1.png)\n\n3. **/loggers**\n\nThe loggers endpoint, which can be accessed at [http://localhost:8080/actuator/loggers](http://localhost:8080/actuator/loggers).\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/springboot/loggers.png)\n\nYou can also view the details of an individual logger by passing the logger name using /actuator/loggers/ROOT\n\nYou can also change logger levels at runtime by making a POST request using /actuator/loggers/ROOT\n\n4. **/info**\n\nNow lets concentrate on /info endpoint.\n\nLet\'s configure below in application.yml.\n\n```jsx\ninfo: app: name: "@project.name@";\ndescription: "@project.description@";\nversion: "@project.version@";\njava: version: "@java.version@";\n```\n\nNow open [http://localhost:8080/actuator/info](http://localhost:8080/actuator/info) and you will see the required info as configured in yml file.\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/springboot/info1.png)\n\n5. **/beans**\n\n   The /beans endpoint shows all the beans registered in your application, including the beans you explicitly configured and the beans autoconfigured by Spring Boot.\n\n   Now open [http://localhost:8080/actuator/beans](http://localhost:8080/actuator/beans).\n\n   ![screenshot of the app](https://praveenoruganti.github.io/courses/images/springboot/beans.png)\n\n6. **/conditions, formerly known as /autoconfig**\n\n   The /conditions endpoint shows the autoconfiguration report, which is categorized into positiveMatches and negativeMatches.\n\n   Now open [http://localhost:8080/actuator/conditions](http://localhost:8080/actuator/conditions).\n\n   ![screenshot of the app](https://praveenoruganti.github.io/courses/images/springboot/autoconfig.png)\n\n7. **/mappings**\n\n   The /mappings endpoint shows all the @RequestMapping paths declared in the application. This is very helpful for checking which request path will be handled by which controller method.\n\n8. **/configprops**\n\n   The /configprops shows all the configuration properties defined by the @ConfigurationProperties beans,including your own configuration properties defined in the application.properties or YAML files.\n\n   Now open [http://localhost:8080/actuator/configprops](http://localhost:8080/actuator/configprops).\n\n9. **/env**\n\nThe /env endpoint will expose all the properties from the Spring\u2019s ConfigurableEnvironment interface, such as a list of active profiles, application properties, system environment variables, and so on.\n\n10. **/trace**\n\n    The /trace endpoint shows the tracing information of the last few HTTP requests, which is very helpful for debugging the request/response details, like headers, cookies, etc.\n\n11. **/threaddump**\n\n    You can view the thread dump of your application with the details of the running threads and the stack trace of the JVM.\n\n12. **/logfile**\n\n    If you enabled file-based logging by setting logging.file or logging.path or using the native file configuration files (logback.xml, log4j.properties, etc.), you can use the /logfile endpoint to view the log file content.\n\n13. **/shutdown**\n\n    The /shutdown endpoint can be used to gracefully shut down the application, which is not enabled by default. You can enable this endpoint by adding the following property to application.properties\n\n    management.endpoint.shutdown.enabled=true\n\n    After adding this property, you can send the HTTP POST method to [http://localhost:8080/actuator/shutdown](http://localhost:8080/actuator/shutdown) to invoke the /shutdown endpoint.\n\n    ![screenshot of the app](https://praveenoruganti.github.io/courses/images/springboot/shutdown.png)\n\n    **Note** Be careful about enabling /shutting down an endpoint. Enable or shut down an endpoint only when it is absolutely required and be sure to protect the endpoint with the appropriate security configuration\n '}}]);