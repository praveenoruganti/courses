(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[257],{826:function(e,t,s){"use strict";s.r(t),t.default=" **System** is the architecture or collection of technologies that interact with each other inorder to serve set of users to fulfill set of requirements.\n\n**System Design** is the process of designing the elements of a system such as the architecture, modules and components, the different interfaces of those components and the data that goes through that system.\n\n**System Analysis** is the process that decomposes a system into its component pieces for the purpose of defining how well those components interact to accomplish the set requirements.\n\n**Elements of a System**\n\n- Architecture - This is the conceptual model that defines the structure, behavior and more views of a system. We can use flowcharts to represent and illustrate the architecture.\n- Modules - This are components that handle one specific tasks in a system. A combination of the modules make up the system.\n- Components - This provides a particular function or group of related functions. They are made up of modules.\n- Interfaces - This is the shared boundary across which the components of a the system exchange information and relate.\n- Data - This the management of the information and data flow.\n\n**Design methods**\n\n- Architectural design: To describes the views, models, behaviour, and structure of the system.\n\n- Logical design: To represent the data flow, inputs and outputs of the system. Example: ER Diagrams (Entity Relationship Diagrams).\n\n- Physical design: Defined as a) How users add information to the system and how the system represents information back to the user. b) How the data is modelled and stored within the system. c) How data moves through the system, how data is validated, secured and/or transformed as it flows through and out of the system.\n\nLets see each component in detail in upcoming lesson.\n\n**Thumb rule for any System Design Problem**\n\n**Requirement Clarification**\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/systemdesign/requirement_clarification.PNG)\n\n**Non Functional Requirements**\n\n- Scalable( tens of thousands of videos per second)\n- Highly Performant(few ten of milliseconds to return total views count for a video)\n- Highly Available(survives hardware/network failures, no single point of failure)\n- Consistency\n- Cost(hardware, development, maintenance)\n\n**Distributed Systems and Its 3 principles**\n\nAny system which includes multiple components residing on multiple machines coordinating through some sort of mechanism like sending messages to achieve a common goal is a distributed system.\n\n1. Single responsibility principle\n2. No single point of failure principle\n3. No bottle-neck principle\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/systemdesign/distributed_system.PNG) "}}]);