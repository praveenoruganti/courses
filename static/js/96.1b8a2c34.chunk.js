(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[96],{665:function(n,e,t){"use strict";t.r(e),e.default=' Immutable class means once an object is created, we cannot change it\'s content i.e.. State doesn\'t change.\n\n- It is a thread safe\n- can be cached.\n\nIn Java all the wrapper classes(like Boolean, Byte, Short etc) and String class is immutable.\n\nImmutable class can be created by using below\n\n- class must be declared as final(so that child classes can\'t be created).\n- data members in the class must be declared as final(so that we can\'t change the value of it after object creation).\n- Initialize all the data members using public parameterized constructor.\n- getter methods for all variables in it.\n- no setters(to not have an option to change the value of instance variable).\n- make all fields private so that direct access is not allowed.\n- return copy of mutable instance variable rather than returning original object.\n\nLet\'s see sample code which is having only immutable members.\n\n```jsx\n\npublic final class Employee{\n    private final String name;\n    private final int empId;\n    public Employee(String name, int empId) {\n        this.name=name;\n        this.empId=empId;\n    }\n    public String getName() {\n            return name;\n    }\n    public int getEmpId() {\n            return empId;\n    }\n}\n\n```\n\nLet\'s see sample code which is having both immutable and mutable data members.\n\n```jsx\npublic final class CustomImmutable {\n    private final String sName;\n    private final StringBuffer sbName;\n    public CustomImmutable(String sName, StringBuffer sbName) {\n        this.sName = sName;\n        this.sbName = sbName;\n    }\n    public String getSName() {\n        return sName;\n    }\n    public StringBuffer getsbName() { // return copy of mutable instance variable rather than returning original object.\n        return new StringBuffer(sbName.toString());\n    }\n}\n```\n\nLet\'s see sample code\n\n```jsx\n// Immutable class is nothing but content or state will not be changed\npublic final class EmployeeImmutableClass {\n\n    private final String empName;\n    private final long empID;\n    private final long empSalary;\n    private final Address address;\n\n    public EmployeeImmutableClass(String empName, long empID, long empSalary,Address address) {\n    this.empName = empName;\n    this.empID = empID;\n    this.empSalary = empSalary;\n    this.address=address;\n    }\n\n    public String getEmpName() {\n    return empName;\n    }\n\n    public long getEmpID() {\n    return empID;\n    }\n\n    public long getEmpSalary() {\n    return empSalary;\n    }\n\n    public Address getAddress() throws CloneNotSupportedException {\n    return (Address) address.clone();\n    }\n\n    public static void main(String[] args) throws CloneNotSupportedException {\n    EmployeeImmutableClass eic= new EmployeeImmutableClass("Praveen",149903L,1000000L,new Address(10001L,"Rangareddy","Hyderabad"));\n    Address address=eic.getAddress();\n    System.out.println(address); // Address [id=10001, desc=Rangareddy, location=Hyderabad]\n    address.setLocation("Tirupati");\n    address.setDesc("Railway Colony");\n    System.out.println(eic.getAddress()); // Address [id=10001, desc=Rangareddy, location=Hyderabad]\n    }\n\n}\n\n```\n\n```jsx\n// This is an mutable class\npublic class Address  implements Cloneable{\n\n    Long id;\n    String desc;\n    String location;\n    public Address(Long id, String desc, String location) {\n    super();\n    this.id = id;\n    this.desc = desc;\n    this.location = location;\n    }\n    public void setId(Long id) {\n    this.id = id;\n    }\n    public void setDesc(String desc) {\n    this.desc = desc;\n    }\n    public void setLocation(String location) {\n    this.location = location;\n    }\n    public Long getId() {\n    return id;\n    }\n    public String getDesc() {\n    return desc;\n    }\n    public String getLocation() {\n    return location;\n    }\n    @Override\n    public String toString() {\n    return "Address [id=" + id + ", desc=" + desc + ", location=" + location + "]";\n    }\n\n    public Object clone()throws CloneNotSupportedException{\n    return super.clone();\n        }\n\n}\n\n\n```\n\n '}}]);