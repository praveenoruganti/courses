(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[264],{833:function(e,a,s){"use strict";s.r(a),a.default=" Scalability is the capability of a system, process, or a network to grow and manage increased demand. Any distributed system that can continuously evolve in order to support the growing amount of work is considered to be scalable.\n\nA system may have to scale because of many reasons like increased data volume or increased amount of work, e.g., number of transactions. A scalable system would like to achieve this scaling without performance loss.\n\nGenerally, the performance of a system, although designed (or claimed) to be scalable, declines with the system size due to the management or environment cost. For instance, network speed may become slower because machines tend to be far apart from one another. More generally, some tasks may not be distributed, either because of their inherent atomic nature or because of some flaw in the system design. At some point, such tasks would limit the speed-up obtained by distribution. A scalable architecture avoids this situation and attempts to balance the load on all the participating nodes evenly.\n\nScaling of any system can be achieved by two ways.\n\n- **Vertical Scaling**\n\n    Vertical scaling, referred to as `scale up`, means the process of adding more power (CPU, RAM, etc.) to your servers.\n\n    When traffic is low, vertical scaling is a great option, and the simplicity of vertical scaling is its main advantage. \n\n    However, vertical scaling comes with some serious drawbacks:\n\n    1. You can add more CPU, RAM, etc. to your database server, but there are hardware limits. If you have a large user base, a single server is not enough.\n\n    2. Greater risk of single point of failures.\n\n    3. The overall cost of vertical scaling is high. Powerful servers are much more expensive.\n\n- **Horizontal Scaling**\n\n    Horizontal scaling, referred to as `scale-out`, allows you to scale by adding more servers into your pool of resources.\n\n    Horizontal scaling is more desirable for large scale applications due to the limitations of vertical scaling.\n\n\n**Differences between Horizontal and Vertical Scaling**\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/systemdesign/scaling.PNG)\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/systemdesign/hvsv.jpg)\n\nGood examples of horizontal scaling are Cassandra and MongoDB as they both provide an easy way to scale horizontally by adding more machines to meet growing needs. Similarly, a good example of vertical scaling is MySQL as it allows for an easy way to scale vertically by switching from smaller to bigger machines. However, this process often involves downtime.\n "}}]);