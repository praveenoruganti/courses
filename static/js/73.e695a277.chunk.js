(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[73],{642:function(t,n,e){"use strict";e.r(n),n.default=' Stack is a linear data strucure and follows LIFO. Stack has one end where as Queue has two ends. It contains only one pointer **top pointer** pointing to the top most element of the Stack.\n\nA Stack can be defined as a container in which the insertion and deletion can be done from the one end known as top of the stack.\n\n**Properties of Stack**\n\nFollows LIFO(Last In First Out) method.\n\nThe LIFO order says that the element which is inserted at the last in the Stack will be the first one to be removed. In LIFO order, the insertion takes place at the rear end of the stack and deletion occurs at the rear of the stack.\n\n**Why do we use stacks?**\n\nStacks follows LIFO method and addition and retrieval of a data item takes only \u039fn time. Stacks are used where we need to access data in the reverse order or their arrival. Stacks are used commonly in recursive function calls, expression parsing, depth first traversal of graphs etc.\n\n**Common Operations in Stack**\n\n- **Push**: Add an element to the top of a stack; O(1)\n- **Pop**: Remove an element from the top of a stack; O(1)\n- **IsEmpty**: Check if the stack is empty\n- **IsFull**: Check if the stack is full\n- **Peek**: Get the value of the top element without removing it; O(1)\n- **Searching for an element in the Stack**: O(n)\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/dsa/stack.jpg)\n\nA Stack is typically implemented with a dynamic array (or) with a singly linked list.\n\n\n**How to understand a stack practically?** \n\nThere are many real-life examples of a stack. Consider the simple example of plates stacked over one another in a canteen. The plate that is at the top is the first one to be removed, i.e. the plate that has been placed at the bottommost position remains in the stack for the longest period of time. So, it can be simply seen to follow LIFO/FILO order. \n\n**Time Complexities of operations on stack**\n\nThe operations push(), pop(), isEmpty() and peek() all take O(1) time. We do not run any loop in any of these operations.\n\n\n**Implementation** \n\nThere are two ways to implement a stack.\n\n- **Using Arrays**\n\n```jsx\npackage com.praveen.stack.array;\n\npublic class StackByArray {\n\n\tint[] arr;\n\tint topOfStack;// keeps track of the cell which is last occupied in Array, this will help in\n\t\t\t\t\t// insertion/deletion\n\n\tpublic StackByArray(int size) {\n\t\tthis.arr = new int[size];\n\t\tthis.topOfStack = -1;\n\t\tSystem.out.println("Successfully created an empty Stack of Size: " + size);\n\t}\n\n\tpublic void push(int value) {\n\t\t// if array is full, show stack overflow error\n\t\tif (isFullStack()) {\n\t\t\tSystem.out.println("Stack overflow error!!");\n\t\t} else {\n\t\t\tarr[topOfStack + 1] = value;\n\t\t\ttopOfStack++;\n\t\t\tSystem.out.println("Successfully inserted " + value + " in the stack");\n\t\t}\n\t}\n\n\tpublic void pop() {\n\t\t// if array is empty, show stack underflow error\n\t\tif (isEmptyStack()) {\n\t\t\tSystem.out.println("Stack underflow error!!");\n\t\t} else {\n\t\t\tSystem.out.println("Poping value from Stack: " + arr[topOfStack] + "...");\n\t\t\ttopOfStack--;\n\t\t}\n\t}\n\n\tpublic boolean isEmptyStack() {\n\t\t// if top pointer is zero, the stack is empty\n\t\tif (topOfStack == -1)\n\t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t}\n\n\tpublic boolean isFullStack() {\n\t\tif (topOfStack == arr.length - 1) {\n\t\t\tSystem.out.println("Stack is full !");\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic void peekOperation() {\n\t\tif (!isEmptyStack())\n\t\t\tSystem.out.println("Top of Stack: " + arr[topOfStack]);\n\t\telse {\n\t\t\tSystem.out.println("The stack is empty!!");\n\t\t}\n\t\tSystem.out.println();\n\t\tSystem.out.println();\n\t}\n\n\tpublic void deleteStack() {\n\t\tarr = null;\n\t\tSystem.out.println("Stack is successfully deleted");\n\t}\n\n}\n\n\n```\n\n**Pros**: Easy to implement. Memory is saved as pointers are not involved.\n\n**Cons**: Fixed Size. It is not dynamic. It doesn\u2019t grow or shrink depending on needs at runtime.\n\n- **Using Linked List**\n\n```jsx\npackage com.praveen.stack.linkedlist;\n\nimport com.praveen.linkedlist.SingleLinkedList;\n\npublic class StackByLinkedList {\n\n\tSingleLinkedList list;\n\n\t// constructor\n\tpublic StackByLinkedList() {\n\t\tlist = new SingleLinkedList();\n\t}\n\n\tpublic void push(int value) {\n\t\tif (list.getHead() == null) {\n\t\t\tlist.createSingleLinkedList(value);\n\t\t} else {\n\t\t\tlist.insertInLinkedList(value, 0);\n\t\t}\n\t\tSystem.out.println("Inserted " + value + " in Stack !");\n\t}\n\n\tpublic int pop() {\n\t\tint value = -1;\n\t\tif (isEmpty()) {\n\t\t\tSystem.out.println("Stack underflow error!!");\n\t\t} else {\n\t\t\tvalue = list.getHead().getValue();\n\t\t\tlist.deletionOfNode(0);\n\t\t}\n\t\treturn value;\n\t}\n\n\tpublic boolean isEmpty() {\n\t\tif (list.getHead() == null)\n\t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t}\n\n\tpublic int peek() {\n\t\tif (!isEmpty())\n\t\t\treturn list.getHead().getValue();\n\t\telse {\n\t\t\tSystem.out.println("The stack is empty!!");\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\tpublic void deleteStack() {\n\t\tlist.setHead(null);\n\t}\n\n}\n\n\n```\n\n   \n**Pros**: The linked list implementation of stack can either grow or shrink according to the needs at runtime.\n\n**Cons**: Requires extra memory due to involvement of pointers.\n\n**When to Use/Avoid Stack?**\n\n**When to Use**\n- Helps manage data in particular way(LIFO)\n- Cannot be easily corrupted(No one can insert data in middle)\n\n**When to Avoid**\n- Random Access not possible(If we have done some mistake it is costly to rectify)\n\n\n**Applications of Stack**\n\n- Stacks can be used to check for the balancing of paranthesis in an expression. \n- Infix to Postfix/Prefix conversion. \n- Redo-undo features at many places such as editors, photoshop, etc. \n- Forward and backward feature in web browsers. And Many More...\n\n '}}]);