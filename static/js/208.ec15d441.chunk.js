(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[208],{777:function(e,n,a){"use strict";a.r(n),n.default=' Spring JDBC is designed on the top of JDBC API and used to simplify the operations of JDBC.\n\n**Spring JDBC Advantages**\n\n- Connection Management has been taken care by the Spring container.\n\n  Not required to create connection object and close connection object by programmer.\n\n- template based program reduces the coding lines.\n\n**Model Bean/Model Class/Model**\n\nA class Which represents a database table or UI Form to store data or to transfer data at application level. It is also known as DTO(Data Transfer Object).\n\n**JdbcTemplate org.springframework.jdbc.core package**\n\n- This is a class given from Spring API which holds an reference of DataSource(I).\n\n- The JdbcTemplate class executes SQL queries, update statements and stored procedure calls, performs iteration over ResultSets and extraction of returned parameter values.\n\n- Instances of the JdbcTemplate class are threadsafe once configured.\n\n**DataSource org.springframework.jdbc.datasource package**\n\nIt represent a connection object details, it is an interface given from javax.sql package.\n\n**DriverManagerDataSource**\n\nIt is an implementation class of DataSource(I). Which provides a connection object to perform the JDBC operations.\n\nThe org.springframework.jdbc.support package provides SQLException translation functionality and some utility classes.\n\n**Here with the Java configuration Spring JDBC example using hsqldb**\n\n**HSQL DB installation steps**\n\nFirst download hsql db from [https://sourceforge.net/projects/hsqldb/files/](https://sourceforge.net/projects/hsqldb/files/) and unzip it.\n\nGo to D:PraveenSoftwareshsqldb-2.5.0hsqldb and create db using below command\n\nD:PraveenSoftwareshsqldb-2.5.0hsqldb>java -classpath lib/hsqldb.jar org.hsqldb.server.Server \u2013database.0 file:hsqldb/praveendb \u2013dbname.0 testdb\n\nNow open hsql query tool using below command and configure the db created in above step(PFB screenshot for reference)\n\nD:PraveenSoftwareshsqldb-2.5.0hsqldb> java -classpath lib/hsqldb.jar org.hsqldb.util.DatabaseManager\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/spring/hsqldbconnectiondetails.png)\n\n**Create table in hsqldb**\n\n```jsx\nCREATE TABLE Employee(\nemployee_id INTEGER IDENTITY PRIMARY KEY,\nemployee_name varchar(20) ,\nemail varchar(25) ,\nsalary DOUBLE ,\ngender  varchar(20) ,\n);\n```\n\n**Now have the dependencies ready in pom.xml**\n\n```jsx\n<project\n  xmlns="http://maven.apache.org/POM/4.0.0"\n  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"\n>\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>PraveenSpringJDBCProject</groupId>\n  <artifactId>PraveenSpringJDBCProject</artifactId>\n  <version>0.0.1-SNAPSHOT</version>\n  <dependencies>\n    <dependency>\n      <groupId>commons-logging</groupId>\n      <artifactId>commons-logging</artifactId>\n      <version>1.2</version>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-beans</artifactId>\n      <version>5.0.4.RELEASE</version>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-jdbc</artifactId>\n      <version>5.0.4.RELEASE</version>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-core</artifactId>\n      <version>5.0.4.RELEASE</version>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-context</artifactId>\n      <version>5.0.4.RELEASE</version>\n    </dependency>\n    <dependency>\n      <groupId>org.hsqldb</groupId>\n      <artifactId>hsqldb</artifactId>\n      <version>2.5.0</version>\n      <scope>runtime</scope>\n    </dependency>\n  </dependencies>\n  <build>\n    <sourceDirectory>src</sourceDirectory>\n    <plugins>\n      <plugin>\n        <artifactId>maven-compiler-plugin</artifactId>\n        <version>3.8.0</version>\n        <configuration>\n          <source>1.8</source>\n          <target>1.8</target>\n        </configuration>\n      </plugin>\n    </plugins>\n  </build>\n</project>\n```\n\n**database.properies(place this file in src folder)**\n\n```jsx\ndb.driver=org.hsqldb.jdbc.JDBCDriver\ndb.url=jdbc:hsqldb:hsql://localhost/testdb\ndb.username=SA\ndb.password=\n```\n\n**Create Model class to replicate the employee table created in database**\n\n```jsx\npublic class Employee {\n\nprivate int employeeId;\nprivate String employeeName;\nprivate String email;\nprivate Double salary;\nprivate String gender;\npublic int getEmployeeId() {\nreturn employeeId;\n}\npublic void setEmployeeId(int employeeId) {\nthis.employeeId = employeeId;\n}\npublic String getEmployeeName() {\nreturn employeeName;\n}\npublic void setEmployeeName(String employeeName) {\nthis.employeeName = employeeName;\n}\npublic String getEmail() {\nreturn email;\n}\npublic void setEmail(String email) {\nthis.email = email;\n}\npublic Double getSalary() {\nreturn salary;\n}\npublic void setSalary(Double salary) {\nthis.salary = salary;\n}\npublic String getGender() {\nreturn gender;\n}\npublic void setGender(String gender) {\nthis.gender = gender;\n}\n}\n\n```\n\n**Now create Java configuration class to set the datasource properties by fetching from database.properties file**\n\n```jsx\n\n@Configuration\n@ComponentScan("com.praveen")\n@PropertySource("classpath:database.properties")\npublic class AppConfig {\n\n\n@Value("db.driver}")\n    private String DB_DRIVER;\n\n@Value("db.password}")\n    private String DB_PASSWORD;\n\n@Value("db.url}")\n    private String DB_URL;\n\n@Value("db.username}")\n    private String DB_USERNAME;\n\n@Bean\npublic DataSource datasource() {\nDriverManagerDataSource datasource = new DriverManagerDataSource();\ndatasource.setDriverClassName(DB_DRIVER);\ndatasource.setUrl(DB_URL);\ndatasource.setUsername(DB_USERNAME);\ndatasource.setPassword(DB_PASSWORD);\nreturn datasource;\n}\n\n}\n\n\n```\n\n**Now create dao class/interface ready**\n\n**EmployeeDAO**\n\n```jsx\npublic interface EmployeeDAO {\npublic abstract void createEmployee(Employee employee);\npublic abstract Employee getEmployeeById(int employeeId);\npublic abstract void deleteEmployeeById(int employeeId);\npublic abstract void updateEmployeeEmailById(String newEmail,int employeeId);\npublic abstract List<Employee> getAllEmployeesDetails();\n}\n\n\n```\n\n**EmployeeDAOImpl**\n\n```jsx\n@Repository\npublic class EmployeeDAOImpl implements EmployeeDAO {\nprivate JdbcTemplate jdbcTemplate;\n@Autowired\npublic EmployeeDAOImpl(DataSource datasource) {\njdbcTemplate = new JdbcTemplate(datasource);\n}\n@Override\npublic Employee getEmployeeById(int employeeId) {\nString SQL = "SELECT * FROM EMPLOYEE WHERE employee_id=?";\nEmployee employee = this.jdbcTemplate.queryForObject(SQL, new EmployeeRowMapper(), employeeId);\nreturn employee;\n}\n@Override\npublic void deleteEmployeeById(int employeeId) {\nString SQL = "DELETE FROM EMPLOYEE WHERE employee_Id=?";\nint update = this.jdbcTemplate.update(SQL, employeeId);\nif (update > 0)\nSystem.out.println("Employee is deleted..");\n}\n@Override\npublic void updateEmployeeEmailById(String newEmail, int employeeId) {\nString SQL = "UPDATE EMPLOYEE set email=? WHERE employee_Id=?";\nint update = this.jdbcTemplate.update(SQL, newEmail, employeeId);\nif (update > 0)\nSystem.out.println("Email is updated..");\n}\n@Override\npublic List<Employee> getAllEmployeesDetails() {\nString SQL = "SELECT * FROM EMPLOYEE";\nreturn this.jdbcTemplate.query(SQL, new EmployeeRowMapper());\n}\n@Override\npublic void createEmployee(Employee employee) {\nint update = this.jdbcTemplate.update(\n"INSERT INTO EMPLOYEE(employee_name,email,gender,salary) VALUES(?,?,?,?)",\nemployee.getEmployeeName(), employee.getEmail(), employee.getGender(), employee.getSalary());\nif (update > 0)\nSystem.out.println("Employee is created\u2026");\n}\n}\n```\n\n**EmployeeRowMapper**\n\n```jsx\npublic class EmployeeRowMapper implements RowMapper<Employee> {\n@Override\npublic Employee mapRow(ResultSet rs, int rowNum) throws SQLException {\nEmployee employee = new Employee();\nemployee.setEmail(rs.getString("email"));\nemployee.setEmployeeId(rs.getInt("employee_id"));\nemployee.setEmployeeName(rs.getString("employee_name"));\nemployee.setSalary(rs.getDouble("salary"));\nemployee.setGender(rs.getString("gender"));\nreturn employee;\n}\n}\n\n\n```\n\n**Now create service class/interface**\n\n**EmployeeService**\n\n```jsx\npublic interface EmployeeService {\npublic abstract void addEmployee(Employee employee);\npublic abstract Employee fetchEmployeeById(int employeeId);\npublic abstract void deleteEmployeeById(int employeeId);\npublic abstract void updateEmployeeEmailById(String newEmail,int employeeId);\npublic abstract List<Employee> getAllEmployeesInfo();\n}\n\n```\n\n**EmployeeServiceImpl**\n\n```jsx\n@Service("employeeService")\npublic class EmployeeServiceImpl implements EmployeeService {\n@Autowired\nprivate EmployeeDAO employeeDAO;\npublic void setEmployeeDAO(EmployeeDAO employeeDAO) {\nthis.employeeDAO = employeeDAO;\n}\n\n@Override\npublic void addEmployee(Employee employee) {\nemployeeDAO.createEmployee(employee);\n}\n\n@Override\npublic Employee fetchEmployeeById(int employeeId) {\nreturn employeeDAO.getEmployeeById(employeeId);\n}\n\n@Override\npublic void deleteEmployeeById(int employeeId) {\nemployeeDAO.deleteEmployeeById(employeeId);\n}\n\n@Override\npublic void updateEmployeeEmailById(String newEmail, int employeeId) {\nemployeeDAO.updateEmployeeEmailById(newEmail, employeeId);\n}\n\n@Override\npublic List<Employee> getAllEmployeesInfo() {\nreturn employeeDAO.getAllEmployeesDetails();\n}\n\n}\n\n```\n\n**Now create test class**\n\n**EmployeeTest**\n\n```jsx\n\npublic class EmployeeTest {\npublic static void main(String[] args) {\nAbstractApplicationContext ctx = new AnnotationConfigApplicationContext(AppConfig.class);\nEmployeeService employeeService = ctx.getBean("employeeService", EmployeeServiceImpl.class);\ncreateEmployee(employeeService);\n// getEmployeeById(employeeService);\n// fetchAllEmployeesInfo(employeeService);\n// employeeService.updateEmployeeEmailById("praveenoruganti@gmail.com", 0);\n// employeeService.deleteEmployeeById(2);\nctx.close();\n}\n\nprivate static void fetchAllEmployeesInfo(EmployeeService employeeService) {\nList<Employee> empList = employeeService.getAllEmployeesInfo();\nfor (Employee employee : empList) {\nSystem.out.println(employee.getEmployeeId() + "\t" + employee.getEmployeeName() + "\t" + employee.getEmail()\n+ "\t" + employee.getGender() + "\t" + employee.getSalary());\n}\n}\n\nprivate static void getEmployeeById(EmployeeService employeeService) {\nEmployee employee = employeeService.fetchEmployeeById(0);\nSystem.out.println(employee.getEmployeeId() + "\t" + employee.getEmployeeName());\n}\n\nprivate static void createEmployee(EmployeeService employeeService) {\nEmployee employee = new Employee();\nemployee.setEmail("mnp3pk1@gmail.com.com");\nemployee.setEmployeeName("Praveen");\nemployee.setGender("Male");\nemployee.setSalary(190000.00);\nemployeeService.addEmployee(employee);\n}\n}\n\n```\n\n**How to implement Connection pooling ?**\n\n1. C3P0 Add dependency in pom.xml\n\n```jsx\n<dependency>\n  <groupId>com.mchange</groupId>\n  <artifactId>c3p0</artifactId>\n  <version>0.9.5.2</version>\n</dependency>\n```\n\nAdd below property in database.properties\n\n```jsx\npool.initialSize = 5;\n```\n\nChange datasource to ComboPooledDataSource in AppConfig.java\n\n```jsx\n@Configuration\n@ComponentScan("com.praveen")\n@PropertySource("classpath:database.properties")\npublic class AppConfig {\n@Value("db.driver")\nprivate String DB_DRIVER;\n@Value("db.password")\nprivate String DB_PASSWORD;\n@Value("db.url")\nprivate String DB_URL;\n@Value("db.username")\nprivate String DB_USERNAME;\n@Bean\n\npublic DataSource datasource() throws PropertyVetoException {\nComboPooledDataSource datasource = new ComboPooledDataSource(); datasource.setDriverClass(DB_DRIVER);\ndatasource.setJdbcUrl(DB_URL);\ndatasource.setUser(DB_USERNAME);\ndatasource.setPassword(DB_PASSWORD);\nreturn datasource;\n}\n\n}\n```\n\n2. Hikari Add dependency in pom.xml\n\n```jsx\n<dependency>\n  <groupId>com.zaxxer</groupId>\n  <artifactId>HikariCP</artifactId>\n  <version>3.2.0</version>\n</dependency>\n```\n\nAdd below property in database.properties\n\n```jsx\nspring.datasource.hikari.connectionTimeout = 30000;\nspring.datasource.hikari.idleTimeout = 600000;\nspring.datasource.hikari.maxLifetime = 1800000;\nspring.datasource.hikari.maximumPoolSize = 5;\n```\n\nChange datasource to HikariDataSource in AppConfig.java\n\n```jsx\n@Configuration\n@ComponentScan("com.praveen")\n@PropertySource("classpath:database.properties")\npublic class AppConfig {\n@Value("db.driver")\nprivate String DB_DRIVER;\n@Value("db.password")\nprivate String DB_PASSWORD;\n@Value("db.url")\nprivate String DB_URL;\n@Value("db.username")\nprivate String DB_USERNAME;\n@Bean\npublic DataSource datasource() throws PropertyVetoException {\nHikariDataSource datasource = new HikariDataSource(); datasource.setDriverClassName(DB_DRIVER);\ndatasource.setJdbcUrl(DB_URL);\ndatasource.setUsername(DB_USERNAME);\ndatasource.setPassword(DB_PASSWORD);\nreturn datasource;\n}\n}\n\n```\n\n\n '}}]);