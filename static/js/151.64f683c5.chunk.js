(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[151],{720:function(n,e,t){"use strict";t.r(e),e.default=' A function is a block of code that performs a specific task.\n\nSuppose you need to create a program to create a circle and color it. You can create two functions to solve this problem:\n\n- a function to draw the circle\n- a function to color the circle\n\nDividing a complex problem into smaller chunks makes your program easy to understand and reusable.\n\nJavaScript also has a huge number of inbuilt functions. For example, Math.sqrt() is a function to calculate the square root of a number.\n\n### Function Declaration\nThe syntax to declare a function is:\n\n```jsx\nfunction nameOfFunction () {\n    // function body\n}\n```\n- A function is declared using the function keyword.\n- The basic rules of naming a function are similar to naming a variable. It is better to write a descriptive name for your function. For example, if a function is used to add two numbers, you could name the function add or addNumbers.\n- The body of function is written within {}.\n\n```jsx\n// declaring a function named greet()\nfunction greet() {\n    console.log("Hello there");\n}\n```\n### Calling a Function\nIn the above program, we have declared a function named greet(). To use that function, we need to call it.\n\nHere\'s how you can call the above greet() function.\n\n```jsx\n// function call\ngreet();\n```\n\n```jsx\n// program to print a text\n// declaring a function\nfunction greet() {\n    console.log("Hello there!");\n}\n\n// calling the function\ngreet();\n```\n\n### Function Parameters\nA function can also be declared with parameters. A parameter is a value that is passed when declaring a function.\n\n```jsx\n// program to print the text\n// declaring a function\nfunction greet(name) {\n    console.log("Hello " + name + ":)");\n}\n\n// variable name can be different\nlet name = prompt("Enter a name: ");\n\n// calling function\ngreet(name);\n```\nIn the above program, the greet function is declared with a name parameter. The user is prompted to enter a name. Then when the function is called, an argument is passed into the function.\n\nNote: When a value is passed when declaring a function, it is called parameter. And when the function is called, the value passed is called argument.\n\n```jsx\n// program to add two numbers using a function\n// declaring a function\nfunction add(a, b) {\n    console.log(a + b);\n}\n\n// calling functions\nadd(3,4);\nadd(2,9);\n```\n\n### Function Return\nThe return statement can be used to return the value to a function call.\n\nThe return statement denotes that the function has ended. Any code after return is not executed.\n\nIf nothing is returned, the function returns an undefined value.\n\n```jsx\n// program to add two numbers\n// declaring a function\nfunction add(a, b) {\n    return a + b;\n}\n\n// take input from the user\nlet number1 = parseFloat(prompt("Enter first number: "));\nlet number2 = parseFloat(prompt("Enter second number: "));\n\n// calling function\nlet result = add(number1,number2);\n\n// display the result\nconsole.log("The sum is " + result);\n```\n\n### Benefits of Using a Function\n- Function makes the code reusable. You can declare it once and use it multiple times.\n- Function makes the program easier as each small task is divided into a function.\n- Function increases readability.\n\n## Function Expressions\n\nIn Javascript, functions can also be defined as expressions.\n\n```jsx\n// program to find the square of a number\n// function is declared inside the variable\nlet x = function (num) { return num * num };\nconsole.log(x(4));\n\n// can be used as variable value for other variables\nlet y = x(3);\nconsole.log(y);\n```\n## JavaScript Recursion\n\nRecursion is a process of calling itself. A function that calls itself is called a recursive function.\n\n```jsx\nfunction recurse() {\n    // function code\n    recurse();\n    // function code\n}\n\nrecurse();\n```\nHere, the recurse() function is a recursive function. It is calling itself inside a function.\n\nA recursive function must have a condition to stop calling itself. Otherwise, the function is called indefinitely.\n\nOnce a condition is met, the function stops calling itself. This is called a base condition.\n\nTo prevent infinite recursion, you can use if...else statement (or similar approach) where one branch makes the recursive call, and the other doesn\'t.\n\nSo, it generally looks like this.\n\n```jsx\nfunction recurse() {\n    if(condition) {\n        recurse();\n    }\n    else {\n        // stop calling recurse()\n    }\n}\n\nrecurse();\n```\n```jsx\n// program to count down numbers to 1\nfunction countDown(number) {\n\n    // display the number\n    console.log(number);\n\n    // decrease the number value\n    const newNumber = number - 1;\n\n    // base case\n    if (newNumber > 0) {\n        countDown(newNumber);\n    }\n}\n\ncountDown(4);\n```\n```jsx\n// program to find the factorial of a number\nfunction factorial(x) {\n\n    // if number is 0\n    if (x === 0) {\n        return 1;\n    }\n\n    // if number is positive\n    else {\n        return x * factorial(x - 1);\n    }\n}\n\nconst num = 3;\n\n// calling factorial() if num is non-negative\nif (num > 0) {\n    let result = factorial(num);\n}\n\n```\nYou can check out the [Demo](https://praveenoruganti.github.io/courses/demo/js/Functions)\n\n\n\n\n\n\n '}}]);