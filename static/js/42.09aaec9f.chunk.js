(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[42],{611:function(t,e,n){"use strict";n.r(e),e.default=' It is a type of Structural Design Pattern.\n\nIn the flyweight pattern, instead of creating large numbers of similar objects, objects are reused. This can be used to reduce memory requirements and instantiation time and\nrelated costs.\n\nFlyweight design pattern is used when we need to create a lot of Objects of a class. Since every object consumes memory space that can be crucial for low memory devices, such as\nmobile devices or embedded systems, flyweight design pattern can be applied to reduce the load on memory by sharing objects.\n\nTo reuse already existing similar kind of objects by storing them and create new object when no matching object is found.\n\nThis is primarily used to reduce the number of objects created and to decrease the memory foot print there by increase in performance.\n\nIt is same as Factory pattern but provides you with a basic caching mechanism for created immutable instances.\n\nWhen you ask getInstance(Property p) it checks if property exists\n- For factory , if property doesnt exist it throws exception\n- For Flyweight, Creates the object and returns.\n\nModern web browsers uses this pattern like loading similar pages.\n\nString intern() follows Flyweight Pattern.\n\n```jsx\npackage com.praveen.designpatterns.structural.flyweight;\n\npublic interface Ticket {\n\tvoid setName(String name);\n\n\tvoid setFare(int fare);\n\n\tvoid printTicket();\n}\n\n```\n\n```jsx\npackage com.praveen.designpatterns.structural.flyweight;\n\npublic class RailwayTicket implements Ticket {\n\tprivate String type;\n\tprivate int fare;\n\tprivate String name;\n\n\tpublic RailwayTicket(String type) {\n\t\tthis.type = type;\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n\tpublic void setFare(int fare) {\n\t\tthis.fare = fare;\n\t}\n\n\t@Override\n\tpublic void printTicket() {\n\t\tSystem.out.println("--------TICKET--------");\n\t\tSystem.out.println("Name : " + name + "\nTicket Type : " + type + "\nFare : " + fare);\n\t}\n}\n```\n\n```jsx\npackage com.praveen.designpatterns.structural.flyweight;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class TicketFactory {\n\n\tprivate static Map<String, Ticket> ticketMap = new HashMap<>();\n\n\tprivate TicketFactory() {\n\n\t}\n\n\tpublic static Ticket getTicket(String type, String name, int fare) {\n\t\tTicket ticket;\n\t\tif (ticketMap.containsKey(type)) {\n\t\t\tticket = ticketMap.get(type);\n\t\t} else {\n\t\t\tticket = new RailwayTicket(type);\n\t\t\tticketMap.put(type, ticket);\n\t\t}\n\n\t\tticket.setName(name);\n\t\tticket.setFare(fare);\n\n\t\treturn ticket;\n\t}\n}\n```\n\n```jsx\npackage com.praveen.designpatterns.structural.flyweight;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\npublic class TicketBookingSystem {\n\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tTicket ticket;\n\n\t\tfor (int i = 0; i < 5; i++) {\n\t\t\tSystem.out.println("Enter ticket type, Name and Fare");\n\t\t\tString[] stringList = br.readLine().split(" ");\n\t\t\tticket = TicketFactory.getTicket(stringList[0], stringList[1], Integer.parseInt(stringList[2]));\n\t\t\tticket.printTicket();\n\t\t}\n\t}\n}\n\n```\n\n**Output**\n\n```jsx\nEnter ticket type, Name and Fare\nINFANT Jack 100\n--------TICKET--------\nName : Jack\nTicket Type : INFANT\nFare : 100\nEnter ticket type, Name and Fare\nADULT George 500\n--------TICKET--------\nName : George\nTicket Type : ADULT\nFare : 500\nEnter ticket type, Name and Fare\nINFANT Adams 100\n--------TICKET--------\nName : Adams\nTicket Type : INFANT\nFare : 100\nEnter ticket type, Name and Fare\nINFANT Julia 100\n--------TICKET--------\nName : Julia\nTicket Type : INFANT\nFare : 100\nEnter ticket type, Name and Fare\nADULT Rex 500\n--------TICKET--------\nName : Rex\nTicket Type : ADULT\nFare : 500\n```\n\n### Benefits\n- It reduces the number of objects.\n- It reduces the amount of memory and storage devices required if the objects are persisted.\n\n\n### Flyweight pattern examples in JDK\n- All the wrapper classes valueOf() method uses cached objects showing use of Flyweight design pattern. The best example is Java String class String Pool implementation.\n\n '}}]);