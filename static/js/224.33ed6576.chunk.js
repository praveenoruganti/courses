(this["webpackJsonppraveenoruganti-courses"]=this["webpackJsonppraveenoruganti-courses"]||[]).push([[224],{793:function(e,t,n){"use strict";n.r(t),t.default=' Batch processing is a group or whole process. Which is a process of group or batch transactions that does not interact with users when running batch processing. \n\nThe difference between batch processing and transaction processing is that transaction processing processes one transaction at a time and interacts with users, while batch processing can process anytime which is especially suitable for processing at the end of the cycle (end-of-cycle processing) such as for creating bank reports at the end of the day. Or pay monthly or bi-monthly payrolls, and Spring framework also has Spring Batch support for Batch processing. \n\nSpring framework also has a project that supports batch processing. This is Spring Batch specifically designed for this type of processing. Allowing us to reuse the functions needed to work with big data, including tracing / logging, transaction management, job processing statistic, job restart, and resource management, with advanced techniques to handle very large data through optimization and partitioning techniques, and also support scalable.\n\nIn Spring Batch to work with sources of information (data source) from a variety of text file or database where job ( the Job ) of batch processing consists of several steps ( Step ) Each Step has 3 parts ItemReader , ItemProcess and ItemWriter by JobLauncher will start the Job by keeping the metadata during operation at JobRepository.\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/springboot/batchprocessing.png)\n\nAny Spring Batch job has 2 main components, Job, and Steps. A job may have multiple steps. Each step has a compulsory reader and writer routines and an optional processor unit.\n\n**Step**\n\nA Step is a fundamental unit of any Job. It is a\xa0domain object that encapsulates an independent, sequential phase of a batch job.\xa0A Step defines necessary\xa0information to define and control the actual batch processing.\n\n**Item Reader**\n\nItemReader is an abstract representation of how data is provided as input to a Step. When the inputs are exhausted, the ItemReader returns null.\n\n**Item Processor**\n\nItemProcessor represents the business processing of an item. The data read by ItemReader can be passed on to ItemProcessor. In this unit, the data is transformed and sent for writing.\xa0If, while processing the item, it becomes invalid for further processing, you can return null. The nulls are not written by ItemWriter.\n\n**Item Writer**\n\nItemWriter is the output of a Step. The writer writes one batch or chunk of items at a time to the target system. ItemWriter has no knowledge of the input it will receive next, only the item that was passed in its current invocation.\n\n**Job Repository**\n\nThe Job Repository stores metadata regarding JobParameters, JobInstances, JobExecutions, and StepExecutions.\n\nJob Repository uses the below tables for storing the above information in relational database.\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/springboot/jobrepository.jpg)\n\n**Steps**\n\nTwo types of Steps available in Spring Batch\n\n- **Tasklet-based Step**\n\n  1. Interface contains a single execute method.\n  2. Used for logic, unable to achieved with out of the box components.\n   \n- ** Chunk-based Step**\n\n  1. Leverages an ItemReader and ItemWriter to process chunks of data.\n  2. ItemProcessor can optionally be included.\n\n\n**Let\'s create a Delivery Package Batch Application**\n\n**Add spring batch dependency in pom.xml**\n\n```jsx\n<dependency>\n\t<groupId>org.springframework.boot</groupId>\n\t<artifactId>spring-boot-starter-batch</artifactId>\n</dependency>\n<dependency>\n\t<groupId>mysql</groupId>\n\t<artifactId>mysql-connector-java</artifactId>\n</dependency>\n```\n\n**appplication.yml**\n\n```jsx\nspring:\n application:\n  name: praveen-delivery-package-batch\n datasource:\n    url: jdbc:mysql://root:password-1@localhost:3306/praveendeliverydb?reconnect=true \n    driverClassName: com.mysql.cj.jdbc.Driver\n batch:\n   jdbc:\n    initialize-schema: always\n```\n\n**DeliveryPackageBatchApplication.java**\n\n```jsx\npackage com.praveen.batch;\n\nimport org.springframework.batch.core.Job;\nimport org.springframework.batch.core.Step;\nimport org.springframework.batch.core.StepContribution;\nimport org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;\nimport org.springframework.batch.core.configuration.annotation.JobBuilderFactory;\nimport org.springframework.batch.core.configuration.annotation.StepBuilderFactory;\nimport org.springframework.batch.core.scope.context.ChunkContext;\nimport org.springframework.batch.core.step.tasklet.Tasklet;\nimport org.springframework.batch.repeat.RepeatStatus;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.annotation.Bean;\n\nimport lombok.AllArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\n\n@SpringBootApplication\n@EnableBatchProcessing\n@AllArgsConstructor\n@Slf4j\npublic class DeliveryPackageBatchApplication {\n\n\tprivate final JobBuilderFactory jobBuilderFactory;\n\n\tprivate final StepBuilderFactory stepBuilderFactory;\n\n\t@Bean\n\tpublic Step packageItemStep() {\n\t\treturn this.stepBuilderFactory.get("packageItem").tasklet(new Tasklet() {\n\t\t\t@Override\n\t\t\tpublic RepeatStatus execute(StepContribution stepContribution, ChunkContext chunkContext) throws Exception {\n\t\t\t\tlog.info("The item has been packaged");\n\t\t\t\treturn RepeatStatus.FINISHED;\n\t\t\t}\n\t\t}).build();\n\t}\n\n\t@Bean\n\tpublic Step driveToAddressStep() {\n\t\treturn this.stepBuilderFactory.get("driveToAddress").tasklet(new Tasklet() {\n\t\t\t@Override\n\t\t\tpublic RepeatStatus execute(StepContribution stepContribution, ChunkContext chunkContext) throws Exception {\n\t\t\t\tlog.info("Successfully arrived at the address.");\n\t\t\t\treturn RepeatStatus.FINISHED;\n\t\t\t}\n\t\t}).build();\n\t}\n\n\t@Bean\n\tpublic Step givePackageToCustomerStep() {\n\t\treturn this.stepBuilderFactory.get("givePackageToCustomer").tasklet(new Tasklet() {\n\t\t\t@Override\n\t\t\tpublic RepeatStatus execute(StepContribution stepContribution, ChunkContext chunkContext) throws Exception {\n\t\t\t\tlog.info("Given the package to the Customer.");\n\t\t\t\treturn RepeatStatus.FINISHED;\n\t\t\t}\n\t\t}).build();\n\t}\n\n\t@Bean\n\tpublic Job deliveryPackageJob() {\n\t\treturn this.jobBuilderFactory.get("deliveryPackageJob").start(packageItemStep()).next(driveToAddressStep())\n\t\t\t\t.next(givePackageToCustomerStep()).build();\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(DeliveryPackageBatchApplication.class, args);\n\t}\n\n}\n\n```\n\nOnce you run the springboot app, \n\n1. Below tables are created by spring batch automatically in mysql db.\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/springboot/praveendeliverydb.jpg)\n\n\n```jsx\nselect * from batch_job_instance;\n```\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/springboot/jobinstance.jpg)\n\n```jsx\nselect * from batch_job_execution;\n```\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/springboot/jobexecution1.jpg)\n\n```jsx\nselect * from batch_step_execution;\n```\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/springboot/stepexecution1.jpg)\n\n2. Here with the app logs for your reference.\n\n```jsx\n\n\n{"@timestamp":"2021-06-18T04:02:34.883+05:30","severity":"INFO","service":"praveen-delivery-package-batch","thread":"main","class":"o.s.b.c.launch.support.SimpleJobLauncher","methodName":"run","lineNo":"146","message":"Job: [SimpleJob: [name=deliveryPackageJob]] launched with the following parameters: [{}]","stacktrace":""}\n{"@timestamp":"2021-06-18T04:02:34.983+05:30","severity":"INFO","service":"praveen-delivery-package-batch","thread":"main","class":"o.s.batch.core.job.SimpleStepHandler","methodName":"handleStep","lineNo":"149","message":"Executing step: [packageItem]","stacktrace":""}\n{"@timestamp":"2021-06-18T04:02:35.020+05:30","severity":"INFO","service":"praveen-delivery-package-batch","thread":"main","class":"c.p.b.DeliveryPackageBatchApplication","methodName":"execute","lineNo":"34","message":"The item has been packaged","stacktrace":""}\n{"@timestamp":"2021-06-18T04:02:35.042+05:30","severity":"INFO","service":"praveen-delivery-package-batch","thread":"main","class":"o.s.batch.core.step.AbstractStep","methodName":"execute","lineNo":"273","message":"Step: [packageItem] executed in 58ms","stacktrace":""}\n{"@timestamp":"2021-06-18T04:02:35.095+05:30","severity":"INFO","service":"praveen-delivery-package-batch","thread":"main","class":"o.s.batch.core.job.SimpleStepHandler","methodName":"handleStep","lineNo":"149","message":"Executing step: [driveToAddress]","stacktrace":""}\n{"@timestamp":"2021-06-18T04:02:35.120+05:30","severity":"INFO","service":"praveen-delivery-package-batch","thread":"main","class":"c.p.b.DeliveryPackageBatchApplication","methodName":"execute","lineNo":"45","message":"Successfully arrived at the address.","stacktrace":""}\n{"@timestamp":"2021-06-18T04:02:35.137+05:30","severity":"INFO","service":"praveen-delivery-package-batch","thread":"main","class":"o.s.batch.core.step.AbstractStep","methodName":"execute","lineNo":"273","message":"Step: [driveToAddress] executed in 41ms","stacktrace":""}\n{"@timestamp":"2021-06-18T04:02:35.196+05:30","severity":"INFO","service":"praveen-delivery-package-batch","thread":"main","class":"o.s.batch.core.job.SimpleStepHandler","methodName":"handleStep","lineNo":"149","message":"Executing step: [givePackageToCustomer]","stacktrace":""}\n{"@timestamp":"2021-06-18T04:02:35.222+05:30","severity":"INFO","service":"praveen-delivery-package-batch","thread":"main","class":"c.p.b.DeliveryPackageBatchApplication","methodName":"execute","lineNo":"56","message":"Given the package to the Customer.","stacktrace":""}\n{"@timestamp":"2021-06-18T04:02:35.237+05:30","severity":"INFO","service":"praveen-delivery-package-batch","thread":"main","class":"o.s.batch.core.step.AbstractStep","methodName":"execute","lineNo":"273","message":"Step: [givePackageToCustomer] executed in 40ms","stacktrace":""}\n{"@timestamp":"2021-06-18T04:02:35.260+05:30","severity":"INFO","service":"praveen-delivery-package-batch","thread":"main","class":"o.s.b.c.launch.support.SimpleJobLauncher","methodName":"run","lineNo":"152","message":"Job: [SimpleJob: [name=deliveryPackageJob]] completed with the following parameters: [{}] and the following status: [COMPLETED] in 330ms","stacktrace":""}\n\n```\n\n**Let\'s create a simple batch application where we read a csv file in chunks andd then write it to database.**\n\n![screenshot of the app](https://praveenoruganti.github.io/courses/images/springboot/batchprocessing1.jpg)\n\n**Add spring batch dependency in pom.xml**\n\n```jsx\n<dependency>\n\t<groupId>org.springframework.boot</groupId>\n\t<artifactId>spring-boot-starter-batch</artifactId>\n</dependency>\n<dependency>\n\t<groupId>mysql</groupId>\n\t<artifactId>mysql-connector-java</artifactId>\n</dependency>\n```\n\nThe CSV file(users.csv) to be read contains the following information for example,\n\n```jsx\nid,name,dept,salary\n1,Praveen,001,92000\n2,Prasad,002,82000\n3,Anusha,003,72000\n```\n\n\n**Create User Entity Class**\n\n```jsx\n@Entity\n@ToString\n@NoArgsConstructor\n@AllArgsConstructor\n@SuperBuilder\n@Data\npublic class User {\n\t@Id\n\tprivate Integer id;\n\tprivate String name;\n\tprivate String dept;\n\tprivate Integer salary;\n\tprivate Date time;\n}\n\n```\n\n**Create a User Repository class**\n\n```jsx\npublic interface UserRepository extends JpaRepository<User, Integer> {\n}\n```\n\nLet\'s read the data from a CSV file with ItemReader and converting data to be read with ItemProcess. After that, insert data into the database with ItemWriter.\n\n**Create a Batch Configuration class**\n\n```jsx\n@Configuration\n@EnableBatchProcessing\npublic class BatchConfiguration {\n\n\t@Bean\n\tpublic Job job(JobBuilderFactory jobBuilderFactory, StepBuilderFactory stepBuilderFactory,\n\t\t\tItemReader<User> itemReader, ItemProcessor<User, User> itemProcessor, ItemWriter<User> itemWriter,\n\t\t\tEnvironment env) {\n\n\t\tStep step = stepBuilderFactory.get("step-load")\n\t\t\t\t.<User, User>chunk(Integer.parseInt(env.getRequiredProperty("app.batchSize"))).reader(itemReader)\n\t\t\t\t.processor(itemProcessor).writer(itemWriter).build();\n\n\t\treturn jobBuilderFactory.get("job-load").incrementer(new RunIdIncrementer()).start(step).build();\n\t}\n\t\n\t/**\n\t * The itemReader() method is used to read the data from the CSV file\n\t */\n\t@Bean\n\tpublic FlatFileItemReader<User> itemReader() {\n\n\t\tFlatFileItemReader<User> flatFileItemReader = new FlatFileItemReader<>();\n\t\tflatFileItemReader.setResource(new FileSystemResource("src/main/resources/users.csv"));\n\t\tflatFileItemReader.setName("CSV-Reader");\n\t\tflatFileItemReader.setLinesToSkip(1);\n\t\tflatFileItemReader.setLineMapper(lineMapper());\n\t\treturn flatFileItemReader;\n\t}\n\n\t@Bean\n\tpublic LineMapper<User> lineMapper() {\n\n\t\tDefaultLineMapper<User> defaultLineMapper = new DefaultLineMapper<>();\n\t\tDelimitedLineTokenizer lineTokenizer = new DelimitedLineTokenizer();\n\n\t\tlineTokenizer.setDelimiter(",");\n\t\tlineTokenizer.setStrict(false);\n\t\tlineTokenizer.setNames("id", "name", "dept", "salary");\n\n\t\tBeanWrapperFieldSetMapper<User> fieldSetMapper = new BeanWrapperFieldSetMapper<>();\n\t\tfieldSetMapper.setTargetType(User.class);\n\n\t\tdefaultLineMapper.setLineTokenizer(lineTokenizer);\n\t\tdefaultLineMapper.setFieldSetMapper(fieldSetMapper);\n\n\t\treturn defaultLineMapper;\n\t}\n\n}\n```\n\n**Create a Item Processor class**\n\n```jsx\n/**\n * Intermediate processor to do the operations after the reading the data from the CSV file and\n * before writing the data into DB.\n */\n@Component\npublic class UserItemProcessor implements ItemProcessor<User, User> {\n\n    private static final Map<String, String> DEPT_NAMES =\n            new HashMap<>();\n\n    public UserItemProcessor() {\n        DEPT_NAMES.put("001", "Technology");\n        DEPT_NAMES.put("002", "Operations");\n        DEPT_NAMES.put("003", "Accounts");\n    }\n\n    @Override\n    public User process(User user) throws Exception {\n        String deptCode = user.getDept();\n        String dept = DEPT_NAMES.get(deptCode);\n        user.setDept(dept);\n        user.setTime(new Date());\n        return user;\n    }\n}\n\n\n```\n\n**Create a Item Writer class**\n\n```jsx\n/**\n * Item writer writes the data into DB\n * \n */\n@Component\npublic class UserItemWriter implements ItemWriter<User> {\n\n\tprivate UserRepository userRepository;\n\n\t@Autowired\n\tpublic UserItemWriter(UserRepository userRepository) {\n\t\tthis.userRepository = userRepository;\n\t}\n\n\t@Override\n\tpublic void write(List<? extends User> users) {\n\t\tSystem.out.println("Data Saved for Users: " + users);\n\t\tuserRepository.saveAll(users);\n\t}\n}\n```\n\n\nLet\'s write a controller to trigger the job\n\n```jsx\n@RestController\n@AllArgsConstructor\npublic class JobInvokerController {\n\n\tprivate final JobLauncher jobLauncher;\n\n\tprivate final Job job;\n\n\t@GetMapping("/load")\n\tpublic BatchStatus load() throws JobParametersInvalidException, JobExecutionAlreadyRunningException,\n\t\t\tJobRestartException, JobInstanceAlreadyCompleteException {\n\t\tMap<String, JobParameter> maps = new HashMap<>();\n\t\tmaps.put("time", new JobParameter(System.currentTimeMillis()));\n\t\tJobParameters parameters = new JobParameters(maps);\n\t\tJobExecution jobExecution = jobLauncher.run(job, parameters);\n\t\treturn jobExecution.getStatus();\n\t}\n}\n```\n\n\n\n\n\n '}}]);